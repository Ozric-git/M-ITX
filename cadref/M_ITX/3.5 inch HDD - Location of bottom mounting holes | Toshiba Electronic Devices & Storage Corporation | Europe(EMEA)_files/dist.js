"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
    "use strict";

    if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
        module.exports = global.document ? factory(global, true) : function (w) {
            if (!w.document) {
                throw new Error("jQuery requires a window with a document");
            }

            return factory(w);
        };
    } else {
        factory(global);
    }

})(typeof window !== "undefined" ? window : void 0, function (window, noGlobal) {
    "use strict";

    var arr = [];
    var document = window.document;
    var getProto = Object.getPrototypeOf;
    var _slice = arr.slice;
    var concat = arr.concat;
    var push = arr.push;
    var indexOf = arr.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var fnToString = hasOwn.toString;
    var ObjectFunctionString = fnToString.call(Object);
    var support = {};

    var isFunction = function isFunction(obj) {
        return typeof obj === "function" && typeof obj.nodeType !== "number";
    };

    var isWindow = function isWindow(obj) {
        return obj != null && obj === obj.window;
    };

    var preservedScriptAttributes = {
        type: true,
        src: true,
        noModule: true
    };

    function DOMEval(code, doc, node) {
        doc = doc || document;
        var i,
            script = doc.createElement("script");
        script.text = code;

        if (node) {
            for (i in preservedScriptAttributes) {
                if (node[i]) {
                    script[i] = node[i];
                }
            }
        }

        doc.head.appendChild(script).parentNode.removeChild(script);
    }

    function toType(obj) {
        if (obj == null) {
            return obj + "";
        }


        return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
    }


    var version = "3.3.1",
        jQuery = function jQuery(selector, context) {
            return new jQuery.fn.init(selector, context);
        },
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        length: 0,
        toArray: function toArray() {
            return _slice.call(this);
        },
        get: function get(num) {
            if (num == null) {
                return _slice.call(this);
            }


            return num < 0 ? this[num + this.length] : this[num];
        },
        pushStack: function pushStack(elems) {
            var ret = jQuery.merge(this.constructor(), elems);

            ret.prevObject = this;

            return ret;
        },
        each: function each(callback) {
            return jQuery.each(this, callback);
        },
        map: function map(callback) {
            return this.pushStack(jQuery.map(this, function (elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function slice() {
            return this.pushStack(_slice.apply(this, arguments));
        },
        first: function first() {
            return this.eq(0);
        },
        last: function last() {
            return this.eq(-1);
        },
        eq: function eq(i) {
            var len = this.length,
                j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function end() {
            return this.prevObject || this.constructor();
        },
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };

    jQuery.extend = jQuery.fn.extend = function () {
        var options,
            name,
            src,
            copy,
            copyIsArray,
            clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        if (typeof target === "boolean") {
            deep = target;

            target = arguments[i] || {};
            i++;
        }


        if (_typeof(target) !== "object" && !isFunction(target)) {
            target = {};
        }


        if (i === length) {
            target = this;
            i--;
        }

        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];

                    if (target === copy) {
                        continue;
                    }


                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && Array.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }


                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }


        return target;
    };

    jQuery.extend({
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        isReady: true,
        error: function error(msg) {
            throw new Error(msg);
        },
        noop: function noop() { },
        isPlainObject: function isPlainObject(obj) {
            var proto, Ctor;

            if (!obj || toString.call(obj) !== "[object Object]") {
                return false;
            }

            proto = getProto(obj);

            if (!proto) {
                return true;
            }


            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function isEmptyObject(obj) {
            var name;

            for (name in obj) {
                return false;
            }

            return true;
        },
        globalEval: function globalEval(code) {
            DOMEval(code);
        },
        each: function each(obj, callback) {
            var length,
                i = 0;

            if (isArrayLike(obj)) {
                length = obj.length;

                for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }

            return obj;
        },
        trim: function trim(text) {
            return text == null ? "" : (text + "").replace(rtrim, "");
        },
        makeArray: function makeArray(arr, results) {
            var ret = results || [];

            if (arr != null) {
                if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
                } else {
                    push.call(ret, arr);
                }
            }

            return ret;
        },
        inArray: function inArray(elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        merge: function merge(first, second) {
            var len = +second.length,
                j = 0,
                i = first.length;

            for (; j < len; j++) {
                first[i++] = second[j];
            }

            first.length = i;
            return first;
        },
        grep: function grep(elems, callback, invert) {
            var callbackInverse,
                matches = [],
                i = 0,
                length = elems.length,
                callbackExpect = !invert;

            for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);

                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }

            return matches;
        },
        map: function map(elems, callback, arg) {
            var length,
                value,
                i = 0,
                ret = [];

            if (isArrayLike(elems)) {
                length = elems.length;

                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret.push(value);
                    }
                }

            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret.push(value);
                    }
                }
            }


            return concat.apply([], ret);
        },
        guid: 1,
        support: support
    });

    if (typeof Symbol === "function") {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
    }


    jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });

    function isArrayLike(obj) {
        var length = !!obj && "length" in obj && obj.length,
            type = toType(obj);

        if (isFunction(obj) || isWindow(obj)) {
            return false;
        }

        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
    }

    var Sizzle =
        function (window) {
            var i,
                support,
                Expr,
                getText,
                isXML,
                tokenize,
                compile,
                select,
                outermostContext,
                sortInput,
                hasDuplicate,
                setDocument,
                document,
                docElem,
                documentIsHTML,
                rbuggyQSA,
                rbuggyMatches,
                matches,
                contains,
                expando = "sizzle" + 1 * new Date(),
                preferredDoc = window.document,
                dirruns = 0,
                done = 0,
                classCache = createCache(),
                tokenCache = createCache(),
                compilerCache = createCache(),
                sortOrder = function sortOrder(a, b) {
                    if (a === b) {
                        hasDuplicate = true;
                    }

                    return 0;
                },
                hasOwn = {}.hasOwnProperty,
                arr = [],
                pop = arr.pop,
                push_native = arr.push,
                push = arr.push,
                slice = arr.slice,
                indexOf = function indexOf(list, elem) {
                    var i = 0,
                        len = list.length;

                    for (; i < len; i++) {
                        if (list[i] === elem) {
                            return i;
                        }
                    }

                    return -1;
                },
                booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                whitespace = "[\\x20\\t\\r\\n\\f]",
                identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
                attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
                    "*([*^$|!~]?=)" + whitespace +
                    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
                pseudos = ":(" + identifier + ")(?:\\((" +
                    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
                    "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
                    ".*" + ")\\)|)",
                rwhitespace = new RegExp(whitespace + "+", "g"),
                rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
                rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
                rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
                rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
                rpseudo = new RegExp(pseudos),
                ridentifier = new RegExp("^" + identifier + "$"),
                matchExpr = {
                    "ID": new RegExp("^#(" + identifier + ")"),
                    "CLASS": new RegExp("^\\.(" + identifier + ")"),
                    "TAG": new RegExp("^(" + identifier + "|[*])"),
                    "ATTR": new RegExp("^" + attributes),
                    "PSEUDO": new RegExp("^" + pseudos),
                    "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                    "bool": new RegExp("^(?:" + booleans + ")$", "i"),
                    "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
                },
                rinputs = /^(?:input|select|textarea|button)$/i,
                rheader = /^h\d$/i,
                rnative = /^[^{]+\{\s*\[native \w/,
                rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                rsibling = /[+~]/,
                runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
                funescape = function funescape(_, escaped, escapedWhitespace) {
                    var high = "0x" + escaped - 0x10000;

                    return high !== high || escapedWhitespace ? escaped : high < 0 ?
                        String.fromCharCode(high + 0x10000) :
                        String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
                },
                rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
                fcssescape = function fcssescape(ch, asCodePoint) {
                    if (asCodePoint) {
                        if (ch === "\0") {
                            return "\uFFFD";
                        }


                        return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
                    }


                    return "\\" + ch;
                },
                unloadHandler = function unloadHandler() {
                    setDocument();
                },
                disabledAncestor = addCombinator(function (elem) {
                    return elem.disabled === true && ("form" in elem || "label" in elem);
                }, {
                        dir: "parentNode",
                        next: "legend"
                    });


            try {
                push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);

                arr[preferredDoc.childNodes.length].nodeType;
            } catch (e) {
                push = {
                    apply: arr.length ?
                        function (target, els) {
                            push_native.apply(target, slice.call(els));
                        } :
                        function (target, els) {
                            var j = target.length,
                                i = 0;

                            while (target[j++] = els[i++]) { }

                            target.length = j - 1;
                        }
                };
            }

            function Sizzle(selector, context, results, seed) {
                var m,
                    i,
                    elem,
                    nid,
                    match,
                    groups,
                    newSelector,
                    newContext = context && context.ownerDocument,
                    nodeType = context ? context.nodeType : 9;
                results = results || [];

                if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                    return results;
                }


                if (!seed) {
                    if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                        setDocument(context);
                    }

                    context = context || document;

                    if (documentIsHTML) {
                        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                            if (m = match[1]) {
                                if (nodeType === 9) {
                                    if (elem = context.getElementById(m)) {
                                        if (elem.id === m) {
                                            results.push(elem);
                                            return results;
                                        }
                                    } else {
                                        return results;
                                    }

                                } else {
                                    if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                }

                            } else if (match[2]) {
                                push.apply(results, context.getElementsByTagName(selector));
                                return results;
                            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                                push.apply(results, context.getElementsByClassName(m));
                                return results;
                            }
                        }


                        if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                            if (nodeType !== 1) {
                                newContext = context;
                                newSelector = selector;
                            } else if (context.nodeName.toLowerCase() !== "object") {
                                if (nid = context.getAttribute("id")) {
                                    nid = nid.replace(rcssescape, fcssescape);
                                } else {
                                    context.setAttribute("id", nid = expando);
                                }


                                groups = tokenize(selector);
                                i = groups.length;

                                while (i--) {
                                    groups[i] = "#" + nid + " " + toSelector(groups[i]);
                                }

                                newSelector = groups.join(",");

                                newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                            }

                            if (newSelector) {
                                try {
                                    push.apply(results, newContext.querySelectorAll(newSelector));
                                    return results;
                                } catch (qsaError) { } finally {
                                    if (nid === expando) {
                                        context.removeAttribute("id");
                                    }
                                }
                            }
                        }
                    }
                }


                return select(selector.replace(rtrim, "$1"), context, results, seed);
            }


            function createCache() {
                var keys = [];

                function cache(key, value) {
                    if (keys.push(key + " ") > Expr.cacheLength) {
                        delete cache[keys.shift()];
                    }

                    return cache[key + " "] = value;
                }

                return cache;
            }


            function markFunction(fn) {
                fn[expando] = true;
                return fn;
            }


            function assert(fn) {
                var el = document.createElement("fieldset");

                try {
                    return !!fn(el);
                } catch (e) {
                    return false;
                } finally {
                    if (el.parentNode) {
                        el.parentNode.removeChild(el);
                    }


                    el = null;
                }
            }


            function addHandle(attrs, handler) {
                var arr = attrs.split("|"),
                    i = arr.length;

                while (i--) {
                    Expr.attrHandle[arr[i]] = handler;
                }
            }


            function siblingCheck(a, b) {
                var cur = b && a,
                    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;

                if (diff) {
                    return diff;
                }


                if (cur) {
                    while (cur = cur.nextSibling) {
                        if (cur === b) {
                            return -1;
                        }
                    }
                }

                return a ? 1 : -1;
            }


            function createInputPseudo(type) {
                return function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === type;
                };
            }


            function createButtonPseudo(type) {
                return function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (name === "input" || name === "button") && elem.type === type;
                };
            }


            function createDisabledPseudo(disabled) {
                return function (elem) {
                    if ("form" in elem) {
                        if (elem.parentNode && elem.disabled === false) {
                            if ("label" in elem) {
                                if ("label" in elem.parentNode) {
                                    return elem.parentNode.disabled === disabled;
                                } else {
                                    return elem.disabled === disabled;
                                }
                            }


                            return elem.isDisabled === disabled ||

                                elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
                        }

                        return elem.disabled === disabled;
                    } else if ("label" in elem) {
                        return elem.disabled === disabled;
                    }


                    return false;
                };
            }


            function createPositionalPseudo(fn) {
                return markFunction(function (argument) {
                    argument = +argument;
                    return markFunction(function (seed, matches) {
                        var j,
                            matchIndexes = fn([], seed.length, argument),
                            i = matchIndexes.length;

                        while (i--) {
                            if (seed[j = matchIndexes[i]]) {
                                seed[j] = !(matches[j] = seed[j]);
                            }
                        }
                    });
                });
            }


            function testContext(context) {
                return context && typeof context.getElementsByTagName !== "undefined" && context;
            }


            support = Sizzle.support = {};

            isXML = Sizzle.isXML = function (elem) {
                var documentElement = elem && (elem.ownerDocument || elem).documentElement;
                return documentElement ? documentElement.nodeName !== "HTML" : false;
            };


            setDocument = Sizzle.setDocument = function (node) {
                var hasCompare,
                    subWindow,
                    doc = node ? node.ownerDocument || node : preferredDoc;

                if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                    return document;
                }


                document = doc;
                docElem = document.documentElement;
                documentIsHTML = !isXML(document);

                if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
                    if (subWindow.addEventListener) {
                        subWindow.addEventListener("unload", unloadHandler, false);
                    } else if (subWindow.attachEvent) {
                        subWindow.attachEvent("onunload", unloadHandler);
                    }
                }


                support.attributes = assert(function (el) {
                    el.className = "i";
                    return !el.getAttribute("className");
                });

                support.getElementsByTagName = assert(function (el) {
                    el.appendChild(document.createComment(""));
                    return !el.getElementsByTagName("*").length;
                });

                support.getElementsByClassName = rnative.test(document.getElementsByClassName);

                support.getById = assert(function (el) {
                    docElem.appendChild(el).id = expando;
                    return !document.getElementsByName || !document.getElementsByName(expando).length;
                });

                if (support.getById) {
                    Expr.filter["ID"] = function (id) {
                        var attrId = id.replace(runescape, funescape);
                        return function (elem) {
                            return elem.getAttribute("id") === attrId;
                        };
                    };

                    Expr.find["ID"] = function (id, context) {
                        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                            var elem = context.getElementById(id);
                            return elem ? [elem] : [];
                        }
                    };
                } else {
                    Expr.filter["ID"] = function (id) {
                        var attrId = id.replace(runescape, funescape);
                        return function (elem) {
                            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                            return node && node.value === attrId;
                        };
                    };


                    Expr.find["ID"] = function (id, context) {
                        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                            var node,
                                i,
                                elems,
                                elem = context.getElementById(id);

                            if (elem) {
                                node = elem.getAttributeNode("id");

                                if (node && node.value === id) {
                                    return [elem];
                                }


                                elems = context.getElementsByName(id);
                                i = 0;

                                while (elem = elems[i++]) {
                                    node = elem.getAttributeNode("id");

                                    if (node && node.value === id) {
                                        return [elem];
                                    }
                                }
                            }

                            return [];
                        }
                    };
                }


                Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
                    if (typeof context.getElementsByTagName !== "undefined") {
                        return context.getElementsByTagName(tag);
                    } else if (support.qsa) {
                        return context.querySelectorAll(tag);
                    }
                } : function (tag, context) {
                    var elem,
                        tmp = [],
                        i = 0,
                        results = context.getElementsByTagName(tag);

                    if (tag === "*") {
                        while (elem = results[i++]) {
                            if (elem.nodeType === 1) {
                                tmp.push(elem);
                            }
                        }

                        return tmp;
                    }

                    return results;
                };

                Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
                    if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                        return context.getElementsByClassName(className);
                    }
                };


                rbuggyMatches = [];

                rbuggyQSA = [];

                if (support.qsa = rnative.test(document.querySelectorAll)) {
                    assert(function (el) {
                        docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

                        if (el.querySelectorAll("[msallowcapture^='']").length) {
                            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                        }


                        if (!el.querySelectorAll("[selected]").length) {
                            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                        }


                        if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                            rbuggyQSA.push("~=");
                        }


                        if (!el.querySelectorAll(":checked").length) {
                            rbuggyQSA.push(":checked");
                        }


                        if (!el.querySelectorAll("a#" + expando + "+*").length) {
                            rbuggyQSA.push(".#.+[+~]");
                        }
                    });
                    assert(function (el) {
                        el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";

                        var input = document.createElement("input");
                        input.setAttribute("type", "hidden");
                        el.appendChild(input).setAttribute("name", "D");

                        if (el.querySelectorAll("[name=d]").length) {
                            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                        }


                        if (el.querySelectorAll(":enabled").length !== 2) {
                            rbuggyQSA.push(":enabled", ":disabled");
                        }


                        docElem.appendChild(el).disabled = true;

                        if (el.querySelectorAll(":disabled").length !== 2) {
                            rbuggyQSA.push(":enabled", ":disabled");
                        }


                        el.querySelectorAll("*,:x");
                        rbuggyQSA.push(",.*:");
                    });
                }

                if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                    assert(function (el) {
                        support.disconnectedMatch = matches.call(el, "*");

                        matches.call(el, "[s!='']:x");
                        rbuggyMatches.push("!=", pseudos);
                    });
                }

                rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
                rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

                hasCompare = rnative.test(docElem.compareDocumentPosition);

                contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
                    var adown = a.nodeType === 9 ? a.documentElement : a,
                        bup = b && b.parentNode;
                    return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
                } : function (a, b) {
                    if (b) {
                        while (b = b.parentNode) {
                            if (b === a) {
                                return true;
                            }
                        }
                    }

                    return false;
                };

                sortOrder = hasCompare ? function (a, b) {
                    if (a === b) {
                        hasDuplicate = true;
                        return 0;
                    }


                    var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

                    if (compare) {
                        return compare;
                    }


                    compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :
                        1;

                    if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                        if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                            return -1;
                        }

                        if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                            return 1;
                        }


                        return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                    }

                    return compare & 4 ? -1 : 1;
                } : function (a, b) {
                    if (a === b) {
                        hasDuplicate = true;
                        return 0;
                    }

                    var cur,
                        i = 0,
                        aup = a.parentNode,
                        bup = b.parentNode,
                        ap = [a],
                        bp = [b];

                    if (!aup || !bup) {
                        return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                    } else if (aup === bup) {
                        return siblingCheck(a, b);
                    }


                    cur = a;

                    while (cur = cur.parentNode) {
                        ap.unshift(cur);
                    }

                    cur = b;

                    while (cur = cur.parentNode) {
                        bp.unshift(cur);
                    }


                    while (ap[i] === bp[i]) {
                        i++;
                    }

                    return i ?
                        siblingCheck(ap[i], bp[i]) :
                        ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
                };
                return document;
            };

            Sizzle.matches = function (expr, elements) {
                return Sizzle(expr, null, null, elements);
            };

            Sizzle.matchesSelector = function (elem, expr) {
                if ((elem.ownerDocument || elem) !== document) {
                    setDocument(elem);
                }


                expr = expr.replace(rattributeQuotes, "='$1']");

                if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                    try {
                        var ret = matches.call(elem, expr);

                        if (ret || support.disconnectedMatch ||
                            elem.document && elem.document.nodeType !== 11) {
                            return ret;
                        }
                    } catch (e) { }
                }

                return Sizzle(expr, document, null, [elem]).length > 0;
            };

            Sizzle.contains = function (context, elem) {
                if ((context.ownerDocument || context) !== document) {
                    setDocument(context);
                }

                return contains(context, elem);
            };

            Sizzle.attr = function (elem, name) {
                if ((elem.ownerDocument || elem) !== document) {
                    setDocument(elem);
                }

                var fn = Expr.attrHandle[name.toLowerCase()],
                    val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
                return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            };

            Sizzle.escape = function (sel) {
                return (sel + "").replace(rcssescape, fcssescape);
            };

            Sizzle.error = function (msg) {
                throw new Error("Syntax error, unrecognized expression: " + msg);
            };


            Sizzle.uniqueSort = function (results) {
                var elem,
                    duplicates = [],
                    j = 0,
                    i = 0;

                hasDuplicate = !support.detectDuplicates;
                sortInput = !support.sortStable && results.slice(0);
                results.sort(sortOrder);

                if (hasDuplicate) {
                    while (elem = results[i++]) {
                        if (elem === results[i]) {
                            j = duplicates.push(i);
                        }
                    }

                    while (j--) {
                        results.splice(duplicates[j], 1);
                    }
                }


                sortInput = null;
                return results;
            };


            getText = Sizzle.getText = function (elem) {
                var node,
                    ret = "",
                    i = 0,
                    nodeType = elem.nodeType;

                if (!nodeType) {
                    while (node = elem[i++]) {
                        ret += getText(node);
                    }
                } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                    if (typeof elem.textContent === "string") {
                        return elem.textContent;
                    } else {
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            ret += getText(elem);
                        }
                    }
                } else if (nodeType === 3 || nodeType === 4) {
                    return elem.nodeValue;
                }


                return ret;
            };

            Expr = Sizzle.selectors = {
                cacheLength: 50,
                createPseudo: markFunction,
                match: matchExpr,
                attrHandle: {},
                find: {},
                relative: {
                    ">": {
                        dir: "parentNode",
                        first: true
                    },
                    " ": {
                        dir: "parentNode"
                    },
                    "+": {
                        dir: "previousSibling",
                        first: true
                    },
                    "~": {
                        dir: "previousSibling"
                    }
                },
                preFilter: {
                    "ATTR": function ATTR(match) {
                        match[1] = match[1].replace(runescape, funescape);

                        match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

                        if (match[2] === "~=") {
                            match[3] = " " + match[3] + " ";
                        }

                        return match.slice(0, 4);
                    },
                    "CHILD": function CHILD(match) {
                        match[1] = match[1].toLowerCase();

                        if (match[1].slice(0, 3) === "nth") {
                            if (!match[3]) {
                                Sizzle.error(match[0]);
                            }


                            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                            match[5] = +(match[7] + match[8] || match[3] === "odd");
                        } else if (match[3]) {
                            Sizzle.error(match[0]);
                        }

                        return match;
                    },
                    "PSEUDO": function PSEUDO(match) {
                        var excess,
                            unquoted = !match[6] && match[2];

                        if (matchExpr["CHILD"].test(match[0])) {
                            return null;
                        }


                        if (match[3]) {
                            match[2] = match[4] || match[5] || "";
                        } else if (unquoted && rpseudo.test(unquoted) && (
                            excess = tokenize(unquoted, true)) && (
                                excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                            match[0] = match[0].slice(0, excess);
                            match[2] = unquoted.slice(0, excess);
                        }


                        return match.slice(0, 3);
                    }
                },
                filter: {
                    "TAG": function TAG(nodeNameSelector) {
                        var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                        return nodeNameSelector === "*" ? function () {
                            return true;
                        } : function (elem) {
                            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                        };
                    },
                    "CLASS": function CLASS(className) {
                        var pattern = classCache[className + " "];
                        return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
                            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                        });
                    },
                    "ATTR": function ATTR(name, operator, check) {
                        return function (elem) {
                            var result = Sizzle.attr(elem, name);

                            if (result == null) {
                                return operator === "!=";
                            }

                            if (!operator) {
                                return true;
                            }

                            result += "";
                            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                        };
                    },
                    "CHILD": function CHILD(type, what, argument, first, last) {
                        var simple = type.slice(0, 3) !== "nth",
                            forward = type.slice(-4) !== "last",
                            ofType = what === "of-type";
                        return first === 1 && last === 0 ?
                            function (elem) {
                                return !!elem.parentNode;
                            } : function (elem, context, xml) {
                                var cache,
                                    uniqueCache,
                                    outerCache,
                                    node,
                                    nodeIndex,
                                    start,
                                    dir = simple !== forward ? "nextSibling" : "previousSibling",
                                    parent = elem.parentNode,
                                    name = ofType && elem.nodeName.toLowerCase(),
                                    useCache = !xml && !ofType,
                                    diff = false;

                                if (parent) {
                                    if (simple) {
                                        while (dir) {
                                            node = elem;

                                            while (node = node[dir]) {
                                                if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                                    return false;
                                                }
                                            }


                                            start = dir = type === "only" && !start && "nextSibling";
                                        }

                                        return true;
                                    }

                                    start = [forward ? parent.firstChild : parent.lastChild];

                                    if (forward && useCache) {
                                        node = parent;
                                        outerCache = node[expando] || (node[expando] = {});

                                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                        cache = uniqueCache[type] || [];
                                        nodeIndex = cache[0] === dirruns && cache[1];
                                        diff = nodeIndex && cache[2];
                                        node = nodeIndex && parent.childNodes[nodeIndex];

                                        while (node = ++nodeIndex && node && node[dir] || (
                                            diff = nodeIndex = 0) || start.pop()) {
                                            if (node.nodeType === 1 && ++diff && node === elem) {
                                                uniqueCache[type] = [dirruns, nodeIndex, diff];
                                                break;
                                            }
                                        }
                                    } else {
                                        if (useCache) {
                                            node = elem;
                                            outerCache = node[expando] || (node[expando] = {});

                                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                            cache = uniqueCache[type] || [];
                                            nodeIndex = cache[0] === dirruns && cache[1];
                                            diff = nodeIndex;
                                        }


                                        if (diff === false) {
                                            while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                                if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                                    if (useCache) {
                                                        outerCache = node[expando] || (node[expando] = {});

                                                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                                        uniqueCache[type] = [dirruns, diff];
                                                    }

                                                    if (node === elem) {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }


                                    diff -= last;
                                    return diff === first || diff % first === 0 && diff / first >= 0;
                                }
                            };
                    },
                    "PSEUDO": function PSEUDO(pseudo, argument) {
                        var args,
                            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

                        if (fn[expando]) {
                            return fn(argument);
                        }


                        if (fn.length > 1) {
                            args = [pseudo, pseudo, "", argument];
                            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                                var idx,
                                    matched = fn(seed, argument),
                                    i = matched.length;

                                while (i--) {
                                    idx = indexOf(seed, matched[i]);
                                    seed[idx] = !(matches[idx] = matched[i]);
                                }
                            }) : function (elem) {
                                return fn(elem, 0, args);
                            };
                        }

                        return fn;
                    }
                },
                pseudos: {
                    "not": markFunction(function (selector) {
                        var input = [],
                            results = [],
                            matcher = compile(selector.replace(rtrim, "$1"));
                        return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                            var elem,
                                unmatched = matcher(seed, null, xml, []),
                                i = seed.length;

                            while (i--) {
                                if (elem = unmatched[i]) {
                                    seed[i] = !(matches[i] = elem);
                                }
                            }
                        }) : function (elem, context, xml) {
                            input[0] = elem;
                            matcher(input, null, xml, results);

                            input[0] = null;
                            return !results.pop();
                        };
                    }),
                    "has": markFunction(function (selector) {
                        return function (elem) {
                            return Sizzle(selector, elem).length > 0;
                        };
                    }),
                    "contains": markFunction(function (text) {
                        text = text.replace(runescape, funescape);
                        return function (elem) {
                            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                        };
                    }),
                    "lang": markFunction(function (lang) {
                        if (!ridentifier.test(lang || "")) {
                            Sizzle.error("unsupported lang: " + lang);
                        }

                        lang = lang.replace(runescape, funescape).toLowerCase();
                        return function (elem) {
                            var elemLang;

                            do {
                                if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                    elemLang = elemLang.toLowerCase();
                                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                                }
                            } while ((elem = elem.parentNode) && elem.nodeType === 1);

                            return false;
                        };
                    }),
                    "target": function target(elem) {
                        var hash = window.location && window.location.hash;
                        return hash && hash.slice(1) === elem.id;
                    },
                    "root": function root(elem) {
                        return elem === docElem;
                    },
                    "focus": function focus(elem) {
                        return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                    },
                    "enabled": createDisabledPseudo(false),
                    "disabled": createDisabledPseudo(true),
                    "checked": function checked(elem) {
                        var nodeName = elem.nodeName.toLowerCase();
                        return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
                    },
                    "selected": function selected(elem) {
                        if (elem.parentNode) {
                            elem.parentNode.selectedIndex;
                        }

                        return elem.selected === true;
                    },
                    "empty": function empty(elem) {
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            if (elem.nodeType < 6) {
                                return false;
                            }
                        }

                        return true;
                    },
                    "parent": function parent(elem) {
                        return !Expr.pseudos["empty"](elem);
                    },
                    "header": function header(elem) {
                        return rheader.test(elem.nodeName);
                    },
                    "input": function input(elem) {
                        return rinputs.test(elem.nodeName);
                    },
                    "button": function button(elem) {
                        var name = elem.nodeName.toLowerCase();
                        return name === "input" && elem.type === "button" || name === "button";
                    },
                    "text": function text(elem) {
                        var attr;
                        return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (
                            (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                    },
                    "first": createPositionalPseudo(function () {
                        return [0];
                    }),
                    "last": createPositionalPseudo(function (matchIndexes, length) {
                        return [length - 1];
                    }),
                    "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
                        return [argument < 0 ? argument + length : argument];
                    }),
                    "even": createPositionalPseudo(function (matchIndexes, length) {
                        var i = 0;

                        for (; i < length; i += 2) {
                            matchIndexes.push(i);
                        }

                        return matchIndexes;
                    }),
                    "odd": createPositionalPseudo(function (matchIndexes, length) {
                        var i = 1;

                        for (; i < length; i += 2) {
                            matchIndexes.push(i);
                        }

                        return matchIndexes;
                    }),
                    "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument;

                        for (; --i >= 0;) {
                            matchIndexes.push(i);
                        }

                        return matchIndexes;
                    }),
                    "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument;

                        for (; ++i < length;) {
                            matchIndexes.push(i);
                        }

                        return matchIndexes;
                    })
                }
            };
            Expr.pseudos["nth"] = Expr.pseudos["eq"];

            for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true
            }) {
                Expr.pseudos[i] = createInputPseudo(i);
            }

            for (i in {
                submit: true,
                reset: true
            }) {
                Expr.pseudos[i] = createButtonPseudo(i);
            }


            function setFilters() { }

            setFilters.prototype = Expr.filters = Expr.pseudos;
            Expr.setFilters = new setFilters();

            tokenize = Sizzle.tokenize = function (selector, parseOnly) {
                var matched,
                    match,
                    tokens,
                    type,
                    soFar,
                    groups,
                    preFilters,
                    cached = tokenCache[selector + " "];

                if (cached) {
                    return parseOnly ? 0 : cached.slice(0);
                }

                soFar = selector;
                groups = [];
                preFilters = Expr.preFilter;

                while (soFar) {
                    if (!matched || (match = rcomma.exec(soFar))) {
                        if (match) {
                            soFar = soFar.slice(match[0].length) || soFar;
                        }

                        groups.push(tokens = []);
                    }

                    matched = false;

                    if (match = rcombinators.exec(soFar)) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: match[0].replace(rtrim, " ")
                        });
                        soFar = soFar.slice(matched.length);
                    }


                    for (type in Expr.filter) {
                        if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                            matched = match.shift();
                            tokens.push({
                                value: matched,
                                type: type,
                                matches: match
                            });
                            soFar = soFar.slice(matched.length);
                        }
                    }

                    if (!matched) {
                        break;
                    }
                }


                return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
                    tokenCache(selector, groups).slice(0);
            };

            function toSelector(tokens) {
                var i = 0,
                    len = tokens.length,
                    selector = "";

                for (; i < len; i++) {
                    selector += tokens[i].value;
                }

                return selector;
            }

            function addCombinator(matcher, combinator, base) {
                var dir = combinator.dir,
                    skip = combinator.next,
                    key = skip || dir,
                    checkNonElements = base && key === "parentNode",
                    doneName = done++;
                return combinator.first ?
                    function (elem, context, xml) {
                        while (elem = elem[dir]) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                return matcher(elem, context, xml);
                            }
                        }

                        return false;
                    } :
                    function (elem, context, xml) {
                        var oldCache,
                            uniqueCache,
                            outerCache,
                            newCache = [dirruns, doneName];

                        if (xml) {
                            while (elem = elem[dir]) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    if (matcher(elem, context, xml)) {
                                        return true;
                                    }
                                }
                            }
                        } else {
                            while (elem = elem[dir]) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    outerCache = elem[expando] || (elem[expando] = {});

                                    uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

                                    if (skip && skip === elem.nodeName.toLowerCase()) {
                                        elem = elem[dir] || elem;
                                    } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                        return newCache[2] = oldCache[2];
                                    } else {
                                        uniqueCache[key] = newCache;

                                        if (newCache[2] = matcher(elem, context, xml)) {
                                            return true;
                                        }
                                    }
                                }
                            }
                        }

                        return false;
                    };
            }

            function elementMatcher(matchers) {
                return matchers.length > 1 ? function (elem, context, xml) {
                    var i = matchers.length;

                    while (i--) {
                        if (!matchers[i](elem, context, xml)) {
                            return false;
                        }
                    }

                    return true;
                } : matchers[0];
            }

            function multipleContexts(selector, contexts, results) {
                var i = 0,
                    len = contexts.length;

                for (; i < len; i++) {
                    Sizzle(selector, contexts[i], results);
                }

                return results;
            }

            function condense(unmatched, map, filter, context, xml) {
                var elem,
                    newUnmatched = [],
                    i = 0,
                    len = unmatched.length,
                    mapped = map != null;

                for (; i < len; i++) {
                    if (elem = unmatched[i]) {
                        if (!filter || filter(elem, context, xml)) {
                            newUnmatched.push(elem);

                            if (mapped) {
                                map.push(i);
                            }
                        }
                    }
                }

                return newUnmatched;
            }

            function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                if (postFilter && !postFilter[expando]) {
                    postFilter = setMatcher(postFilter);
                }

                if (postFinder && !postFinder[expando]) {
                    postFinder = setMatcher(postFinder, postSelector);
                }

                return markFunction(function (seed, results, context, xml) {
                    var temp,
                        i,
                        elem,
                        preMap = [],
                        postMap = [],
                        preexisting = results.length,
                        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
                        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
                        matcherOut = matcher ?
                            postFinder || (seed ? preFilter : preexisting || postFilter) ?
                                [] :
                                results : matcherIn;

                    if (matcher) {
                        matcher(matcherIn, matcherOut, context, xml);
                    }


                    if (postFilter) {
                        temp = condense(matcherOut, postMap);
                        postFilter(temp, [], context, xml);

                        i = temp.length;

                        while (i--) {
                            if (elem = temp[i]) {
                                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                            }
                        }
                    }

                    if (seed) {
                        if (postFinder || preFilter) {
                            if (postFinder) {
                                temp = [];
                                i = matcherOut.length;

                                while (i--) {
                                    if (elem = matcherOut[i]) {
                                        temp.push(matcherIn[i] = elem);
                                    }
                                }

                                postFinder(null, matcherOut = [], temp, xml);
                            }


                            i = matcherOut.length;

                            while (i--) {
                                if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                                    seed[temp] = !(results[temp] = elem);
                                }
                            }
                        }

                    } else {
                        matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

                        if (postFinder) {
                            postFinder(null, results, matcherOut, xml);
                        } else {
                            push.apply(results, matcherOut);
                        }
                    }
                });
            }

            function matcherFromTokens(tokens) {
                var checkContext,
                    matcher,
                    j,
                    len = tokens.length,
                    leadingRelative = Expr.relative[tokens[0].type],
                    implicitRelative = leadingRelative || Expr.relative[" "],
                    i = leadingRelative ? 1 : 0,
                    matchContext = addCombinator(function (elem) {
                        return elem === checkContext;
                    }, implicitRelative, true),
                    matchAnyContext = addCombinator(function (elem) {
                        return indexOf(checkContext, elem) > -1;
                    }, implicitRelative, true),
                    matchers = [function (elem, context, xml) {
                        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));

                        checkContext = null;
                        return ret;
                    }];

                for (; i < len; i++) {
                    if (matcher = Expr.relative[tokens[i].type]) {
                        matchers = [addCombinator(elementMatcher(matchers), matcher)];
                    } else {
                        matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

                        if (matcher[expando]) {
                            j = ++i;

                            for (; j < len; j++) {
                                if (Expr.relative[tokens[j].type]) {
                                    break;
                                }
                            }

                            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
                                tokens.slice(0, i - 1).concat({
                                    value: tokens[i - 2].type === " " ? "*" : ""
                                })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                        }

                        matchers.push(matcher);
                    }
                }

                return elementMatcher(matchers);
            }

            function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                var bySet = setMatchers.length > 0,
                    byElement = elementMatchers.length > 0,
                    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
                        var elem,
                            j,
                            matcher,
                            matchedCount = 0,
                            i = "0",
                            unmatched = seed && [],
                            setMatched = [],
                            contextBackup = outermostContext,
                            elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                            dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
                            len = elems.length;

                        if (outermost) {
                            outermostContext = context === document || context || outermost;
                        }


                        for (; i !== len && (elem = elems[i]) != null; i++) {
                            if (byElement && elem) {
                                j = 0;

                                if (!context && elem.ownerDocument !== document) {
                                    setDocument(elem);
                                    xml = !documentIsHTML;
                                }

                                while (matcher = elementMatchers[j++]) {
                                    if (matcher(elem, context || document, xml)) {
                                        results.push(elem);
                                        break;
                                    }
                                }

                                if (outermost) {
                                    dirruns = dirrunsUnique;
                                }
                            }


                            if (bySet) {
                                if (elem = !matcher && elem) {
                                    matchedCount--;
                                }


                                if (seed) {
                                    unmatched.push(elem);
                                }
                            }
                        }


                        matchedCount += i;

                        if (bySet && i !== matchedCount) {
                            j = 0;

                            while (matcher = setMatchers[j++]) {
                                matcher(unmatched, setMatched, context, xml);
                            }

                            if (seed) {
                                if (matchedCount > 0) {
                                    while (i--) {
                                        if (!(unmatched[i] || setMatched[i])) {
                                            setMatched[i] = pop.call(results);
                                        }
                                    }
                                }


                                setMatched = condense(setMatched);
                            }


                            push.apply(results, setMatched);

                            if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                                Sizzle.uniqueSort(results);
                            }
                        }


                        if (outermost) {
                            dirruns = dirrunsUnique;
                            outermostContext = contextBackup;
                        }

                        return unmatched;
                    };

                return bySet ? markFunction(superMatcher) : superMatcher;
            }

            compile = Sizzle.compile = function (selector, match
            ) {
                var i,
                    setMatchers = [],
                    elementMatchers = [],
                    cached = compilerCache[selector + " "];

                if (!cached) {
                    if (!match) {
                        match = tokenize(selector);
                    }

                    i = match.length;

                    while (i--) {
                        cached = matcherFromTokens(match[i]);

                        if (cached[expando]) {
                            setMatchers.push(cached);
                        } else {
                            elementMatchers.push(cached);
                        }
                    }


                    cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

                    cached.selector = selector;
                }

                return cached;
            };


            select = Sizzle.select = function (selector, context, results, seed) {
                var i,
                    tokens,
                    token,
                    type,
                    find,
                    compiled = typeof selector === "function" && selector,
                    match = !seed && tokenize(selector = compiled.selector || selector);
                results = results || [];

                if (match.length === 1) {
                    tokens = match[0] = match[0].slice(0);

                    if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

                        if (!context) {
                            return results;
                        } else if (compiled) {
                            context = context.parentNode;
                        }

                        selector = selector.slice(tokens.shift().value.length);
                    }


                    i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

                    while (i--) {
                        token = tokens[i];

                        if (Expr.relative[type = token.type]) {
                            break;
                        }

                        if (find = Expr.find[type]) {
                            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                                tokens.splice(i, 1);
                                selector = seed.length && toSelector(tokens);

                                if (!selector) {
                                    push.apply(results, seed);
                                    return results;
                                }

                                break;
                            }
                        }
                    }
                }


                (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
                return results;
            };


            support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

            support.detectDuplicates = !!hasDuplicate;

            setDocument();

            support.sortDetached = assert(function (el) {
                return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
            });

            if (!assert(function (el) {
                el.innerHTML = "<a href='#'></a>";
                return el.firstChild.getAttribute("href") === "#";
            })) {
                addHandle("type|href|height|width", function (elem, name, isXML) {
                    if (!isXML) {
                        return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                    }
                });
            }


            if (!support.attributes || !assert(function (el) {
                el.innerHTML = "<input/>";
                el.firstChild.setAttribute("value", "");
                return el.firstChild.getAttribute("value") === "";
            })) {
                addHandle("value", function (elem, name, isXML) {
                    if (!isXML && elem.nodeName.toLowerCase() === "input") {
                        return elem.defaultValue;
                    }
                });
            }


            if (!assert(function (el) {
                return el.getAttribute("disabled") == null;
            })) {
                addHandle(booleans, function (elem, name, isXML) {
                    var val;

                    if (!isXML) {
                        return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                    }
                });
            }

            return Sizzle;
        }(window);

    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;

    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    jQuery.escapeSelector = Sizzle.escape;

    var dir = function dir(elem, _dir, until) {
        var matched = [],
            truncate = until !== undefined;

        while ((elem = elem[_dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                    break;
                }

                matched.push(elem);
            }
        }

        return matched;
    };

    var _siblings = function siblings(n, elem) {
        var matched = [];

        for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
            }
        }

        return matched;
    };

    var rneedsContext = jQuery.expr.match.needsContext;

    function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    }

    ;
    var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

    function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }


        if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem) {
                return elem === qualifier !== not;
            });
        }


        if (typeof qualifier !== "string") {
            return jQuery.grep(elements, function (elem) {
                return indexOf.call(qualifier, elem) > -1 !== not;
            });
        }


        return jQuery.filter(qualifier, elements, not);
    }

    jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];

        if (not) {
            expr = ":not(" + expr + ")";
        }

        if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
        }

        return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
            return elem.nodeType === 1;
        }));
    };

    jQuery.fn.extend({
        find: function find(selector) {
            var i,
                ret,
                len = this.length,
                self = this;

            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function () {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }

            ret = this.pushStack([]);

            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }

            return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function filter(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function not(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function is(selector) {
            return !!winnow(this,
                typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });

    var rootjQuery,
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
        init = jQuery.fn.init = function (selector, context, root) {
            var match, elem;

            if (!selector) {
                return this;
            }


            root = root || rootjQuery;

            if (typeof selector === "string") {
                if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
                    match = [null, selector, null];
                } else {
                    match = rquickExpr.exec(selector);
                }


                if (match && (match[1] || !context)) {
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;

                        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {
                                if (isFunction(this[match])) {
                                    this[match](context[match]);
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }

                        return this;
                    } else {
                        elem = document.getElementById(match[2]);

                        if (elem) {
                            this[0] = elem;
                            this.length = 1;
                        }

                        return this;
                    }

                } else if (!context || context.jquery) {
                    return (context || root).find(selector);
                } else {
                    return this.constructor(context).find(selector);
                }

            } else if (selector.nodeType) {
                this[0] = selector;
                this.length = 1;
                return this;
            } else if (isFunction(selector)) {
                return root.ready !== undefined ? root.ready(selector) :
                    selector(jQuery);
            }

            return jQuery.makeArray(selector, this);
        };


    init.prototype = jQuery.fn;

    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/,
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    jQuery.fn.extend({
        has: function has(target) {
            var targets = jQuery(target, this),
                l = targets.length;
            return this.filter(function () {
                var i = 0;

                for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        closest: function closest(selectors, context) {
            var cur,
                i = 0,
                l = this.length,
                matched = [],
                targets = typeof selectors !== "string" && jQuery(selectors);

            if (!rneedsContext.test(selectors)) {
                for (; i < l; i++) {
                    for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                        if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :
                            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                            matched.push(cur);
                            break;
                        }
                    }
                }
            }

            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        index: function index(elem) {
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }


            if (typeof elem === "string") {
                return indexOf.call(jQuery(elem), this[0]);
            }


            return indexOf.call(this,
                elem.jquery ? elem[0] : elem);
        },
        add: function add(selector, context) {
            return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function addBack(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });

    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) { }

        return cur;
    }

    jQuery.each({
        parent: function parent(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function parents(elem) {
            return dir(elem, "parentNode");
        },
        parentsUntil: function parentsUntil(elem, i, until) {
            return dir(elem, "parentNode", until);
        },
        next: function next(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function prev(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function nextAll(elem) {
            return dir(elem, "nextSibling");
        },
        prevAll: function prevAll(elem) {
            return dir(elem, "previousSibling");
        },
        nextUntil: function nextUntil(elem, i, until) {
            return dir(elem, "nextSibling", until);
        },
        prevUntil: function prevUntil(elem, i, until) {
            return dir(elem, "previousSibling", until);
        },
        siblings: function siblings(elem) {
            return _siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function children(elem) {
            return _siblings(elem.firstChild);
        },
        contents: function contents(elem) {
            if (nodeName(elem, "iframe")) {
                return elem.contentDocument;
            }


            if (nodeName(elem, "template")) {
                elem = elem.content || elem;
            }

            return jQuery.merge([], elem.childNodes);
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var matched = jQuery.map(this, fn, until);

            if (name.slice(-5) !== "Until") {
                selector = until;
            }

            if (selector && typeof selector === "string") {
                matched = jQuery.filter(selector, matched);
            }

            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    jQuery.uniqueSort(matched);
                }


                if (rparentsprev.test(name)) {
                    matched.reverse();
                }
            }

            return this.pushStack(matched);
        };
    });
    var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

    function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
            object[flag] = true;
        });
        return object;
    }


    jQuery.Callbacks = function (options) {
        options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

        var
            firing,
            memory,
            _fired,
            _locked,
            list = [],
            queue = [],
            firingIndex = -1,
            fire = function fire() {
                _locked = _locked || options.once;

                _fired = firing = true;

                for (; queue.length; firingIndex = -1) {
                    memory = queue.shift();

                    while (++firingIndex < list.length) {
                        if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                            firingIndex = list.length;
                            memory = false;
                        }
                    }
                }


                if (!options.memory) {
                    memory = false;
                }

                firing = false;

                if (_locked) {
                    if (memory) {
                        list = [];
                    } else {
                        list = "";
                    }
                }
            },
            self = {
                add: function add() {
                    if (list) {
                        if (memory && !firing) {
                            firingIndex = list.length - 1;
                            queue.push(memory);
                        }

                        (function add(args) {
                            jQuery.each(args, function (_, arg) {
                                if (isFunction(arg)) {
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && toType(arg) !== "string") {
                                    add(arg);
                                }
                            });
                        })(arguments);

                        if (memory && !firing) {
                            fire();
                        }
                    }

                    return this;
                },
                remove: function remove() {
                    jQuery.each(arguments, function (_, arg) {
                        var index;

                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);

                            if (index <= firingIndex) {
                                firingIndex--;
                            }
                        }
                    });
                    return this;
                },
                has: function has(fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
                },
                empty: function empty() {
                    if (list) {
                        list = [];
                    }

                    return this;
                },
                disable: function disable() {
                    _locked = queue = [];
                    list = memory = "";
                    return this;
                },
                disabled: function disabled() {
                    return !list;
                },
                lock: function lock() {
                    _locked = queue = [];

                    if (!memory && !firing) {
                        list = memory = "";
                    }

                    return this;
                },
                locked: function locked() {
                    return !!_locked;
                },
                fireWith: function fireWith(context, args) {
                    if (!_locked) {
                        args = args || [];
                        args = [context, args.slice ? args.slice() : args];
                        queue.push(args);

                        if (!firing) {
                            fire();
                        }
                    }

                    return this;
                },
                fire: function fire() {
                    self.fireWith(this, arguments);
                    return this;
                },
                fired: function fired() {
                    return !!_fired;
                }
            };

        return self;
    };

    function Identity(v) {
        return v;
    }

    function Thrower(ex) {
        throw ex;
    }

    function adoptValue(value, resolve, reject, noValue) {
        var method;

        try {
            if (value && isFunction(method = value.promise)) {
                method.call(value).done(resolve).fail(reject);
            } else if (value && isFunction(method = value.then)) {
                method.call(value, resolve, reject);
            } else {
                resolve.apply(undefined, [value].slice(noValue));
            }

        } catch (value) {
            reject.apply(undefined, [value]);
        }
    }

    jQuery.extend({
        Deferred: function Deferred(func) {
            var tuples = [
                ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
                _state = "pending",
                _promise = {
                    state: function state() {
                        return _state;
                    },
                    always: function always() {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    "catch": function _catch(fn) {
                        return _promise.then(null, fn);
                    },
                    pipe: function pipe() {
                        var fns = arguments;
                        return jQuery.Deferred(function (newDefer) {
                            jQuery.each(tuples, function (i, tuple) {
                                var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                                deferred[tuple[1]](function () {
                                    var returned = fn && fn.apply(this, arguments);

                                    if (returned && isFunction(returned.promise)) {
                                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                                    } else {
                                        newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    then: function then(onFulfilled, onRejected, onProgress) {
                        var maxDepth = 0;

                        function resolve(depth, deferred, handler, special) {
                            return function () {
                                var that = this,
                                    args = arguments,
                                    mightThrow = function mightThrow() {
                                        var returned, then;

                                        if (depth < maxDepth) {
                                            return;
                                        }

                                        returned = handler.apply(that, args);

                                        if (returned === deferred.promise()) {
                                            throw new TypeError("Thenable self-resolution");
                                        }


                                        then = returned && (
                                            _typeof(returned) === "object" || typeof returned === "function") && returned.then;

                                        if (isFunction(then)) {
                                            if (special) {
                                                then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));
                                            } else {
                                                maxDepth++;
                                                then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                                            }

                                        } else {
                                            if (handler !== Identity) {
                                                that = undefined;
                                                args = [returned];
                                            }


                                            (special || deferred.resolveWith)(that, args);
                                        }
                                    },
                                    process = special ? mightThrow : function () {
                                        try {
                                            mightThrow();
                                        } catch (e) {
                                            if (jQuery.Deferred.exceptionHook) {
                                                jQuery.Deferred.exceptionHook(e, process.stackTrace);
                                            }


                                            if (depth + 1 >= maxDepth) {
                                                if (handler !== Thrower) {
                                                    that = undefined;
                                                    args = [e];
                                                }

                                                deferred.rejectWith(that, args);
                                            }
                                        }
                                    };


                                if (depth) {
                                    process();
                                } else {
                                    if (jQuery.Deferred.getStackHook) {
                                        process.stackTrace = jQuery.Deferred.getStackHook();
                                    }

                                    window.setTimeout(process);
                                }
                            };
                        }

                        return jQuery.Deferred(function (newDefer) {
                            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

                            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));

                            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
                        }).promise();
                    },
                    promise: function promise(obj) {
                        return obj != null ? jQuery.extend(obj, _promise) : _promise;
                    }
                },
                deferred = {};

            jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2],
                    stateString = tuple[5];

                _promise[tuple[1]] = list.add;

                if (stateString) {
                    list.add(function () {
                        _state = stateString;
                    },
                        tuples[3 - i][2].disable,
                        tuples[3 - i][3].disable,
                        tuples[0][2].lock,
                        tuples[0][3].lock);
                }


                list.add(tuple[3].fire);

                deferred[tuple[0]] = function () {
                    deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
                    return this;
                };


                deferred[tuple[0] + "With"] = list.fireWith;
            });

            _promise.promise(deferred);


            if (func) {
                func.call(deferred, deferred);
            }


            return deferred;
        },
        when: function when(singleValue) {
            var
                remaining = arguments.length,
                i = remaining,
                resolveContexts = Array(i),
                resolveValues = _slice.call(arguments),
                master = jQuery.Deferred(),
                updateFunc = function updateFunc(i) {
                    return function (value) {
                        resolveContexts[i] = this;
                        resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;

                        if (! --remaining) {
                            master.resolveWith(resolveContexts, resolveValues);
                        }
                    };
                };


            if (remaining <= 1) {
                adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);

                if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
                    return master.then();
                }
            }


            while (i--) {
                adoptValue(resolveValues[i], updateFunc(i), master.reject);
            }

            return master.promise();
        }
    });

    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

    jQuery.Deferred.exceptionHook = function (error, stack) {
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
            void 0;
        }
    };

    jQuery.readyException = function (error) {
        window.setTimeout(function () {
            throw error;
        });
    };


    var readyList = jQuery.Deferred();

    jQuery.fn.ready = function (fn) {
        readyList.then(fn)
            .catch(function (error) {
                jQuery.readyException(error);
            });
        return this;
    };

    jQuery.extend({
        isReady: false,
        readyWait: 1,
        ready: function ready(wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }


            jQuery.isReady = true;

            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }


            readyList.resolveWith(document, [jQuery]);
        }
    });
    jQuery.ready.then = readyList.then;

    function completed() {
        document.removeEventListener("DOMContentLoaded", completed);
        window.removeEventListener("load", completed);
        jQuery.ready();
    }


    if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
        window.setTimeout(jQuery.ready);
    } else {
        document.addEventListener("DOMContentLoaded", completed);

        window.addEventListener("load", completed);
    }


    var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0,
            len = elems.length,
            bulk = key == null;

        if (toType(key) === "object") {
            chainable = true;

            for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
            }

        } else if (value !== undefined) {
            chainable = true;

            if (!isFunction(value)) {
                raw = true;
            }

            if (bulk) {
                if (raw) {
                    fn.call(elems, value);
                    fn = null;
                } else {
                    bulk = fn;

                    fn = function fn(elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }

            if (fn) {
                for (; i < len; i++) {
                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
            }
        }

        if (chainable) {
            return elems;
        }


        if (bulk) {
            return fn.call(elems);
        }

        return len ? fn(elems[0], key) : emptyGet;
    };


    var rmsPrefix = /^-ms-/,
        rdashAlpha = /-([a-z])/g;

    function fcamelCase(all, letter) {
        return letter.toUpperCase();
    }


    function camelCase(string) {
        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
    }

    var acceptData = function acceptData(owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
    };

    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }

    Data.uid = 1;
    Data.prototype = {
        cache: function cache(owner) {
            var value = owner[this.expando];

            if (!value) {
                value = {};

                if (acceptData(owner)) {
                    if (owner.nodeType) {
                        owner[this.expando] = value;
                    } else {
                        Object.defineProperty(owner, this.expando, {
                            value: value,
                            configurable: true
                        });
                    }
                }
            }

            return value;
        },
        set: function set(owner, data, value) {
            var prop,
                cache = this.cache(owner);

            if (typeof data === "string") {
                cache[camelCase(data)] = value;
            } else {
                for (prop in data) {
                    cache[camelCase(prop)] = data[prop];
                }
            }

            return cache;
        },
        get: function get(owner, key) {
            return key === undefined ? this.cache(owner) :
                owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function access(owner, key, value) {
            if (key === undefined || key && typeof key === "string" && value === undefined) {
                return this.get(owner, key);
            }


            this.set(owner, key, value);

            return value !== undefined ? value : key;
        },
        remove: function remove(owner, key) {
            var i,
                cache = owner[this.expando];

            if (cache === undefined) {
                return;
            }

            if (key !== undefined) {
                if (Array.isArray(key)) {
                    key = key.map(camelCase);
                } else {
                    key = camelCase(key);

                    key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
                }

                i = key.length;

                while (i--) {
                    delete cache[key[i]];
                }
            }


            if (key === undefined || jQuery.isEmptyObject(cache)) {
                if (owner.nodeType) {
                    owner[this.expando] = undefined;
                } else {
                    delete owner[this.expando];
                }
            }
        },
        hasData: function hasData(owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
    };
    var dataPriv = new Data();
    var dataUser = new Data();

    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        rmultiDash = /[A-Z]/g;

    function getData(data) {
        if (data === "true") {
            return true;
        }

        if (data === "false") {
            return false;
        }

        if (data === "null") {
            return null;
        }


        if (data === +data + "") {
            return +data;
        }

        if (rbrace.test(data)) {
            return JSON.parse(data);
        }

        return data;
    }

    function dataAttr(elem, key, data) {
        var name;

        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);

            if (typeof data === "string") {
                try {
                    data = getData(data);
                } catch (e) { }


                dataUser.set(elem, key, data);
            } else {
                data = undefined;
            }
        }

        return data;
    }

    jQuery.extend({
        hasData: function hasData(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function data(elem, name, _data) {
            return dataUser.access(elem, name, _data);
        },
        removeData: function removeData(elem, name) {
            dataUser.remove(elem, name);
        },
        _data: function _data(elem, name, data) {
            return dataPriv.access(elem, name, data);
        },
        _removeData: function _removeData(elem, name) {
            dataPriv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function data(key, value) {
            var i,
                name,
                data,
                elem = this[0],
                attrs = elem && elem.attributes;

            if (key === undefined) {
                if (this.length) {
                    data = dataUser.get(elem);

                    if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                        i = attrs.length;

                        while (i--) {
                            if (attrs[i]) {
                                name = attrs[i].name;

                                if (name.indexOf("data-") === 0) {
                                    name = camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }

                        dataPriv.set(elem, "hasDataAttrs", true);
                    }
                }

                return data;
            }


            if (_typeof(key) === "object") {
                return this.each(function () {
                    dataUser.set(this, key);
                });
            }

            return access(this, function (value) {
                var data;

                if (elem && value === undefined) {
                    data = dataUser.get(elem, key);

                    if (data !== undefined) {
                        return data;
                    }


                    data = dataAttr(elem, key);

                    if (data !== undefined) {
                        return data;
                    }


                    return;
                }


                this.each(function () {
                    dataUser.set(this, key, value);
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function removeData(key) {
            return this.each(function () {
                dataUser.remove(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function queue(elem, type, data) {
            var queue;

            if (elem) {
                type = (type || "fx") + "queue";
                queue = dataPriv.get(elem, type);

                if (data) {
                    if (!queue || Array.isArray(data)) {
                        queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }

                return queue || [];
            }
        },
        dequeue: function dequeue(elem, type) {
            type = type || "fx";

            var queue = jQuery.queue(elem, type),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks(elem, type),
                next = function next() {
                    jQuery.dequeue(elem, type);
                };


            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }

            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress");
                }


                delete hooks.stop;
                fn.call(elem, next, hooks);
            }

            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        _queueHooks: function _queueHooks(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function () {
                    dataPriv.remove(elem, [type + "queue", key]);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function queue(type, data) {
            var setter = 2;

            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }

            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }

            return data === undefined ? this : this.each(function () {
                var queue = jQuery.queue(this, type, data);

                jQuery._queueHooks(this, type);

                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function dequeue(type) {
            return this.each(function () {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function clearQueue(type) {
            return this.queue(type || "fx", []);
        },
        promise: function promise(type, obj) {
            var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function resolve() {
                    if (! --count) {
                        defer.resolveWith(elements, [elements]);
                    }
                };

            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }

            type = type || "fx";

            while (i--) {
                tmp = dataPriv.get(elements[i], type + "queueHooks");

                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }

            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
    var cssExpand = ["Top", "Right", "Bottom", "Left"];

    var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
        elem = el || elem;

        return elem.style.display === "none" || elem.style.display === "" &&
            jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
    };

    var swap = function swap(elem, options, callback, args) {
        var ret,
            name,
            old = {};

        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }

        ret = callback.apply(elem, args || []);

        for (name in options) {
            elem.style[name] = old[name];
        }

        return ret;
    };

    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted,
            scale,
            maxIterations = 20,
            currentValue = tween ? function () {
                return tween.cur();
            } : function () {
                return jQuery.css(elem, prop, "");
            },
            initial = currentValue(),
            unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
            initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

        if (initialInUnit && initialInUnit[3] !== unit) {
            initial = initial / 2;

            unit = unit || initialInUnit[3];

            initialInUnit = +initial || 1;

            while (maxIterations--) {
                jQuery.style(elem, prop, initialInUnit + unit);

                if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                    maxIterations = 0;
                }

                initialInUnit = initialInUnit / scale;
            }

            initialInUnit = initialInUnit * 2;
            jQuery.style(elem, prop, initialInUnit + unit);

            valueParts = valueParts || [];
        }

        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;

            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }

        return adjusted;
    }

    var defaultDisplayMap = {};

    function getDefaultDisplay(elem) {
        var temp,
            doc = elem.ownerDocument,
            nodeName = elem.nodeName,
            display = defaultDisplayMap[nodeName];

        if (display) {
            return display;
        }

        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, "display");
        temp.parentNode.removeChild(temp);

        if (display === "none") {
            display = "block";
        }

        defaultDisplayMap[nodeName] = display;
        return display;
    }

    function showHide(elements, show) {
        var display,
            elem,
            values = [],
            index = 0,
            length = elements.length;

        for (; index < length; index++) {
            elem = elements[index];

            if (!elem.style) {
                continue;
            }

            display = elem.style.display;

            if (show) {
                if (display === "none") {
                    values[index] = dataPriv.get(elem, "display") || null;

                    if (!values[index]) {
                        elem.style.display = "";
                    }
                }

                if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                    values[index] = getDefaultDisplay(elem);
                }
            } else {
                if (display !== "none") {
                    values[index] = "none";

                    dataPriv.set(elem, "display", display);
                }
            }
        }


        for (index = 0; index < length; index++) {
            if (values[index] != null) {
                elements[index].style.display = values[index];
            }
        }

        return elements;
    }

    jQuery.fn.extend({
        show: function show() {
            return showHide(this, true);
        },
        hide: function hide() {
            return showHide(this);
        },
        toggle: function toggle(state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }

            return this.each(function () {
                if (isHiddenWithinTree(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    var rcheckableType = /^(?:checkbox|radio)$/i;
    var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
    var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

    var wrapMap = {
        option: [1, "<select multiple='multiple'>", "</select>"],
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
    };

    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;

    function getAll(context, tag) {
        var ret;

        if (typeof context.getElementsByTagName !== "undefined") {
            ret = context.getElementsByTagName(tag || "*");
        } else if (typeof context.querySelectorAll !== "undefined") {
            ret = context.querySelectorAll(tag || "*");
        } else {
            ret = [];
        }

        if (tag === undefined || tag && nodeName(context, tag)) {
            return jQuery.merge([context], ret);
        }

        return ret;
    }


    function setGlobalEval(elems, refElements) {
        var i = 0,
            l = elems.length;

        for (; i < l; i++) {
            dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
        }
    }

    var rhtml = /<|&#?\w+;/;

    function buildFragment(elems, context, scripts, selection, ignored) {
        var elem,
            tmp,
            tag,
            wrap,
            contains,
            j,
            fragment = context.createDocumentFragment(),
            nodes = [],
            i = 0,
            l = elems.length;

        for (; i < l; i++) {
            elem = elems[i];

            if (elem || elem === 0) {
                if (toType(elem) === "object") {
                    jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
                } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));
                } else {
                    tmp = tmp || fragment.appendChild(context.createElement("div"));

                    tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

                    j = wrap[0];

                    while (j--) {
                        tmp = tmp.lastChild;
                    }


                    jQuery.merge(nodes, tmp.childNodes);

                    tmp = fragment.firstChild;

                    tmp.textContent = "";
                }
            }
        }


        fragment.textContent = "";
        i = 0;

        while (elem = nodes[i++]) {
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                    ignored.push(elem);
                }

                continue;
            }

            contains = jQuery.contains(elem.ownerDocument, elem);

            tmp = getAll(fragment.appendChild(elem), "script");

            if (contains) {
                setGlobalEval(tmp);
            }


            if (scripts) {
                j = 0;

                while (elem = tmp[j++]) {
                    if (rscriptType.test(elem.type || "")) {
                        scripts.push(elem);
                    }
                }
            }
        }

        return fragment;
    }

    (function () {
        var fragment = document.createDocumentFragment(),
            div = fragment.appendChild(document.createElement("div")),
            input = document.createElement("input");

        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);

        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    })();

    var documentElement = document.documentElement;
    var rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

    function returnTrue() {
        return true;
    }

    function returnFalse() {
        return false;
    }


    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) { }
    }

    function _on(elem, types, selector, data, fn, one) {
        var origFn, type;

        if (_typeof(types) === "object") {
            if (typeof selector !== "string") {
                data = data || selector;
                selector = undefined;
            }

            for (type in types) {
                _on(elem, type, selector, data, types[type], one);
            }

            return elem;
        }

        if (data == null && fn == null) {
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === "string") {
                fn = data;
                data = undefined;
            } else {
                fn = data;
                data = selector;
                selector = undefined;
            }
        }

        if (fn === false) {
            fn = returnFalse;
        } else if (!fn) {
            return elem;
        }

        if (one === 1) {
            origFn = fn;

            fn = function fn(event) {
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };


            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }

        return elem.each(function () {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }


    jQuery.event = {
        global: {},
        add: function add(elem, types, handler, data, selector) {
            var handleObjIn,
                eventHandle,
                tmp,
                events,
                t,
                handleObj,
                special,
                handlers,
                type,
                namespaces,
                origType,
                elemData = dataPriv.get(elem);

            if (!elemData) {
                return;
            }


            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }


            if (selector) {
                jQuery.find.matchesSelector(documentElement, selector);
            }


            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }


            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }

            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                    return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
                };
            }


            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;

            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                if (!type) {
                    continue;
                }


                special = jQuery.event.special[type] || {};

                type = (selector ? special.delegateType : special.bindType) || type;

                special = jQuery.event.special[type] || {};

                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);

                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;

                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle);
                        }
                    }
                }

                if (special.add) {
                    special.add.call(elem, handleObj);

                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }


                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }


                jQuery.event.global[type] = true;
            }
        },
        remove: function remove(elem, types, handler, selector, mappedTypes) {
            var j,
                origCount,
                tmp,
                events,
                t,
                handleObj,
                special,
                handlers,
                type,
                namespaces,
                origType,
                elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

            if (!elemData || !(events = elemData.events)) {
                return;
            }


            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;

            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }

                    continue;
                }

                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

                origCount = j = handlers.length;

                while (j--) {
                    handleObj = handlers[j];

                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);

                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }

                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }


                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }

                    delete events[type];
                }
            }


            if (jQuery.isEmptyObject(events)) {
                dataPriv.remove(elem, "handle events");
            }
        },
        dispatch: function dispatch(nativeEvent) {
            var event = jQuery.event.fix(nativeEvent);
            var i,
                j,
                ret,
                matched,
                handleObj,
                handlerQueue,
                args = new Array(arguments.length),
                handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
                special = jQuery.event.special[event.type] || {};

            args[0] = event;

            for (i = 1; i < arguments.length; i++) {
                args[i] = arguments[i];
            }

            event.delegateTarget = this;

            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }


            handlerQueue = jQuery.event.handlers.call(this, event, handlers);

            i = 0;

            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;

                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }


            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }

            return event.result;
        },
        handlers: function handlers(event, _handlers) {
            var i,
                handleObj,
                sel,
                matchedHandlers,
                matchedSelectors,
                handlerQueue = [],
                delegateCount = _handlers.delegateCount,
                cur = event.target;

            if (delegateCount &&
                cur.nodeType &&
                !(event.type === "click" && event.button >= 1)) {
                for (; cur !== this; cur = cur.parentNode || this) {
                    if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                        matchedHandlers = [];
                        matchedSelectors = {};

                        for (i = 0; i < delegateCount; i++) {
                            handleObj = _handlers[i];

                            sel = handleObj.selector + " ";

                            if (matchedSelectors[sel] === undefined) {
                                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                            }

                            if (matchedSelectors[sel]) {
                                matchedHandlers.push(handleObj);
                            }
                        }

                        if (matchedHandlers.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matchedHandlers
                            });
                        }
                    }
                }
            }


            cur = this;

            if (delegateCount < _handlers.length) {
                handlerQueue.push({
                    elem: cur,
                    handlers: _handlers.slice(delegateCount)
                });
            }

            return handlerQueue;
        },
        addProp: function addProp(name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,
                get: isFunction(hook) ? function () {
                    if (this.originalEvent) {
                        return hook(this.originalEvent);
                    }
                } : function () {
                    if (this.originalEvent) {
                        return this.originalEvent[name];
                    }
                },
                set: function set(value) {
                    Object.defineProperty(this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    });
                }
            });
        },
        fix: function fix(originalEvent) {
            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
            load: {
                noBubble: true
            },
            focus: {
                trigger: function trigger() {
                    if (this !== safeActiveElement() && this.focus) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function trigger() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function trigger() {
                    if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
                        this.click();
                        return false;
                    }
                },
                _default: function _default(event) {
                    return nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function postDispatch(event) {
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        }
    };

    jQuery.removeEvent = function (elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
        }
    };

    jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }


        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;

            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&
                src.returnValue === false ? returnTrue : returnFalse;

            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
        } else {
            this.type = src;
        }


        if (props) {
            jQuery.extend(this, props);
        }


        this.timeStamp = src && src.timeStamp || Date.now();

        this[jQuery.expando] = true;
    };


    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function preventDefault() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;

            if (e && !this.isSimulated) {
                e.preventDefault();
            }
        },
        stopPropagation: function stopPropagation() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;

            if (e && !this.isSimulated) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function stopImmediatePropagation() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;

            if (e && !this.isSimulated) {
                e.stopImmediatePropagation();
            }

            this.stopPropagation();
        }
    };

    jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: function which(event) {
            var button = event.button;

            if (event.which == null && rkeyEvent.test(event.type)) {
                return event.charCode != null ? event.charCode : event.keyCode;
            }


            if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
                if (button & 1) {
                    return 1;
                }

                if (button & 2) {
                    return 3;
                }

                if (button & 4) {
                    return 2;
                }

                return 0;
            }

            return event.which;
        }
    }, jQuery.event.addProp);

    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function handle(event) {
                var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;

                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }

                return ret;
            }
        };
    });
    jQuery.fn.extend({
        on: function on(types, selector, data, fn) {
            return _on(this, types, selector, data, fn);
        },
        one: function one(types, selector, data, fn) {
            return _on(this, types, selector, data, fn, 1);
        },
        off: function off(types, selector, fn) {
            var handleObj, type;

            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }

            if (_typeof(types) === "object") {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }

                return this;
            }

            if (selector === false || typeof selector === "function") {
                fn = selector;
                selector = undefined;
            }

            if (fn === false) {
                fn = returnFalse;
            }

            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
            });
        }
    });
    var
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

        rnoInnerhtml = /<script|<style|<link/i,
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

    function manipulationTarget(elem, content) {
        if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
            return jQuery(elem).children("tbody")[0] || elem;
        }

        return elem;
    }


    function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
    }

    function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") {
            elem.type = elem.type.slice(5);
        } else {
            elem.removeAttribute("type");
        }

        return elem;
    }

    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

        if (dest.nodeType !== 1) {
            return;
        }


        if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.access(src);
            pdataCur = dataPriv.set(dest, pdataOld);
            events = pdataOld.events;

            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};

                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }


        if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);
            dataUser.set(dest, udataCur);
        }
    }


    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();

        if (nodeName === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }

    function domManip(collection, args, callback, ignored) {
        args = concat.apply([], args);
        var fragment,
            first,
            scripts,
            hasScripts,
            node,
            doc,
            i = 0,
            l = collection.length,
            iNoClone = l - 1,
            value = args[0],
            valueIsFunction = isFunction(value);

        if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
            return collection.each(function (index) {
                var self = collection.eq(index);

                if (valueIsFunction) {
                    args[0] = value.call(this, index, self.html());
                }

                domManip(self, args, callback, ignored);
            });
        }

        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;

            if (fragment.childNodes.length === 1) {
                fragment = first;
            }


            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                hasScripts = scripts.length;

                for (; i < l; i++) {
                    node = fragment;

                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);

                        if (hasScripts) {
                            jQuery.merge(scripts, getAll(node, "script"));
                        }
                    }

                    callback.call(collection[i], node, i);
                }

                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;

                    jQuery.map(scripts, restoreScript);

                    for (i = 0; i < hasScripts; i++) {
                        node = scripts[i];

                        if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                            if (node.src && (node.type || "").toLowerCase() !== "module") {
                                if (jQuery._evalUrl) {
                                    jQuery._evalUrl(node.src);
                                }
                            } else {
                                DOMEval(node.textContent.replace(rcleanScript, ""), doc, node);
                            }
                        }
                    }
                }
            }
        }

        return collection;
    }

    function _remove(elem, selector, keepData) {
        var node,
            nodes = selector ? jQuery.filter(selector, elem) : elem,
            i = 0;

        for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
            }

            if (node.parentNode) {
                if (keepData && jQuery.contains(node.ownerDocument, node)) {
                    setGlobalEval(getAll(node, "script"));
                }

                node.parentNode.removeChild(node);
            }
        }

        return elem;
    }

    jQuery.extend({
        htmlPrefilter: function htmlPrefilter(html) {
            return html.replace(rxhtmlTag, "<$1></$2>");
        },
        clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
            var i,
                l,
                srcElements,
                destElements,
                clone = elem.cloneNode(true),
                inPage = jQuery.contains(elem.ownerDocument, elem);

            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);

                for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }


            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);

                    for (i = 0, l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }


            destElements = getAll(clone, "script");

            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }


            return clone;
        },
        cleanData: function cleanData(elems) {
            var data,
                elem,
                type,
                special = jQuery.event.special,
                i = 0;

            for (; (elem = elems[i]) !== undefined; i++) {
                if (acceptData(elem)) {
                    if (data = elem[dataPriv.expando]) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }


                        elem[dataPriv.expando] = undefined;
                    }

                    if (elem[dataUser.expando]) {
                        elem[dataUser.expando] = undefined;
                    }
                }
            }
        }
    });
    jQuery.fn.extend({
        detach: function detach(selector) {
            return _remove(this, selector, true);
        },
        remove: function remove(selector) {
            return _remove(this, selector);
        },
        text: function text(value) {
            return access(this, function (value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function () {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.textContent = value;
                    }
                });
            }, null, value, arguments.length);
        },
        append: function append() {
            return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function prepend() {
            return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function before() {
            return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function after() {
            return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        empty: function empty() {
            var elem,
                i = 0;

            for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));

                    elem.textContent = "";
                }
            }

            return this;
        },
        clone: function clone(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function html(value) {
            return access(this, function (value) {
                var elem = this[0] || {},
                    i = 0,
                    l = this.length;

                if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                }


                if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                    value = jQuery.htmlPrefilter(value);

                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};

                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }

                        elem = 0;
                    } catch (e) { }
                }

                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function replaceWith() {
            var ignored = [];

            return domManip(this, arguments, function (elem) {
                var parent = this.parentNode;

                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));

                    if (parent) {
                        parent.replaceChild(elem, this);
                    }
                }

            }, ignored);
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function (name, original) {
        jQuery.fn[name] = function (selector) {
            var elems,
                ret = [],
                insert = jQuery(selector),
                last = insert.length - 1,
                i = 0;

            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);

                push.apply(ret, elems.get());
            }

            return this.pushStack(ret);
        };
    });
    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

    var getStyles = function getStyles(elem) {
        var view = elem.ownerDocument.defaultView;

        if (!view || !view.opener) {
            view = window;
        }

        return view.getComputedStyle(elem);
    };

    var rboxStyle = new RegExp(cssExpand.join("|"), "i");

    (function () {
        function computeStyleTests() {
            if (!div) {
                return;
            }

            container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";

            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

            div.style.position = "absolute";
            scrollboxSizeVal = div.offsetWidth === 36 || "absolute";
            documentElement.removeChild(container);

            div = null;
        }

        function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
        }

        var pixelPositionVal,
            boxSizingReliableVal,
            scrollboxSizeVal,
            pixelBoxStylesVal,
            reliableMarginLeftVal,
            container = document.createElement("div"),
            div = document.createElement("div");

        if (!div.style) {
            return;
        }


        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery.extend(support, {
            boxSizingReliable: function boxSizingReliable() {
                computeStyleTests();
                return boxSizingReliableVal;
            },
            pixelBoxStyles: function pixelBoxStyles() {
                computeStyleTests();
                return pixelBoxStylesVal;
            },
            pixelPosition: function pixelPosition() {
                computeStyleTests();
                return pixelPositionVal;
            },
            reliableMarginLeft: function reliableMarginLeft() {
                computeStyleTests();
                return reliableMarginLeftVal;
            },
            scrollboxSize: function scrollboxSize() {
                computeStyleTests();
                return scrollboxSizeVal;
            }
        });
    })();

    function curCSS(elem, name, computed) {
        var width,
            minWidth,
            maxWidth,
            ret,
            style = elem.style;
        computed = computed || getStyles(elem);

        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];

            if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                ret = jQuery.style(elem, name);
            }


            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;

                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;

                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }

        return ret !== undefined ?
            ret + "" : ret;
    }

    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function get() {
                if (conditionFn()) {
                    delete this.get;
                    return;
                }


                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }

    var
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        rcustomProp = /^--/,
        cssShow = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        cssNormalTransform = {
            letterSpacing: "0",
            fontWeight: "400"
        },
        cssPrefixes = ["Webkit", "Moz", "ms"],
        emptyStyle = document.createElement("div").style;

    function vendorPropName(name) {
        if (name in emptyStyle) {
            return name;
        }


        var capName = name[0].toUpperCase() + name.slice(1),
            i = cssPrefixes.length;

        while (i--) {
            name = cssPrefixes[i] + capName;

            if (name in emptyStyle) {
                return name;
            }
        }
    }


    function finalPropName(name) {
        var ret = jQuery.cssProps[name];

        if (!ret) {
            ret = jQuery.cssProps[name] = vendorPropName(name) || name;
        }

        return ret;
    }

    function setPositiveNumber(elem, value, subtract) {
        var matches = rcssNum.exec(value);
        return matches ?
            Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
    }

    function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === "width" ? 1 : 0,
            extra = 0,
            delta = 0;

        if (box === (isBorderBox ? "border" : "content")) {
            return 0;
        }

        for (; i < 4; i += 2) {
            if (box === "margin") {
                delta += jQuery.css(elem, box + cssExpand[i], true, styles);
            }


            if (!isBorderBox) {
                delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

                if (box !== "padding") {
                    delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                } else {
                    extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }

            } else {
                if (box === "content") {
                    delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }


                if (box !== "margin") {
                    delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }


        if (!isBorderBox && computedVal >= 0) {
            delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5));
        }

        return delta;
    }

    function getWidthOrHeight(elem, dimension, extra) {
        var styles = getStyles(elem),
            val = curCSS(elem, dimension, styles),
            isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box",
            valueIsBorderBox = isBorderBox;

        if (rnumnonpx.test(val)) {
            if (!extra) {
                return val;
            }

            val = "auto";
        }


        valueIsBorderBox = valueIsBorderBox && (support.boxSizingReliable() || val === elem.style[dimension]);

        if (val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") {
            val = elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)];

            valueIsBorderBox = true;
        }


        val = parseFloat(val) || 0;

        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles,
            val) + "px";
    }

    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function get(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
        cssNumber: {
            "animationIterationCount": true,
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },
        cssProps: {},
        style: function style(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }


            var ret,
                type,
                hooks,
                origName = camelCase(name),
                isCustomProp = rcustomProp.test(name),
                style = elem.style;

            if (!isCustomProp) {
                name = finalPropName(origName);
            }


            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            if (value !== undefined) {
                type = _typeof(value);

                if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);

                    type = "number";
                }


                if (value == null || value !== value) {
                    return;
                }


                if (type === "number") {
                    value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
                }


                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }


                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    if (isCustomProp) {
                        style.setProperty(name, value);
                    } else {
                        style[name] = value;
                    }
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }


                return style[name];
            }
        },
        css: function css(elem, name, extra, styles) {
            var val,
                num,
                hooks,
                origName = camelCase(name),
                isCustomProp = rcustomProp.test(name);

            if (!isCustomProp) {
                name = finalPropName(origName);
            }


            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }


            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }


            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }


            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }

            return val;
        }
    });
    jQuery.each(["height", "width"], function (i, dimension) {
        jQuery.cssHooks[dimension] = {
            get: function get(elem, computed, extra) {
                if (computed) {
                    return rdisplayswap.test(jQuery.css(elem, "display")) && (
                        !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
                            return getWidthOrHeight(elem, dimension, extra);
                        }) : getWidthOrHeight(elem, dimension, extra);
                }
            },
            set: function set(elem, value, extra) {
                var matches,
                    styles = getStyles(elem),
                    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                    subtract = extra && boxModelAdjustment(elem, dimension, extra, isBorderBox, styles);

                if (isBorderBox && support.scrollboxSize() === styles.position) {
                    subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
                }


                if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
                    elem.style[dimension] = value;
                    value = jQuery.css(elem, dimension);
                }

                return setPositiveNumber(elem, value, subtract);
            }
        };
    });
    jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
        if (computed) {
            return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
                marginLeft: 0
            }, function () {
                return elem.getBoundingClientRect().left;
            })) + "px";
        }
    });

    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function expand(value) {
                var i = 0,
                    expanded = {},
                    parts = typeof value === "string" ? value.split(" ") : [value];

                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }

                return expanded;
            }
        };

        if (prefix !== "margin") {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        css: function css(name, value) {
            return access(this, function (elem, name, value) {
                var styles,
                    len,
                    map = {},
                    i = 0;

                if (Array.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;

                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }

                    return map;
                }

                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        }
    });

    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }

    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function init(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function cur() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function run(percent) {
            var eased,
                hooks = Tween.propHooks[this.prop];

            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }

            this.now = (this.end - this.start) * eased + this.start;

            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }

            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }

            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function get(tween) {
                var result;

                if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                    return tween.elem[tween.prop];
                }


                result = jQuery.css(tween.elem, tween.prop, "");

                return !result || result === "auto" ? 0 : result;
            },
            set: function set(tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };

    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function set(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.easing = {
        linear: function linear(p) {
            return p;
        },
        swing: function swing(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
    };
    jQuery.fx = Tween.prototype.init;

    jQuery.fx.step = {};
    var fxNow,
        inProgress,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rrun = /queueHooks$/;

    function schedule() {
        if (inProgress) {
            if (document.hidden === false && window.requestAnimationFrame) {
                window.requestAnimationFrame(schedule);
            } else {
                window.setTimeout(schedule, jQuery.fx.interval);
            }

            jQuery.fx.tick();
        }
    }


    function createFxNow() {
        window.setTimeout(function () {
            fxNow = undefined;
        });
        return fxNow = Date.now();
    }


    function genFx(type, includeWidth) {
        var which,
            i = 0,
            attrs = {
                height: type
            };

        includeWidth = includeWidth ? 1 : 0;

        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }

        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }

        return attrs;
    }

    function createTween(value, prop, animation) {
        var tween,
            collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
            index = 0,
            length = collection.length;

        for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
                return tween;
            }
        }
    }

    function defaultPrefilter(elem, props, opts) {
        var prop,
            value,
            toggle,
            hooks,
            oldfire,
            propTween,
            restoreDisplay,
            display,
            isBox = "width" in props || "height" in props,
            anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHiddenWithinTree(elem),
            dataShow = dataPriv.get(elem, "fxshow");

        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");

            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;

                hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }

            hooks.unqueued++;
            anim.always(function () {
                anim.always(function () {
                    hooks.unqueued--;

                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }


        for (prop in props) {
            value = props[prop];

            if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";

                if (value === (hidden ? "hide" : "show")) {
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }

                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }


        propTween = !jQuery.isEmptyObject(props);

        if (!propTween && jQuery.isEmptyObject(orig)) {
            return;
        }


        if (isBox && elem.nodeType === 1) {
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];

            restoreDisplay = dataShow && dataShow.display;

            if (restoreDisplay == null) {
                restoreDisplay = dataPriv.get(elem, "display");
            }

            display = jQuery.css(elem, "display");

            if (display === "none") {
                if (restoreDisplay) {
                    display = restoreDisplay;
                } else {
                    showHide([elem], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, "display");
                    showHide([elem]);
                }
            }


            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
                if (jQuery.css(elem, "float") === "none") {
                    if (!propTween) {
                        anim.done(function () {
                            style.display = restoreDisplay;
                        });

                        if (restoreDisplay == null) {
                            display = style.display;
                            restoreDisplay = display === "none" ? "" : display;
                        }
                    }

                    style.display = "inline-block";
                }
            }
        }

        if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function () {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }


        propTween = false;

        for (prop in orig) {
            if (!propTween) {
                if (dataShow) {
                    if ("hidden" in dataShow) {
                        hidden = dataShow.hidden;
                    }
                } else {
                    dataShow = dataPriv.access(elem, "fxshow", {
                        display: restoreDisplay
                    });
                }


                if (toggle) {
                    dataShow.hidden = !hidden;
                }


                if (hidden) {
                    showHide([elem], true);
                }


                anim.done(function () {
                    if (!hidden) {
                        showHide([elem]);
                    }

                    dataPriv.remove(elem, "fxshow");

                    for (prop in orig) {
                        jQuery.style(elem, prop, orig[prop]);
                    }
                });
            }


            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

            if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;

                if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                }
            }
        }
    }

    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;

        for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];

            if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }

            if (index !== name) {
                props[name] = value;
                delete props[index];
            }

            hooks = jQuery.cssHooks[name];

            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];

                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }

    function Animation(elem, properties, options) {
        var result,
            stopped,
            index = 0,
            length = Animation.prefilters.length,
            deferred = jQuery.Deferred().always(function () {
                delete tick.elem;
            }),
            tick = function tick() {
                if (stopped) {
                    return false;
                }

                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;

                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }

                deferred.notifyWith(elem, [animation, percent, remaining]);

                if (percent < 1 && length) {
                    return remaining;
                }


                if (!length) {
                    deferred.notifyWith(elem, [animation, 1, 0]);
                }


                deferred.resolveWith(elem, [animation]);
                return false;
            },
            animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {},
                    easing: jQuery.easing._default
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function createTween(prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function stop(gotoEnd) {
                    var index = 0,
                        length = gotoEnd ? animation.tweens.length : 0;

                    if (stopped) {
                        return this;
                    }

                    stopped = true;

                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }


                    if (gotoEnd) {
                        deferred.notifyWith(elem, [animation, 1, 0]);
                        deferred.resolveWith(elem, [animation, gotoEnd]);
                    } else {
                        deferred.rejectWith(elem, [animation, gotoEnd]);
                    }

                    return this;
                }
            }),
            props = animation.props;

        propFilter(props, animation.opts.specialEasing);

        for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);

            if (result) {
                if (isFunction(result.stop)) {
                    jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
                }

                return result;
            }
        }

        jQuery.map(props, createTween, animation);

        if (isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }


        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation;
    }

    jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
            "*": [function (prop, value) {
                var tween = this.createTween(prop, value);
                adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                return tween;
            }]
        },
        tweener: function tweener(props, callback) {
            if (isFunction(props)) {
                callback = props;
                props = ["*"];
            } else {
                props = props.match(rnothtmlwhite);
            }

            var prop,
                index = 0,
                length = props.length;

            for (; index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },
        prefilters: [defaultPrefilter],
        prefilter: function prefilter(callback, prepend) {
            if (prepend) {
                Animation.prefilters.unshift(callback);
            } else {
                Animation.prefilters.push(callback);
            }
        }
    });

    jQuery.speed = function (speed, easing, fn) {
        var opt = speed && _typeof(speed) === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
        };

        if (jQuery.fx.off) {
            opt.duration = 0;
        } else {
            if (typeof opt.duration !== "number") {
                if (opt.duration in jQuery.fx.speeds) {
                    opt.duration = jQuery.fx.speeds[opt.duration];
                } else {
                    opt.duration = jQuery.fx.speeds._default;
                }
            }
        }


        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }


        opt.old = opt.complete;

        opt.complete = function () {
            if (isFunction(opt.old)) {
                opt.old.call(this);
            }

            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };

        return opt;
    };

    jQuery.fn.extend({
        fadeTo: function fadeTo(speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css("opacity", 0).show()
                .end().animate({
                    opacity: to
                }, speed, easing, callback);
        },
        animate: function animate(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop),
                optall = jQuery.speed(speed, easing, callback),
                doAnimation = function doAnimation() {
                    var anim = Animation(this, jQuery.extend({}, prop), optall);

                    if (empty || dataPriv.get(this, "finish")) {
                        anim.stop(true);
                    }
                };

            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function stop(type, clearQueue, gotoEnd) {
            var stopQueue = function stopQueue(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };

            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }

            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }

            return this.each(function () {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = dataPriv.get(this);

                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }

                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }


                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function finish(type) {
            if (type !== false) {
                type = type || "fx";
            }

            return this.each(function () {
                var index,
                    data = dataPriv.get(this),
                    queue = data[type + "queue"],
                    hooks = data[type + "queueHooks"],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;

                data.finish = true;

                jQuery.queue(this, type, []);

                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }


                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }


                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }


                delete data.finish;
            });
        }
    });
    jQuery.each(["toggle", "show", "hide"], function (i, name) {
        var cssFn = jQuery.fn[name];

        jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });

    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];

    jQuery.fx.tick = function () {
        var timer,
            i = 0,
            timers = jQuery.timers;
        fxNow = Date.now();

        for (; i < timers.length; i++) {
            timer = timers[i];

            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }

        if (!timers.length) {
            jQuery.fx.stop();
        }

        fxNow = undefined;
    };

    jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
    };

    jQuery.fx.interval = 13;

    jQuery.fx.start = function () {
        if (inProgress) {
            return;
        }

        inProgress = true;
        schedule();
    };

    jQuery.fx.stop = function () {
        inProgress = null;
    };

    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };

    jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function (next, hooks) {
            var timeout = window.setTimeout(next, time);

            hooks.stop = function () {
                window.clearTimeout(timeout);
            };
        });
    };

    (function () {
        var input = document.createElement("input"),
            select = document.createElement("select"),
            opt = select.appendChild(document.createElement("option"));
        input.type = "checkbox";

        support.checkOn = input.value !== "";

        support.optSelected = opt.selected;

        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
    })();

    var boolHook,
        attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function attr(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function removeAttr(name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function attr(elem, name, value) {
            var ret,
                hooks,
                nType = elem.nodeType;

            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }


            if (typeof elem.getAttribute === "undefined") {
                return jQuery.prop(elem, name, value);
            }


            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            }

            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }

                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }

                elem.setAttribute(name, value + "");
                return value;
            }

            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }

            ret = jQuery.find.attr(elem, name);

            return ret == null ? undefined : ret;
        },
        attrHooks: {
            type: {
                set: function set(elem, value) {
                    if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);

                        if (val) {
                            elem.value = val;
                        }

                        return value;
                    }
                }
            }
        },
        removeAttr: function removeAttr(elem, value) {
            var name,
                i = 0,
                attrNames = value && value.match(rnothtmlwhite);

            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    elem.removeAttribute(name);
                }
            }
        }
    });

    boolHook = {
        set: function set(elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }

            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;

        attrHandle[name] = function (elem, name, isXML) {
            var ret,
                handle,
                lowercaseName = name.toLowerCase();

            if (!isXML) {
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ? lowercaseName : null;
                attrHandle[lowercaseName] = handle;
            }

            return ret;
        };
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i,
        rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function prop(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function removeProp(name) {
            return this.each(function () {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        prop: function prop(elem, name, value) {
            var ret,
                hooks,
                nType = elem.nodeType;

            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }

            if (value !== undefined) {
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }

                return elem[name] = value;
            }

            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }

            return elem[name];
        },
        propHooks: {
            tabIndex: {
                get: function get(elem) {
                    var tabindex = jQuery.find.attr(elem, "tabindex");

                    if (tabindex) {
                        return parseInt(tabindex, 10);
                    }

                    if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                        return 0;
                    }

                    return -1;
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        }
    });

    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function get(elem) {
                var parent = elem.parentNode;

                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }

                return null;
            },
            set: function set(elem) {
                var parent = elem.parentNode;

                if (parent) {
                    parent.selectedIndex;

                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
            }
        };
    }

    jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
        jQuery.propFix[this.toLowerCase()] = this;
    });

    function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
    }

    function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
    }

    function classesToArray(value) {
        if (Array.isArray(value)) {
            return value;
        }

        if (typeof value === "string") {
            return value.match(rnothtmlwhite) || [];
        }

        return [];
    }

    jQuery.fn.extend({
        addClass: function addClass(value) {
            var classes,
                elem,
                cur,
                curValue,
                clazz,
                j,
                finalValue,
                i = 0;

            if (isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
            }

            classes = classesToArray(value);

            if (classes.length) {
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

                    if (cur) {
                        j = 0;

                        while (clazz = classes[j++]) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }


                        finalValue = stripAndCollapse(cur);

                        if (curValue !== finalValue) {
                            elem.setAttribute("class", finalValue);
                        }
                    }
                }
            }

            return this;
        },
        removeClass: function removeClass(value) {
            var classes,
                elem,
                cur,
                curValue,
                clazz,
                j,
                finalValue,
                i = 0;

            if (isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
            }

            if (!arguments.length) {
                return this.attr("class", "");
            }

            classes = classesToArray(value);

            if (classes.length) {
                while (elem = this[i++]) {
                    curValue = getClass(elem);

                    cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

                    if (cur) {
                        j = 0;

                        while (clazz = classes[j++]) {
                            while (cur.indexOf(" " + clazz + " ") > -1) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }


                        finalValue = stripAndCollapse(cur);

                        if (curValue !== finalValue) {
                            elem.setAttribute("class", finalValue);
                        }
                    }
                }
            }

            return this;
        },
        toggleClass: function toggleClass(value, stateVal) {
            var type = _typeof(value),
                isValidValue = type === "string" || Array.isArray(value);

            if (typeof stateVal === "boolean" && isValidValue) {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }

            if (isFunction(value)) {
                return this.each(function (i) {
                    jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
                });
            }

            return this.each(function () {
                var className, i, self, classNames;

                if (isValidValue) {
                    i = 0;
                    self = jQuery(this);
                    classNames = classesToArray(value);

                    while (className = classNames[i++]) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }

                } else if (value === undefined || type === "boolean") {
                    className = getClass(this);

                    if (className) {
                        dataPriv.set(this, "__className__", className);
                    }


                    if (this.setAttribute) {
                        this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
                    }
                }
            });
        },
        hasClass: function hasClass(selector) {
            var className,
                elem,
                i = 0;
            className = " " + selector + " ";

            while (elem = this[i++]) {
                if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                    return true;
                }
            }

            return false;
        }
    });
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function val(value) {
            var hooks,
                ret,
                valueIsFunction,
                elem = this[0];

            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }

                    ret = elem.value;

                    if (typeof ret === "string") {
                        return ret.replace(rreturn, "");
                    }


                    return ret == null ? "" : ret;
                }

                return;
            }

            valueIsFunction = isFunction(value);
            return this.each(function (i) {
                var val;

                if (this.nodeType !== 1) {
                    return;
                }

                if (valueIsFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }


                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (Array.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                        return value == null ? "" : value + "";
                    });
                }

                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function get(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ? val :
                        stripAndCollapse(jQuery.text(elem));
                }
            },
            select: {
                get: function get(elem) {
                    var value,
                        option,
                        i,
                        options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === "select-one",
                        values = one ? null : [],
                        max = one ? index + 1 : options.length;

                    if (index < 0) {
                        i = max;
                    } else {
                        i = one ? index : 0;
                    }


                    for (; i < max; i++) {
                        option = options[i];

                        if ((option.selected || i === index) &&
                            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();

                            if (one) {
                                return value;
                            }


                            values.push(value);
                        }
                    }

                    return values;
                },
                set: function set(elem, value) {
                    var optionSet,
                        option,
                        options = elem.options,
                        values = jQuery.makeArray(value),
                        i = options.length;

                    while (i--) {
                        option = options[i];

                        if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                            optionSet = true;
                        }

                    }


                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }

                    return values;
                }
            }
        }
    });

    jQuery.each(["radio", "checkbox"], function () {
        jQuery.valHooks[this] = {
            set: function set(elem, value) {
                if (Array.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
                }
            }
        };

        if (!support.checkOn) {
            jQuery.valHooks[this].get = function (elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });

    support.focusin = "onfocusin" in window;

    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        stopPropagationCallback = function stopPropagationCallback(e) {
            e.stopPropagation();
        };

    jQuery.extend(jQuery.event, {
        trigger: function trigger(event, data, elem, onlyHandlers) {
            var i,
                cur,
                tmp,
                bubbleType,
                ontype,
                handle,
                special,
                lastElement,
                eventPath = [elem || document],
                type = hasOwn.call(event, "type") ? event.type : event,
                namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document;

            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }


            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }

            if (type.indexOf(".") > -1) {
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }

            ontype = type.indexOf(":") < 0 && "on" + type;

            event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event);

            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

            event.result = undefined;

            if (!event.target) {
                event.target = elem;
            }


            data = data == null ? [event] : jQuery.makeArray(data, [event]);

            special = jQuery.event.special[type] || {};

            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }


            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                bubbleType = special.delegateType || type;

                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }

                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }


                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }


            i = 0;

            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                lastElement = cur;
                event.type = i > 1 ? bubbleType : special.bindType || type;

                handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");

                if (handle) {
                    handle.apply(cur, data);
                }


                handle = ontype && cur[ontype];

                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);

                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }

            event.type = type;

            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                        tmp = elem[ontype];

                        if (tmp) {
                            elem[ontype] = null;
                        }


                        jQuery.event.triggered = type;

                        if (event.isPropagationStopped()) {
                            lastElement.addEventListener(type, stopPropagationCallback);
                        }

                        elem[type]();

                        if (event.isPropagationStopped()) {
                            lastElement.removeEventListener(type, stopPropagationCallback);
                        }

                        jQuery.event.triggered = undefined;

                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }

            return event.result;
        },
        simulate: function simulate(type, elem, event) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true
            });
            jQuery.event.trigger(e, null, elem);
        }
    });
    jQuery.fn.extend({
        trigger: function trigger(type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function triggerHandler(type, data) {
            var elem = this[0];

            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });

    if (!support.focusin) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function (orig, fix) {
            var handler = function handler(event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };

            jQuery.event.special[fix] = {
                setup: function setup() {
                    var doc = this.ownerDocument || this,
                        attaches = dataPriv.access(doc, fix);

                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }

                    dataPriv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function teardown() {
                    var doc = this.ownerDocument || this,
                        attaches = dataPriv.access(doc, fix) - 1;

                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        dataPriv.remove(doc, fix);
                    } else {
                        dataPriv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }

    var location = window.location;
    var nonce = Date.now();
    var rquery = /\?/;

    jQuery.parseXML = function (data) {
        var xml;

        if (!data || typeof data !== "string") {
            return null;
        }


        try {
            xml = new window.DOMParser().parseFromString(data, "text/xml");
        } catch (e) {
            xml = undefined;
        }

        if (!xml || xml.getElementsByTagName("parsererror").length) {
            jQuery.error("Invalid XML: " + data);
        }

        return xml;
    };

    var rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;

    function buildParams(prefix, obj, traditional, add) {
        var name;

        if (Array.isArray(obj)) {
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
                }
            });
        } else if (!traditional && toType(obj) === "object") {
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }


    jQuery.param = function (a, traditional) {
        var prefix,
            s = [],
            add = function add(key, valueOrFunction) {
                var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
                s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
            };


        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function () {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }


        return s.join("&");
    };

    jQuery.fn.extend({
        serialize: function serialize() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function serializeArray() {
            return this.map(function () {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function () {
                var type = this.type;

                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function (i, elem) {
                var val = jQuery(this).val();

                if (val == null) {
                    return null;
                }

                if (Array.isArray(val)) {
                    return jQuery.map(val, function (val) {
                        return {
                            name: elem.name,
                            value: val.replace(rCRLF, "\r\n")
                        };
                    });
                }

                return {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    var r20 = /%20/g,
        rhash = /#.*$/,
        rantiCache = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,

        prefilters = {},

        transports = {},
        allTypes = "*/".concat("*"),
        originAnchor = document.createElement("a");
    originAnchor.href = location.href;

    function addToPrefiltersOrTransports(structure) {
        return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }

            var dataType,
                i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

            if (isFunction(func)) {
                while (dataType = dataTypes[i++]) {
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }


    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {},
            seekingTransport = structure === transports;

        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);

                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }

        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }


    function ajaxExtend(target, src) {
        var key,
            deep,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};

        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }

        if (deep) {
            jQuery.extend(true, target, deep);
        }

        return target;
    }


    function ajaxHandleResponses(s, jqXHR, responses) {
        var ct,
            type,
            finalDataType,
            firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes;

        while (dataTypes[0] === "*") {
            dataTypes.shift();

            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }


        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }


        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }

                if (!firstDataType) {
                    firstDataType = type;
                }
            }


            finalDataType = finalDataType || firstDataType;
        }


        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }

            return responses[finalDataType];
        }
    }


    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2,
            current,
            conv,
            tmp,
            prev,
            converters = {},
            dataTypes = s.dataTypes.slice();

        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }

        current = dataTypes.shift();

        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }


            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }

            prev = current;
            current = dataTypes.shift();

            if (current) {
                if (current === "*") {
                    current = prev;
                } else if (prev !== "*" && prev !== current) {
                    conv = converters[prev + " " + current] || converters["* " + current];

                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(" ");

                            if (tmp[1] === current) {
                                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];

                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }

                                    break;
                                }
                            }
                        }
                    }


                    if (conv !== true) {
                        if (conv && s.throws) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }

        return {
            state: "success",
            data: response
        };
    }

    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",

            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": true,
                "text json": JSON.parse,
                "text xml": jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function ajaxSetup(target, settings) {
            return settings ?
                ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :
                ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function ajax(url, options) {
            if (_typeof(url) === "object") {
                options = url;
                url = undefined;
            }


            options = options || {};

            var transport,
                cacheURL,
                responseHeadersString,
                responseHeaders,
                timeoutTimer,
                urlAnchor,
                completed,
                fireGlobals,
                i,
                uncached,
                s = jQuery.ajaxSetup({}, options),
                callbackContext = s.context || s,
                globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),
                _statusCode = s.statusCode || {},
                requestHeaders = {},
                requestHeadersNames = {},
                strAbort = "canceled",
                jqXHR = {
                    readyState: 0,
                    getResponseHeader: function getResponseHeader(key) {
                        var match;

                        if (completed) {
                            if (!responseHeaders) {
                                responseHeaders = {};

                                while (match = rheaders.exec(responseHeadersString)) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }

                            match = responseHeaders[key.toLowerCase()];
                        }

                        return match == null ? null : match;
                    },
                    getAllResponseHeaders: function getAllResponseHeaders() {
                        return completed ? responseHeadersString : null;
                    },
                    setRequestHeader: function setRequestHeader(name, value) {
                        if (completed == null) {
                            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                            requestHeaders[name] = value;
                        }

                        return this;
                    },
                    overrideMimeType: function overrideMimeType(type) {
                        if (completed == null) {
                            s.mimeType = type;
                        }

                        return this;
                    },
                    statusCode: function statusCode(map) {
                        var code;

                        if (map) {
                            if (completed) {
                                jqXHR.always(map[jqXHR.status]);
                            } else {
                                for (code in map) {
                                    _statusCode[code] = [_statusCode[code], map[code]];
                                }
                            }
                        }

                        return this;
                    },
                    abort: function abort(statusText) {
                        var finalText = statusText || strAbort;

                        if (transport) {
                            transport.abort(finalText);
                        }

                        done(0, finalText);
                        return this;
                    }
                };


            deferred.promise(jqXHR);

            s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

            s.type = options.method || options.type || s.method || s.type;

            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

            if (s.crossDomain == null) {
                urlAnchor = document.createElement("a");

                try {
                    urlAnchor.href = s.url;

                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
                } catch (e) {
                    s.crossDomain = true;
                }
            }


            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }


            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

            if (completed) {
                return jqXHR;
            }


            fireGlobals = jQuery.event && s.global;

            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }


            s.type = s.type.toUpperCase();

            s.hasContent = !rnoContent.test(s.type);

            cacheURL = s.url.replace(rhash, "");

            if (!s.hasContent) {
                uncached = s.url.slice(cacheURL.length);

                if (s.data && (s.processData || typeof s.data === "string")) {
                    cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

                    delete s.data;
                }


                if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, "$1");
                    uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
                }


                s.url = cacheURL + uncached;
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
                s.data = s.data.replace(r20, "+");
            }


            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }

                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }


            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }


            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }


            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
                return jqXHR.abort();
            }


            strAbort = "abort";

            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);

            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;

                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }


                if (completed) {
                    return jqXHR;
                }


                if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function () {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }

                try {
                    completed = false;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (completed) {
                        throw e;
                    }


                    done(-1, e);
                }
            }


            function done(status, nativeStatusText, responses, headers) {
                var isSuccess,
                    success,
                    error,
                    response,
                    modified,
                    statusText = nativeStatusText;

                if (completed) {
                    return;
                }

                completed = true;

                if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                }


                transport = undefined;

                responseHeadersString = headers || "";

                jqXHR.readyState = status > 0 ? 4 : 0;

                isSuccess = status >= 200 && status < 300 || status === 304;

                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }


                response = ajaxConvert(s, response, jqXHR, isSuccess);

                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");

                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }

                        modified = jqXHR.getResponseHeader("etag");

                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }


                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";
                    } else if (status === 304) {
                        statusText = "notmodified";
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;

                    if (status || !statusText) {
                        statusText = "error";

                        if (status < 0) {
                            status = 0;
                        }
                    }
                }


                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";

                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                } else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }


                jqXHR.statusCode(_statusCode);
                _statusCode = undefined;

                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
                }


                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

                    if (! --jQuery.active) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }

            return jqXHR;
        },
        getJSON: function getJSON(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function getScript(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each(["get", "post"], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
            if (isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }


            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });

    jQuery._evalUrl = function (url) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            "throws": true
        });
    };

    jQuery.fn.extend({
        wrapAll: function wrapAll(html) {
            var wrap;

            if (this[0]) {
                if (isFunction(html)) {
                    html = html.call(this[0]);
                }


                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }

                wrap.map(function () {
                    var elem = this;

                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                    }

                    return elem;
                }).append(this);
            }

            return this;
        },
        wrapInner: function wrapInner(html) {
            if (isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }

            return this.each(function () {
                var self = jQuery(this),
                    contents = self.contents();

                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function wrap(html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function (i) {
                jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function unwrap(selector) {
            this.parent(selector).not("body").each(function () {
                jQuery(this).replaceWith(this.childNodes);
            });
            return this;
        }
    });

    jQuery.expr.pseudos.hidden = function (elem) {
        return !jQuery.expr.pseudos.visible(elem);
    };

    jQuery.expr.pseudos.visible = function (elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
    };

    jQuery.ajaxSettings.xhr = function () {
        try {
            return new window.XMLHttpRequest();
        } catch (e) { }
    };

    var xhrSuccessStatus = {
        0: 200,
        1223: 204
    },
        xhrSupported = jQuery.ajaxSettings.xhr();
    support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function (options) {
        var _callback, errorCallback;


        if (support.cors || xhrSupported && !options.crossDomain) {
            return {
                send: function send(headers, complete) {
                    var i,
                        xhr = options.xhr();
                    xhr.open(options.type, options.url, options.async, options.username, options.password);

                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }


                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }


                    if (!options.crossDomain && !headers["X-Requested-With"]) {
                        headers["X-Requested-With"] = "XMLHttpRequest";
                    }


                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }


                    _callback = function callback(type) {
                        return function () {
                            if (_callback) {
                                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

                                if (type === "abort") {
                                    xhr.abort();
                                } else if (type === "error") {
                                    if (typeof xhr.status !== "number") {
                                        complete(0, "error");
                                    } else {
                                        complete(
                                            xhr.status, xhr.statusText);
                                    }
                                } else {
                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,
                                        (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                                            binary: xhr.response
                                        } : {
                                                text: xhr.responseText
                                            }, xhr.getAllResponseHeaders());
                                }
                            }
                        };
                    };


                    xhr.onload = _callback();
                    errorCallback = xhr.onerror = xhr.ontimeout = _callback("error");

                    if (xhr.onabort !== undefined) {
                        xhr.onabort = errorCallback;
                    } else {
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4) {
                                window.setTimeout(function () {
                                    if (_callback) {
                                        errorCallback();
                                    }
                                });
                            }
                        };
                    }


                    _callback = _callback("abort");

                    try {
                        xhr.send(options.hasContent && options.data || null);
                    } catch (e) {
                        if (_callback) {
                            throw e;
                        }
                    }
                },
                abort: function abort() {
                    if (_callback) {
                        _callback();
                    }
                }
            };
        }
    });

    jQuery.ajaxPrefilter(function (s) {
        if (s.crossDomain) {
            s.contents.script = false;
        }
    });

    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function textScript(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });

    jQuery.ajaxPrefilter("script", function (s) {
        if (s.cache === undefined) {
            s.cache = false;
        }

        if (s.crossDomain) {
            s.type = "GET";
        }
    });

    jQuery.ajaxTransport("script", function (s) {
        if (s.crossDomain) {
            var script, _callback2;

            return {
                send: function send(_, complete) {
                    script = jQuery("<script>").prop({
                        charset: s.scriptCharset,
                        src: s.url
                    }).on("load error", _callback2 = function callback(evt) {
                        script.remove();
                        _callback2 = null;

                        if (evt) {
                            complete(evt.type === "error" ? 404 : 200, evt.type);
                        }
                    });

                    document.head.appendChild(script[0]);
                },
                abort: function abort() {
                    if (_callback2) {
                        _callback2();
                    }
                }
            };
        }
    });
    var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;

    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function jsonpCallback() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
            this[callback] = true;
            return callback;
        }
    });

    jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
        var callbackName,
            overwritten,
            responseContainer,
            jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

        if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }


            s.converters["script json"] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }

                return responseContainer[0];
            };


            s.dataTypes[0] = "json";

            overwritten = window[callbackName];

            window[callbackName] = function () {
                responseContainer = arguments;
            };


            jqXHR.always(function () {
                if (overwritten === undefined) {
                    jQuery(window).removeProp(callbackName);
                } else {
                    window[callbackName] = overwritten;
                }


                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;

                    oldCallbacks.push(callbackName);
                }


                if (responseContainer && isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }

                responseContainer = overwritten = undefined;
            });

            return "script";
        }
    });

    support.createHTMLDocument = function () {
        var body = document.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
    }();


    jQuery.parseHTML = function (data, context, keepScripts) {
        if (typeof data !== "string") {
            return [];
        }

        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }

        var base, parsed, scripts;

        if (!context) {
            if (support.createHTMLDocument) {
                context = document.implementation.createHTMLDocument("");

                base = context.createElement("base");
                base.href = document.location.href;
                context.head.appendChild(base);
            } else {
                context = document;
            }
        }

        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];

        if (parsed) {
            return [context.createElement(parsed[1])];
        }

        parsed = buildFragment([data], context, scripts);

        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }

        return jQuery.merge([], parsed.childNodes);
    };


    jQuery.fn.load = function (url, params, callback) {
        var selector,
            type,
            response,
            self = this,
            off = url.indexOf(" ");

        if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
        }


        if (isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && _typeof(params) === "object") {
            type = "POST";
        }


        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                type: type || "GET",
                dataType: "html",
                data: params
            }).done(function (responseText) {
                response = arguments;
                self.html(selector ?
                    jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :
                    responseText);
            }).always(callback && function (jqXHR, status) {
                self.each(function () {
                    callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
                });
            });
        }

        return this;
    };


    jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
        jQuery.fn[type] = function (fn) {
            return this.on(type, fn);
        };
    });

    jQuery.expr.pseudos.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
            return elem === fn.elem;
        }).length;
    };

    jQuery.offset = {
        setOffset: function setOffset(elem, options, i) {
            var curPosition,
                curLeft,
                curCSSTop,
                curTop,
                curOffset,
                curCSSLeft,
                calculatePosition,
                position = jQuery.css(elem, "position"),
                curElem = jQuery(elem),
                props = {};

            if (position === "static") {
                elem.style.position = "relative";
            }

            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }

            if (isFunction(options)) {
                options = options.call(elem, i, jQuery.extend({}, curOffset));
            }

            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }

            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }

            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        offset: function offset(options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function (i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }

            var rect,
                win,
                elem = this[0];

            if (!elem) {
                return;
            }


            if (!elem.getClientRects().length) {
                return {
                    top: 0,
                    left: 0
                };
            }


            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset
            };
        },
        position: function position() {
            if (!this[0]) {
                return;
            }

            var offsetParent,
                offset,
                doc,
                elem = this[0],
                parentOffset = {
                    top: 0,
                    left: 0
                };

            if (jQuery.css(elem, "position") === "fixed") {
                offset = elem.getBoundingClientRect();
            } else {
                offset = this.offset();

                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;

                while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
                    offsetParent = offsetParent.parentNode;
                }

                if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                    parentOffset = jQuery(offsetParent).offset();
                    parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
                    parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
                }
            }


            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        offsetParent: function offsetParent() {
            return this.map(function () {
                var offsetParent = this.offsetParent;

                while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
                    offsetParent = offsetParent.offsetParent;
                }

                return offsetParent || documentElement;
            });
        }
    });

    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function (method, prop) {
        var top = "pageYOffset" === prop;

        jQuery.fn[method] = function (val) {
            return access(this, function (elem, method, val) {
                var win;

                if (isWindow(elem)) {
                    win = elem;
                } else if (elem.nodeType === 9) {
                    win = elem.defaultView;
                }

                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }

                if (win) {
                    win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length);
        };
    });

    jQuery.each(["top", "left"], function (i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);

                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });

    jQuery.each({
        Height: "height",
        Width: "width"
    }, function (name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function (defaultExtra, funcName) {
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return access(this, function (elem, type, value) {
                    var doc;

                    if (isWindow(elem)) {
                        return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                    }


                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;

                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }

                    return value === undefined ?
                        jQuery.css(elem, type, extra) :
                        jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable);
            };
        });
    });
    jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {
        jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function hover(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });
    jQuery.fn.extend({
        bind: function bind(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function unbind(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function delegate(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function undelegate(selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });

    jQuery.proxy = function (fn, context) {
        var tmp, args, proxy;

        if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
        }


        if (!isFunction(fn)) {
            return undefined;
        }


        args = _slice.call(arguments, 2);

        proxy = function proxy() {
            return fn.apply(context || this, args.concat(_slice.call(arguments)));
        };


        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
    };

    jQuery.holdReady = function (hold) {
        if (hold) {
            jQuery.readyWait++;
        } else {
            jQuery.ready(true);
        }
    };

    jQuery.isArray = Array.isArray;
    jQuery.parseJSON = JSON.parse;
    jQuery.nodeName = nodeName;
    jQuery.isFunction = isFunction;
    jQuery.isWindow = isWindow;
    jQuery.camelCase = camelCase;
    jQuery.type = toType;
    jQuery.now = Date.now;

    jQuery.isNumeric = function (obj) {
        var type = jQuery.type(obj);
        return (type === "number" || type === "string") &&
            !isNaN(obj - parseFloat(obj));
    };


    if (typeof define === "function" && define.amd) {
        define("jquery", [], function () {
            return jQuery;
        });
    }

    var
        _jQuery = window.jQuery,
        _$ = window.$;

    jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }

        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }

        return jQuery;
    };


    if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
    }

    return jQuery;
});
jQuery.noConflict();
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.PerfectScrollbar = factory());
}(this, (function () { 'use strict';

  function get(element) {
    return getComputedStyle(element);
  }

  function set(element, obj) {
    for (var key in obj) {
      var val = obj[key];
      if (typeof val === 'number') {
        val = val + "px";
      }
      element.style[key] = val;
    }
    return element;
  }

  function div(className) {
    var div = document.createElement('div');
    div.className = className;
    return div;
  }

  var elMatches =
    typeof Element !== 'undefined' &&
    (Element.prototype.matches ||
      Element.prototype.webkitMatchesSelector ||
      Element.prototype.mozMatchesSelector ||
      Element.prototype.msMatchesSelector);

  function matches(element, query) {
    if (!elMatches) {
      throw new Error('No element matching method supported');
    }

    return elMatches.call(element, query);
  }

  function remove(element) {
    if (element.remove) {
      element.remove();
    } else {
      if (element.parentNode) {
        element.parentNode.removeChild(element);
      }
    }
  }

  function queryChildren(element, selector) {
    return Array.prototype.filter.call(element.children, function (child) { return matches(child, selector); }
    );
  }

  var cls = {
    main: 'ps',
    element: {
      thumb: function (x) { return ("ps__thumb-" + x); },
      rail: function (x) { return ("ps__rail-" + x); },
      consuming: 'ps__child--consume',
      content: 'ps__content',
    },
    state: {
      focus: 'ps--focus',
      clicking: 'ps--clicking',
      active: function (x,f) { return ("ps--active-" + x + "-" + (f?'double':'single')); },
      scrolling: function (x) { return ("ps--scrolling-" + x); },
    },
  };

  /*
   * Helper methods
   */
  var scrollingClassTimeout = { x: null, y: null };

  function addScrollingClass(i, x) {
    var classList = i.element.classList;
    var className = cls.state.scrolling(x);

    if (classList.contains(className)) {
      clearTimeout(scrollingClassTimeout[x]);
    } else {
      classList.add(className);
    }
  }

  function removeScrollingClass(i, x) {
    scrollingClassTimeout[x] = setTimeout(
      function () { return i.isAlive && i.element.classList.remove(cls.state.scrolling(x)); },
      i.settings.scrollingThreshold
    );
  }

  function setScrollingClassInstantly(i, x) {
    addScrollingClass(i, x);
    removeScrollingClass(i, x);
  }

  var EventElement = function EventElement(element) {
    this.element = element;
    this.handlers = {};
  };

  var prototypeAccessors = { isEmpty: { configurable: true } };

  EventElement.prototype.bind = function bind (eventName, handler) {
    if (typeof this.handlers[eventName] === 'undefined') {
      this.handlers[eventName] = [];
    }
    this.handlers[eventName].push(handler);
    this.element.addEventListener(eventName, handler, false);
  };

  EventElement.prototype.unbind = function unbind (eventName, target) {
      var this$1 = this;

    this.handlers[eventName] = this.handlers[eventName].filter(function (handler) {
      if (target && handler !== target) {
        return true;
      }
      this$1.element.removeEventListener(eventName, handler, false);
      return false;
    });
  };

  EventElement.prototype.unbindAll = function unbindAll () {
    for (var name in this.handlers) {
      this.unbind(name);
    }
  };

  prototypeAccessors.isEmpty.get = function () {
      var this$1 = this;

    return Object.keys(this.handlers).every(
      function (key) { return this$1.handlers[key].length === 0; }
    );
  };

  Object.defineProperties( EventElement.prototype, prototypeAccessors );

  var EventManager = function EventManager() {
    this.eventElements = [];
  };

  EventManager.prototype.eventElement = function eventElement (element) {
    var ee = this.eventElements.filter(function (ee) { return ee.element === element; })[0];
    if (!ee) {
      ee = new EventElement(element);
      this.eventElements.push(ee);
    }
    return ee;
  };

  EventManager.prototype.bind = function bind (element, eventName, handler) {
    this.eventElement(element).bind(eventName, handler);
  };

  EventManager.prototype.unbind = function unbind (element, eventName, handler) {
    var ee = this.eventElement(element);
    ee.unbind(eventName, handler);

    if (ee.isEmpty) {
      // remove
      this.eventElements.splice(this.eventElements.indexOf(ee), 1);
    }
  };

  EventManager.prototype.unbindAll = function unbindAll () {
    this.eventElements.forEach(function (e) { return e.unbindAll(); });
    this.eventElements = [];
  };

  EventManager.prototype.once = function once (element, eventName, handler) {
    var ee = this.eventElement(element);
    var onceHandler = function (evt) {
      ee.unbind(eventName, onceHandler);
      handler(evt);
    };
    ee.bind(eventName, onceHandler);
  };

  function createEvent(name) {
    if (typeof window.CustomEvent === 'function') {
      return new CustomEvent(name);
    } else {
      var evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(name, false, false, undefined);
      return evt;
    }
  }

  function processScrollDiff(
    i,
    axis,
    diff,
    useScrollingClass,
    forceFireReachEvent
  ) {
    if ( useScrollingClass === void 0 ) useScrollingClass = true;
    if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;

    var fields;
    if (axis === 'top') {
      fields = [
        'contentHeight',
        'containerHeight',
        'scrollTop',
        'y',
        'up',
        'down' ];
    } else if (axis === 'left') {
      fields = [
        'contentWidth',
        'containerWidth',
        'scrollLeft',
        'x',
        'left',
        'right' ];
    } else {
      throw new Error('A proper axis should be provided');
    }

    processScrollDiff$1(i, diff, fields, useScrollingClass, forceFireReachEvent);
  }

  function processScrollDiff$1(
    i,
    diff,
    ref,
    useScrollingClass,
    forceFireReachEvent
  ) {
    var contentHeight = ref[0];
    var containerHeight = ref[1];
    var scrollTop = ref[2];
    var y = ref[3];
    var up = ref[4];
    var down = ref[5];
    if ( useScrollingClass === void 0 ) useScrollingClass = true;
    if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;

    var element = i.element;

    // reset reach
    i.reach[y] = null;

    // 1 for subpixel rounding
    if (element[scrollTop] < 1) {
      i.reach[y] = 'start';
    }

    // 1 for subpixel rounding
    if (element[scrollTop] > i[contentHeight] - i[containerHeight] - 1) {
      i.reach[y] = 'end';
    }

    if (diff) {
      element.dispatchEvent(createEvent(("ps-scroll-" + y)));

      if (diff < 0) {
        element.dispatchEvent(createEvent(("ps-scroll-" + up)));
      } else if (diff > 0) {
        element.dispatchEvent(createEvent(("ps-scroll-" + down)));
      }

      if (useScrollingClass) {
        setScrollingClassInstantly(i, y);
      }
    }

    if (i.reach[y] && (diff || forceFireReachEvent)) {
      element.dispatchEvent(createEvent(("ps-" + y + "-reach-" + (i.reach[y]))));
    }
  }

  function toInt(x) {
    return parseInt(x, 10) || 0;
  }

  function isEditable(el) {
    return (
      matches(el, 'input,[contenteditable]') ||
      matches(el, 'select,[contenteditable]') ||
      matches(el, 'textarea,[contenteditable]') ||
      matches(el, 'button,[contenteditable]')
    );
  }

  function outerWidth(element) {
    var styles = get(element);
    return (
      toInt(styles.width) +
      toInt(styles.paddingLeft) +
      toInt(styles.paddingRight) +
      toInt(styles.borderLeftWidth) +
      toInt(styles.borderRightWidth)
    );
  }

  var env = {
    isWebKit:
      typeof document !== 'undefined' &&
      'WebkitAppearance' in document.documentElement.style,
    supportsTouch:
      typeof window !== 'undefined' &&
      ('ontouchstart' in window ||
        (window.DocumentTouch && document instanceof window.DocumentTouch)),
    supportsIePointer:
      typeof navigator !== 'undefined' && navigator.msMaxTouchPoints,
    isChrome:
      typeof navigator !== 'undefined' &&
      /Chrome/i.test(navigator && navigator.userAgent),
  };

  function updateGeometry(i) {
    var element = i.element;
    var roundedScrollTop = Math.floor(element.scrollTop);

    var rect = element.getBoundingClientRect();
    i.containerWidth = rect.width;
    i.containerHeight = rect.height;
    rect = i.content.getBoundingClientRect();
    i.contentWidth = rect.width;
    i.contentHeight = rect.height;

    if (!element.contains(i.scrollbarXBRail)) {
      // clean up and append
      queryChildren(element, cls.element.rail('x-bottom')).forEach(function (el) { return remove(el); }
      );
      element.appendChild(i.scrollbarXBRail);
    }
    if (!element.contains(i.scrollbarXTRail)) {
      // clean up and append
      queryChildren(element, cls.element.rail('x-top')).forEach(function (el) { return remove(el); }
      );
      element.appendChild(i.scrollbarXTRail);
    }
    if (!element.contains(i.scrollbarYRail)) {
      // clean up and append
      queryChildren(element, cls.element.rail('y')).forEach(function (el) { return remove(el); }
      );
      element.appendChild(i.scrollbarYRail);
    }

    if (
      !i.settings.suppressScrollX &&
      i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth
    ) {
      i.scrollbarXActive = true;
      i.railXBWidth = i.containerWidth - i.railXBMarginWidth;
      i.railXTWidth = i.containerWidth - i.railXTMarginWidth;
      i.railXBRatio = i.containerWidth / i.railXBWidth;
      i.railXTRatio = i.containerWidth / i.railXTWidth;
      i.scrollbarXBWidth = getThumbSize(
        i,
        toInt(i.railXBWidth * i.containerWidth / i.contentWidth)
      );
      i.scrollbarXTWidth = getThumbSize(
        i,
        toInt(i.railXTWidth * i.containerWidth / i.contentWidth)
      );
      i.scrollbarXBLeft = toInt(
        (i.negativeScrollAdjustment + element.scrollLeft) *
          (i.railXBWidth - i.scrollbarXBWidth) /
          (i.contentWidth - i.containerWidth)
      );
      i.scrollbarXTLeft = toInt(
        (i.negativeScrollAdjustment + element.scrollLeft) *
          (i.railXTWidth - i.scrollbarXTWidth) /
          (i.contentWidth - i.containerWidth)
      );
    } else {
      i.scrollbarXActive = false;
    }

    if (
      !i.settings.suppressScrollY &&
      i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight
    ) {
      i.scrollbarYActive = true;
      i.railYHeight = i.containerHeight - i.railYMarginHeight;
      i.railYRatio = i.containerHeight / i.railYHeight;
      i.scrollbarYHeight = getThumbSize(
        i,
        toInt(i.railYHeight * i.containerHeight / i.contentHeight)
      );
      i.scrollbarYTop = toInt(
        roundedScrollTop *
          (i.railYHeight - i.scrollbarYHeight) /
          (i.contentHeight - i.containerHeight)
      );
    } else {
      i.scrollbarYActive = false;
    }

    if (i.scrollbarXBLeft >= i.railXBWidth - i.scrollbarXBWidth) {
      i.scrollbarXBLeft = i.railXBWidth - i.scrollbarXBWidth;
    }
    if (i.scrollbarXTLeft >= i.railXTWidth - i.scrollbarXTWidth) {
      i.scrollbarXTLeft = i.railXTWidth - i.scrollbarXTWidth;
    }
    if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {
      i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;
    }

    updateCss(element, i);

    if (i.scrollbarXActive) {
      element.classList.add(cls.state.active('x', i.settings.isDoubleXScrollbar));
    } else {
      element.classList.remove(cls.state.active('x', i.settings.isDoubleXScrollbar));
      i.scrollbarXBWidth = 0;
      i.scrollbarXTWidth = 0;
      i.scrollbarXBLeft = 0;
      i.scrollbarXTLeft = 0;
      element.scrollLeft = 0;
    }
    if (i.scrollbarYActive) {
      element.classList.add(cls.state.active('y'));
    } else {
      element.classList.remove(cls.state.active('y'));
      i.scrollbarYHeight = 0;
      i.scrollbarYTop = 0;
      element.scrollTop = 0;
    }
  }

  function getThumbSize(i, thumbSize) {
    if (i.settings.minScrollbarLength) {
      thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);
    }
    if (i.settings.maxScrollbarLength) {
      thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);
    }
    return thumbSize;
  }

  function updateCss(element, i) {
    var xBRailOffset = { width: i.railXBWidth };
    var xTRailOffset = { width: i.railXTWidth };
    var roundedScrollTop = Math.floor(element.scrollTop);

    if (i.isRtl) {
      xBRailOffset.left =
        i.negativeScrollAdjustment +
        element.scrollLeft +
        i.containerWidth -
        i.contentWidth;
    } else {
      xBRailOffset.left = element.scrollLeft;
    }
    if (i.isScrollbarXBUsingBottom) {
      xBRailOffset.bottom = i.scrollbarXBBottom - roundedScrollTop;
    } else {
      xBRailOffset.top = i.scrollbarXBTop + roundedScrollTop;
    }
    set(i.scrollbarXBRail, xBRailOffset);

    if (i.isRtl) {
      xTRailOffset.left =
        i.negativeScrollAdjustment +
        element.scrollLeft +
        i.containerWidth -
        i.contentWidth;
    } else {
      xTRailOffset.left = element.scrollLeft;
    }
    if (i.isScrollbarXTUsingTop) {
      xTRailOffset.top = i.scrollbarXTTop + roundedScrollTop;
    } else {
      xTRailOffset.bottom = i.scrollbarXTBottom - roundedScrollTop;
    }
    set(i.scrollbarXTRail, xTRailOffset);

    var yRailOffset = { top: roundedScrollTop, height: i.railYHeight };
    if (i.isScrollbarYUsingRight) {
      if (i.isRtl) {
        yRailOffset.right =
          i.contentWidth -
          (i.negativeScrollAdjustment + element.scrollLeft) -
          i.scrollbarYRight -
          i.scrollbarYOuterWidth;
      } else {
        yRailOffset.right = i.scrollbarYRight - element.scrollLeft;
      }
    } else {
      if (i.isRtl) {
        yRailOffset.left =
          i.negativeScrollAdjustment +
          element.scrollLeft +
          i.containerWidth * 2 -
          i.contentWidth -
          i.scrollbarYLeft -
          i.scrollbarYOuterWidth;
      } else {
        yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;
      }
    }
    set(i.scrollbarYRail, yRailOffset);

    set(i.scrollbarXB, {
      left: i.scrollbarXBLeft,
      width: i.scrollbarXBWidth - i.railBorderXBWidth,
    });
    set(i.scrollbarXT, {
      left: i.scrollbarXTLeft,
      width: i.scrollbarXTWidth - i.railBorderXTWidth,
    });
    set(i.scrollbarY, {
      top: i.scrollbarYTop,
      height: i.scrollbarYHeight - i.railBorderYWidth,
    });
  }

  function clickRail(i) {
    var element = i.element;

    i.event.bind(i.scrollbarY, 'mousedown', function (e) { return e.stopPropagation(); });
    i.event.bind(i.scrollbarYRail, 'mousedown', function (e) {
      var positionTop =
        e.pageY -
        window.pageYOffset -
        i.scrollbarYRail.getBoundingClientRect().top;
      var direction = positionTop > i.scrollbarYTop ? 1 : -1;

      i.element.scrollTop += direction * i.containerHeight;
      updateGeometry(i);

      e.stopPropagation();
    });

    i.event.bind(i.scrollbarXB, 'mousedown', function (e) { return e.stopPropagation(); });
    i.event.bind(i.scrollbarXBRail, 'mousedown', function (e) {
      var positionLeft =
        e.pageX -
        window.pageXOffset -
        i.scrollbarXBRail.getBoundingClientRect().left;
      var direction = positionLeft > i.scrollbarXBLeft ? 1 : -1;

      i.element.scrollLeft += direction * i.containerWidth;
      updateGeometry(i);

      e.stopPropagation();
    });

    i.event.bind(i.scrollbarXT, 'mousedown', function (e) { return e.stopPropagation(); });
    i.event.bind(i.scrollbarXTRail, 'mousedown', function (e) {
      var positionLeft =
        e.pageX -
        window.pageXOffset -
        i.scrollbarXTRail.getBoundingClientRect().left;
      var direction = positionLeft > i.scrollbarXTLeft ? 1 : -1;

      i.element.scrollLeft += direction * i.containerWidth;
      updateGeometry(i);

      e.stopPropagation();
    });
  }

  function dragThumb(i) {
    bindMouseScrollHandler(i, [
      'containerWidth',
      'contentWidth',
      'pageX',
      'railXBWidth',
      'scrollbarXB',
      'scrollbarXBWidth',
      'scrollLeft',
      'x-bottom',
      'scrollbarXBRail' ]);
    bindMouseScrollHandler(i, [
      'containerWidth',
      'contentWidth',
      'pageX',
      'railXTWidth',
      'scrollbarXT',
      'scrollbarXTWidth',
      'scrollLeft',
      'x-top',
      'scrollbarXTRail' ]);
    bindMouseScrollHandler(i, [
      'containerHeight',
      'contentHeight',
      'pageY',
      'railYHeight',
      'scrollbarY',
      'scrollbarYHeight',
      'scrollTop',
      'y',
      'scrollbarYRail' ]);
  }

  function bindMouseScrollHandler(
    i,
    ref
  ) {
    var containerHeight = ref[0];
    var contentHeight = ref[1];
    var pageY = ref[2];
    var railYHeight = ref[3];
    var scrollbarY = ref[4];
    var scrollbarYHeight = ref[5];
    var scrollTop = ref[6];
    var y = ref[7];
    var scrollbarYRail = ref[8];

    var element = i.element;

    var startingScrollTop = null;
    var startingMousePageY = null;
    var scrollBy = null;

    function mouseMoveHandler(e) {
      var maxScrollTop = Math.ceil(i[contentHeight] - i[containerHeight]);
      var scroll = startingScrollTop + scrollBy * (e[pageY] - startingMousePageY);
      if (maxScrollTop < scroll) {
        scroll = maxScrollTop;
      }
      element[scrollTop] = scroll;

      addScrollingClass(i, y);
      updateGeometry(i);

      e.stopPropagation();
      e.preventDefault();
    }

    function mouseUpHandler() {
      removeScrollingClass(i, y);
      i[scrollbarYRail].classList.remove(cls.state.clicking);
      i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
    }

    i.event.bind(i[scrollbarY], 'mousedown', function (e) {
      startingScrollTop = element[scrollTop];
      startingMousePageY = e[pageY];
      scrollBy =
        (i[contentHeight] - i[containerHeight]) /
        (i[railYHeight] - i[scrollbarYHeight]);

      i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
      i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);

      i[scrollbarYRail].classList.add(cls.state.clicking);

      e.stopPropagation();
      e.preventDefault();
    });
  }

  function keyboard(i) {
    var element = i.element;

    var elementHovered = function () { return matches(element, ':hover'); };
    var scrollbarFocused = function () { return matches(i.scrollbarXB, ':focus') || matches(i.scrollbarXT, ':focus') || matches(i.scrollbarY, ':focus'); };

    function shouldPreventDefault(deltaX, deltaY) {
      var scrollTop = Math.floor(element.scrollTop);
      if (deltaX === 0) {
        if (!i.scrollbarYActive) {
          return false;
        }
        if (
          (scrollTop === 0 && deltaY > 0) ||
          (scrollTop >= Math.floor(i.contentHeight - i.containerHeight) && deltaY < 0)
        ) {
          return !i.settings.wheelPropagation;
        }
      }

      var scrollLeft = element.scrollLeft;
      if (deltaY === 0) {
        if (!i.scrollbarXActive) {
          return false;
        }
        if (
          (scrollLeft === 0 && deltaX < 0) ||
          (scrollLeft >= Math.floor(i.contentWidth - i.containerWidth) && deltaX > 0)
        ) {
          return !i.settings.wheelPropagation;
        }
      }
      return true;
    }

    i.event.bind(i.ownerDocument, 'keydown', function (e) {
      if (
        (e.isDefaultPrevented && e.isDefaultPrevented()) ||
        e.defaultPrevented
      ) {
        return;
      }

      if (!elementHovered() && !scrollbarFocused()) {
        return;
      }

      var activeElement = document.activeElement
        ? document.activeElement
        : i.ownerDocument.activeElement;
      if (activeElement) {
        if (activeElement.tagName === 'IFRAME') {
          activeElement = activeElement.contentDocument.activeElement;
        } else {
          // go deeper if element is a webcomponent
          while (activeElement.shadowRoot) {
            activeElement = activeElement.shadowRoot.activeElement;
          }
        }
        if (isEditable(activeElement)) {
          return;
        }
      }

      var deltaX = 0;
      var deltaY = 0;

      switch (e.which) {
        case 37: // left
          if (e.metaKey) {
            deltaX = -i.contentWidth;
          } else if (e.altKey) {
            deltaX = -i.containerWidth;
          } else {
            deltaX = -30;
          }
          break;
        case 38: // up
          if (e.metaKey) {
            deltaY = i.contentHeight;
          } else if (e.altKey) {
            deltaY = i.containerHeight;
          } else {
            deltaY = 30;
          }
          break;
        case 39: // right
          if (e.metaKey) {
            deltaX = i.contentWidth;
          } else if (e.altKey) {
            deltaX = i.containerWidth;
          } else {
            deltaX = 30;
          }
          break;
        case 40: // down
          if (e.metaKey) {
            deltaY = -i.contentHeight;
          } else if (e.altKey) {
            deltaY = -i.containerHeight;
          } else {
            deltaY = -30;
          }
          break;
        case 32: // space bar
          if (e.shiftKey) {
            deltaY = i.containerHeight;
          } else {
            deltaY = -i.containerHeight;
          }
          break;
        case 33: // page up
          deltaY = i.containerHeight;
          break;
        case 34: // page down
          deltaY = -i.containerHeight;
          break;
        case 36: // home
          deltaY = i.contentHeight;
          break;
        case 35: // end
          deltaY = -i.contentHeight;
          break;
        default:
          return;
      }

      if (i.settings.suppressScrollX && deltaX !== 0) {
        return;
      }
      if (i.settings.suppressScrollY && deltaY !== 0) {
        return;
      }

      element.scrollTop -= deltaY;
      element.scrollLeft += deltaX;
      updateGeometry(i);

      if (shouldPreventDefault(deltaX, deltaY)) {
        e.preventDefault();
      }
    });
  }

  function wheel(i) {
    var element = i.element;

    function shouldPreventDefault(deltaX, deltaY) {
      var elementRect = element.getBoundingClientRect();
      var contentRect = i.content.getBoundingClientRect();
      var isTop = element.scrollTop === 0;
      var isBottom =
        element.scrollTop + elementRect.height >= contentRect.height;
      var isLeft = element.scrollLeft === 0;
      var isRight =
        element.scrollLeft + elementRect.width >= contentRect.width;

      var hitsBound;

      // pick axis with primary direction
      if (Math.abs(deltaY) > Math.abs(deltaX)) {
        hitsBound = isTop || isBottom;
      } else {
        hitsBound = isLeft || isRight;
      }

      return hitsBound ? !i.settings.wheelPropagation : true;
    }

    function getDeltaFromEvent(e) {
      var deltaX = e.deltaX;
      var deltaY = -1 * e.deltaY;

      if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {
        // OS X Safari
        deltaX = -1 * e.wheelDeltaX / 6;
        deltaY = e.wheelDeltaY / 6;
      }

      if (e.deltaMode && e.deltaMode === 1) {
        // Firefox in deltaMode 1: Line scrolling
        deltaX *= 10;
        deltaY *= 10;
      }

      if (deltaX !== deltaX && deltaY !== deltaY /* NaN checks */) {
        // IE in some mouse drivers
        deltaX = 0;
        deltaY = e.wheelDelta;
      }

      if (e.shiftKey) {
        // reverse axis with shift key
        return [-deltaY, -deltaX];
      }
      return [deltaX, deltaY];
    }

    function shouldBeConsumedByChild(target, deltaX, deltaY) {
      // FIXME: this is a workaround for <select> issue in FF and IE #571
      if (!env.isWebKit && element.querySelector('select:focus')) {
        return true;
      }

      if (!element.contains(target)) {
        return false;
      }

      var cursor = target;

      while (cursor && cursor !== element) {
        if (cursor.classList.contains(cls.element.consuming)) {
          return true;
        }

        var style = get(cursor);
        var overflow = [style.overflow, style.overflowX, style.overflowY].join(
          ''
        );

        // if scrollable
        if (overflow.match(/(scroll|auto)/)) {
          var maxScrollTop = Math.ceil(cursor.scrollHeight - cursor.clientHeight);
          if (maxScrollTop > 0) {
            if (
              !(cursor.scrollTop === 0 && deltaY > 0) &&
              !(cursor.scrollTop >= maxScrollTop && deltaY < 0)
            ) {
              return true;
            }
          }
          var maxScrollLeft = Math.ceil(cursor.scrollWidth - cursor.clientWidth);
          if (maxScrollLeft > 0) {
            if (
              !(cursor.scrollLeft === 0 && deltaX < 0) &&
              !(cursor.scrollLeft >= maxScrollLeft && deltaX > 0)
            ) {
              return true;
            }
          }
        }

        cursor = cursor.parentNode;
      }

      return false;
    }

    function mousewheelHandler(e) {
      var ref = getDeltaFromEvent(e);
      var deltaX = ref[0];
      var deltaY = ref[1];

      if (shouldBeConsumedByChild(e.target, deltaX, deltaY)) {
        return;
      }

      var maxScrollLeft = Math.ceil(i.contentWidth - i.containerWidth);
      var maxScrollTop = Math.ceil(i.contentHeight - i.containerHeight);
      var shouldPrevent = false;
      if (!i.settings.useBothWheelAxes) {
        // deltaX will only be used for horizontal scrolling and deltaY will
        // only be used for vertical scrolling - this is the default
        var scrollTop = element.scrollTop - (deltaY * i.settings.wheelSpeed);
        if (maxScrollTop < scrollTop) {
          scrollTop = maxScrollTop;
        }
        element.scrollTop = scrollTop;
        var scrollLeft = element.scrollLeft + (deltaX * i.settings.wheelSpeed);
        if (maxScrollLeft < scrollLeft) {
          scrollLeft = maxScrollLeft;
        }
        element.scrollLeft = scrollLeft;
      }
      else if (i.scrollbarYActive && !i.scrollbarXActive) {
        // only vertical scrollbar is active and useBothWheelAxes option is
        // active, so let's scroll vertical bar using both mouse wheel axes
        if (deltaY) {
          var scrollTop$1 = element.scrollTop - (deltaY * i.settings.wheelSpeed);
          if (maxScrollTop < scrollTop$1) {
            scrollTop$1 = maxScrollTop;
          }
          element.scrollTop = scrollTop$1;
        }
        else {
          var scrollTop$2 = element.scrollTop + (deltaX * i.settings.wheelSpeed);
          if (maxScrollTop < scrollTop$2) {
            scrollTop$2 = maxScrollTop;
          }
          element.scrollTop = scrollTop$2;
        }
        shouldPrevent = true;
      }
      else if (i.scrollbarXActive && !i.scrollbarYActive) {
        // useBothWheelAxes and only horizontal bar is active, so use both
        // wheel axes for horizontal bar
        if (deltaX) {
          var scrollLeft$1 = element.scrollLeft + (deltaX * i.settings.wheelSpeed);
          if (maxScrollLeft < scrollLeft$1) {
            scrollLeft$1 = maxScrollLeft;
          }
          element.scrollLeft = scrollLeft$1;
        }
        else {
          var scrollLeft$2 = element.scrollLeft - (deltaY * i.settings.wheelSpeed);
          if (maxScrollLeft < scrollLeft$2) {
            scrollLeft$2 = maxScrollLeft;
          }
          element.scrollLeft = scrollLeft$2;
        }
        shouldPrevent = true;
      }

      updateGeometry(i);

      shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);
      if (shouldPrevent && !e.ctrlKey) {
        e.stopPropagation();
        e.preventDefault();
      }
    }

    if (typeof window.onwheel !== 'undefined') {
      i.event.bind(element, 'wheel', mousewheelHandler);
    } else if (typeof window.onmousewheel !== 'undefined') {
      i.event.bind(element, 'mousewheel', mousewheelHandler);
    }
  }

  function touch(i) {
    if (!env.supportsTouch && !env.supportsIePointer) {
      return;
    }

    var element = i.element;

    function shouldPrevent(deltaX, deltaY) {
      var scrollTop = element.scrollTop;
      var scrollLeft = element.scrollLeft;
      var magnitudeX = Math.abs(deltaX);
      var magnitudeY = Math.abs(deltaY);

      var maxScrollTop = Math.floor(i.contentHeight - i.containerHeight);
      var maxScrollLeft = Math.floor(i.contentWidth - i.containerWidth);
      if (magnitudeY > magnitudeX) {
        // user is perhaps trying to swipe up/down the page

        if (
          (deltaY < 0 && scrollTop >= maxScrollTop) ||
          (deltaY > 0 && scrollTop === 0)
        ) {
          return false;
        }
      } else if (magnitudeX > magnitudeY) {
        // user is perhaps trying to swipe left/right across the page

        if (
          (deltaX < 0 && scrollLeft >= maxScrollLeft) ||
          (deltaX > 0 && scrollLeft === 0)
        ) {
          return false;
        }
      } else {
        if (
          (
            (deltaY < 0 && scrollTop >= maxScrollTop) ||
            (deltaY > 0 && scrollTop === 0)
          )
          &&
          (
            (deltaX < 0 && scrollLeft >= maxScrollLeft) ||
            (deltaX > 0 && scrollLeft === 0)
          )
        ) {
          return false;
        }
      }

      return true;
    }

    function applyTouchMove(differenceX, differenceY) {
      element.scrollTop -= differenceY;
      element.scrollLeft -= differenceX;

      updateGeometry(i);
    }

    var startOffset = {};
    var startTime = 0;
    var speed = {};
    var easingLoop = null;

    function getTouch(e) {
      if (e.targetTouches) {
        return e.targetTouches[0];
      } else {
        // Maybe IE pointer
        return e;
      }
    }

    function shouldHandle(e) {
      if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {
        return false;
      }
      if (e.targetTouches && e.targetTouches.length === 1) {
        return true;
      }
      if (
        e.pointerType &&
        e.pointerType !== 'mouse' &&
        e.pointerType !== e.MSPOINTER_TYPE_MOUSE
      ) {
        return true;
      }
      return false;
    }

    function touchStart(e) {
      if (!shouldHandle(e)) {
        return;
      }

      var touch = getTouch(e);

      startOffset.pageX = touch.pageX;
      startOffset.pageY = touch.pageY;

      startTime = new Date().getTime();

      if (easingLoop !== null) {
        clearInterval(easingLoop);
      }
    }

    function shouldBeConsumedByChild(target, deltaX, deltaY) {
      if (!element.contains(target)) {
        return false;
      }

      var cursor = target;

      while (cursor && cursor !== element) {
        if (cursor.classList.contains(cls.element.consuming)) {
          return true;
        }

        var style = get(cursor);
        var overflow = [style.overflow, style.overflowX, style.overflowY].join(
          ''
        );

        // if scrollable
        if (overflow.match(/(scroll|auto)/)) {
          var maxScrollTop = Math.ceil(cursor.scrollHeight - cursor.clientHeight);
          if (maxScrollTop > 0) {
            if (
              !(cursor.scrollTop === 0 && deltaY > 0) &&
              !(cursor.scrollTop >= maxScrollTop && deltaY < 0)
            ) {
              return true;
            }
          }
          var maxScrollLeft = Math.ceil(cursor.scrollWidth - cursor.clientWidth);
          if (maxScrollLeft > 0) {
            if (
              !(cursor.scrollLeft === 0 && deltaX < 0) &&
              !(cursor.scrollLeft >= maxScrollLeft && deltaX > 0)
            ) {
              return true;
            }
          }
        }

        cursor = cursor.parentNode;
      }

      return false;
    }

    function touchMove(e) {
      if (!e.cancelable) {
        return;
      }

      if (e.touches && (e.touches.length > 1)) {
        return;
      }

      if (shouldHandle(e)) {
        var touch = getTouch(e);

        var currentOffset = { pageX: touch.pageX, pageY: touch.pageY };

        var differenceX = currentOffset.pageX - startOffset.pageX;
        var differenceY = currentOffset.pageY - startOffset.pageY;

        if (shouldBeConsumedByChild(e.target, differenceX, differenceY)) {
          return;
        }

        applyTouchMove(differenceX, differenceY);
        startOffset = currentOffset;

        var currentTime = new Date().getTime();

        var timeGap = currentTime - startTime;
        if (timeGap > 0) {
          speed.x = differenceX / timeGap;
          speed.y = differenceY / timeGap;
          startTime = currentTime;
        }

        if (shouldPrevent(differenceX, differenceY)) {
          e.preventDefault();
        }
      }
    }
    function touchEnd() {
      if (i.settings.swipeEasing) {
        clearInterval(easingLoop);
        easingLoop = setInterval(function() {
          if (i.isInitialized) {
            clearInterval(easingLoop);
            return;
          }

          if (!speed.x && !speed.y) {
            clearInterval(easingLoop);
            return;
          }

          if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {
            clearInterval(easingLoop);
            return;
          }

          applyTouchMove(speed.x * 30, speed.y * 30);

          speed.x *= 0.8;
          speed.y *= 0.8;
        }, 10);
      }
    }

    if (env.supportsTouch) {
      i.event.bind(element, 'touchstart', touchStart);
      i.event.bind(element, 'touchmove', touchMove);
      i.event.bind(element, 'touchend', touchEnd);
    } else if (env.supportsIePointer) {
      if (window.PointerEvent) {
        i.event.bind(element, 'pointerdown', touchStart);
        i.event.bind(element, 'pointermove', touchMove);
        i.event.bind(element, 'pointerup', touchEnd);
      } else if (window.MSPointerEvent) {
        i.event.bind(element, 'MSPointerDown', touchStart);
        i.event.bind(element, 'MSPointerMove', touchMove);
        i.event.bind(element, 'MSPointerUp', touchEnd);
      }
    }
  }

  function drag(i) {
    var element = i.element;

    var startOffset = {};
    var startingScrollLeft = null;
    var startingScrollTop = null;

    function mouseMoveHandler(e) {
      var scrollLeft = startingScrollLeft - (e.pageX - startOffset.pageX);
      var maxScrollLeft = Math.ceil(i.contentWidth - i.containerWidth);
      if (maxScrollLeft < scrollLeft) {
        scrollLeft = maxScrollLeft;
      }
      element.scrollLeft = scrollLeft;
      var scrollTop = startingScrollTop - (e.pageY - startOffset.pageY);
      var maxScrollTop = Math.ceil(i.contentHeight - i.containerHeight);
      if (maxScrollTop < scrollTop) {
        scrollTop = maxScrollTop;
      }
      element.scrollTop = scrollTop;
      updateGeometry(i);
    }

    function mouseUpHandler() {
      i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
    }

    i.event.bind(element, 'mousedown', function (e) {
      startOffset.pageX = e.pageX;
      startOffset.pageY = e.pageY;
      startingScrollLeft = element.scrollLeft;
      startingScrollTop = element.scrollTop;

      i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
      i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);
    });
  }

  var defaultSettings = function () { return ({
    handlers: ['click-rail', 'drag-thumb', 'keyboard', 'wheel', 'touch', 'drag'],
    maxScrollbarLength: null,
    minScrollbarLength: null,
    scrollingThreshold: 1000,
    scrollXMarginOffset: 0,
    scrollYMarginOffset: 0,
    suppressScrollX: false,
    suppressScrollY: false,
    swipeEasing: true,
    useBothWheelAxes: false,
    wheelPropagation: true,
    wheelSpeed: 1,
    isDoubleXScrollbar: true,
  }); };

  var handlers = {
    'click-rail': clickRail,
    'drag-thumb': dragThumb,
    keyboard: keyboard,
    wheel: wheel,
    touch: touch,
    drag: drag,
  };

  var PerfectScrollbar = function PerfectScrollbar(element, userSettings) {
    var this$1 = this;
    if ( userSettings === void 0 ) userSettings = {};

    if (typeof element === 'string') {
      element = document.querySelector(element);
    }

    if (!element || !element.nodeName) {
      throw new Error('no element is specified to initialize PerfectScrollbar');
    }

    this.content = div(cls.element.content);
    while (element.firstChild) {
      this.content.appendChild(element.firstChild);
    }
    element.appendChild(this.content);

    this.element = element;

    element.classList.add(cls.main);

    this.settings = defaultSettings();
    for (var key in userSettings) {
      this.settings[key] = userSettings[key];
    }

    this.containerWidth = null;
    this.containerHeight = null;
    this.contentWidth = null;
    this.contentHeight = null;

    var focus = function () { return element.classList.add(cls.state.focus); };
    var blur = function () { return element.classList.remove(cls.state.focus); };

    this.isRtl = get(element).direction === 'rtl';
    this.isNegativeScroll = (function () {
      var originalScrollLeft = element.scrollLeft;
      var result = null;
      element.scrollLeft = -1;
      result = element.scrollLeft < 0;
      element.scrollLeft = originalScrollLeft;
      return result;
    })();
    this.negativeScrollAdjustment = this.isNegativeScroll
      ? this.content.getBoundingClientRect().width - this.element.getBoundingClientRect().width
      : 0;
    this.event = new EventManager();
    this.ownerDocument = element.ownerDocument || document;

    this.scrollbarXBRail = div(cls.element.rail('x-bottom'));
    this.scrollbarXTRail = div(cls.element.rail('x-top'));
    element.appendChild(this.scrollbarXBRail);
    element.appendChild(this.scrollbarXTRail);
    this.scrollbarXB = div(cls.element.thumb('x-bottom'));
    this.scrollbarXT = div(cls.element.thumb('x-top'));
    this.scrollbarXBRail.appendChild(this.scrollbarXB);
    this.scrollbarXTRail.appendChild(this.scrollbarXT);
    this.scrollbarXB.setAttribute('tabindex', 0);
    this.scrollbarXT.setAttribute('tabindex', 0);
    this.event.bind(this.scrollbarXB, 'focus', focus);
    this.event.bind(this.scrollbarXT, 'focus', focus);
    this.event.bind(this.scrollbarXB, 'blur', blur);
    this.event.bind(this.scrollbarXT, 'blur', blur);
    this.scrollbarXActive = null;
    this.scrollbarXBWidth = null;
    this.scrollbarXTWidth = null;
    this.scrollbarXBLeft = null;
    this.scrollbarXTLeft = null;
    var railXBStyle = get(this.scrollbarXBRail);
    var railXTStyle = get(this.scrollbarXTRail);
    this.scrollbarXBBottom = parseInt(railXBStyle.bottom, 10);
    this.scrollbarXTTop = parseInt(railXTStyle.top, 10);
    if (isNaN(this.scrollbarXBBottom)) {
      this.isScrollbarXBUsingBottom = false;
      this.scrollbarXBTop = toInt(railXBStyle.top);
    } else {
      this.isScrollbarXBUsingBottom = true;
    }
    if (isNaN(this.scrollbarXTTop)) {
      this.isScrollbarXTUsingTop = false;
      this.scrollbarXTBottom = toInt(railXTStyle.bottom);
    } else {
      this.isScrollbarXTUsingTop = true;
    }
    this.railBorderXBWidth = toInt(railXBStyle.borderLeftWidth) + toInt(railXBStyle.borderRightWidth);
    this.railBorderXTWidth = toInt(railXTStyle.borderLeftWidth) + toInt(railXTStyle.borderRightWidth);
    // Set rail to display:block to calculate margins
    set(this.scrollbarXBRail, { display: 'block' });
    set(this.scrollbarXTRail, { display: 'block' });
    this.railXBMarginWidth = toInt(railXBStyle.marginLeft) + toInt(railXBStyle.marginRight);
    this.railXTMarginWidth = toInt(railXTStyle.marginLeft) + toInt(railXTStyle.marginRight);
    set(this.scrollbarXBRail, { display: '' });
    set(this.scrollbarXTRail, { display: '' });
    this.railXBWidth = null;
    this.railXTWidth = null;
    this.railXBRatio = null;
    this.railXTRatio = null;

    this.scrollbarYRail = div(cls.element.rail('y'));
    element.appendChild(this.scrollbarYRail);
    this.scrollbarY = div(cls.element.thumb('y'));
    this.scrollbarYRail.appendChild(this.scrollbarY);
    this.scrollbarY.setAttribute('tabindex', 0);
    this.event.bind(this.scrollbarY, 'focus', focus);
    this.event.bind(this.scrollbarY, 'blur', blur);
    this.scrollbarYActive = null;
    this.scrollbarYHeight = null;
    this.scrollbarYTop = null;
    var railYStyle = get(this.scrollbarYRail);
    this.scrollbarYRight = parseInt(railYStyle.right, 10);
    if (isNaN(this.scrollbarYRight)) {
      this.isScrollbarYUsingRight = false;
      this.scrollbarYLeft = toInt(railYStyle.left);
    } else {
      this.isScrollbarYUsingRight = true;
    }
    this.scrollbarYOuterWidth = this.isRtl ? outerWidth(this.scrollbarY) : null;
    this.railBorderYWidth =
      toInt(railYStyle.borderTopWidth) + toInt(railYStyle.borderBottomWidth);
    set(this.scrollbarYRail, { display: 'block' });
    this.railYMarginHeight =
      toInt(railYStyle.marginTop) + toInt(railYStyle.marginBottom);
    set(this.scrollbarYRail, { display: '' });
    this.railYHeight = null;
    this.railYRatio = null;

    this.reach = {
      x:
        element.scrollLeft <= 0
          ? 'start'
          : element.scrollLeft >= this.contentWidth - this.containerWidth
            ? 'end'
            : null,
      y:
        element.scrollTop <= 0
          ? 'start'
          : element.scrollTop >= this.contentHeight - this.containerHeight
            ? 'end'
            : null,
    };

    this.isAlive = true;

    this.settings.handlers.forEach(function (handlerName) { return handlers[handlerName](this$1); });

    this.lastScrollTop = Math.floor(element.scrollTop); // for onScroll only
    this.lastScrollLeft = element.scrollLeft; // for onScroll only
    this.event.bind(this.element, 'scroll', function (e) { return this$1.onScroll(e); });
    updateGeometry(this);
  };

  PerfectScrollbar.prototype.update = function update () {
    if (!this.isAlive) {
      return;
    }

    // Recalcuate negative scrollLeft adjustment
    this.negativeScrollAdjustment = this.isNegativeScroll
      ? this.content.getBoundingClientRect().width - this.element.getBoundingClientRect().width
      : 0;

    // Recalculate rail margins
    set(this.scrollbarXBRail, { display: 'block' });
    set(this.scrollbarXTRail, { display: 'block' });
    set(this.scrollbarYRail, { display: 'block' });
    this.railXBMarginWidth =
      toInt(get(this.scrollbarXBRail).marginLeft) +
      toInt(get(this.scrollbarXBRail).marginRight);
    this.railXTMarginWidth =
      toInt(get(this.scrollbarXTRail).marginLeft) +
      toInt(get(this.scrollbarXTRail).marginRight);
    this.railYMarginHeight =
      toInt(get(this.scrollbarYRail).marginTop) +
      toInt(get(this.scrollbarYRail).marginBottom);

    // Hide scrollbars not to affect scrollWidth and scrollHeight
    set(this.scrollbarXBRail, { display: 'none' });
    set(this.scrollbarXTRail, { display: 'none' });
    set(this.scrollbarYRail, { display: 'none' });

    updateGeometry(this);

    processScrollDiff(this, 'top', 0, false, true);
    processScrollDiff(this, 'left', 0, false, true);

    set(this.scrollbarXBRail, { display: '' });
    set(this.scrollbarXTRail, { display: '' });
    set(this.scrollbarYRail, { display: '' });
  };

  PerfectScrollbar.prototype.onScroll = function onScroll (e) {
    if (!this.isAlive) {
      return;
    }

    updateGeometry(this);
    processScrollDiff(this, 'top', this.element.scrollTop - this.lastScrollTop);
    processScrollDiff(
      this,
      'left',
      this.element.scrollLeft - this.lastScrollLeft
    );

    this.lastScrollTop = Math.floor(this.element.scrollTop);
    this.lastScrollLeft = this.element.scrollLeft;
  };

  PerfectScrollbar.prototype.destroy = function destroy () {
    if (!this.isAlive) {
      return;
    }

    this.event.unbindAll();
    while (this.content.firstChild) {
      this.element.insertBefore(this.content.firstChild, this.content);
    }
    remove(this.content);
    this.content = null;
    remove(this.scrollbarXB);
    remove(this.scrollbarXT);
    remove(this.scrollbarY);
    remove(this.scrollbarXBRail);
    remove(this.scrollbarXTRail);
    remove(this.scrollbarYRail);
    this.removePsClasses();

    // unset elements
    this.element = null;
    this.scrollbarXB = null;
    this.scrollbarXT = null;
    this.scrollbarY = null;
    this.scrollbarXBRail = null;
    this.scrollbarXTRail = null;
    this.scrollbarYRail = null;

    this.isAlive = false;
  };

  PerfectScrollbar.prototype.removePsClasses = function removePsClasses () {
    this.element.className = this.element.className
      .split(' ')
      .filter(function (name) { return !name.match(/^ps([-_].+|)$/); })
      .join(' ');
  };

  return PerfectScrollbar;

})));

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function ($) {
  var $window = $(window);

  $.swipeImage = function (target, options) {
    var $target = $(target);
    var $swipe = $('<div>').addClass('swipe_image').append($('<img>').attr('src', options.image_src).attr('alt', options.image_alt));
    var centerY = null; 

    function onScroll() {
      if (centerY === null) {
        return;
      }

      if (!options.isShow($target)) {
        return;
      }

      var posY = $window.scrollTop(); 

      if ($swipe.hasClass('swipe_image--show')) {
        if (centerY < posY || posY + $window.height() < centerY) {
          $swipe.removeClass('swipe_image--show');
          $swipe.css({
            'animation': ''
          });
          return;
        }
      } 
      else {
          if (posY <= centerY && centerY <= posY + $window.height()) {
            $swipe.addClass('swipe_image--show');
            return;
          }
        }
    } 


    function onResize() {
      $swipe.css({
        left: options.calcPositionLeft($target, $swipe),
        top: options.calcPositionTop($target, $swipe)
      });
      centerY = $swipe.offset().top + $swipe.outerHeight() / 2;
      onScroll();
    }

    ; 

    $target.parent().append($swipe); 

    $swipe.on('click', function () {
      $swipe.css({
        'animation': 'none'
      });
    }); 

    new ResizeObserver(onResize).observe(target); 

    $window.on('scroll', onScroll);
    $target.data('swipeImage', this); 

    onResize(); 

    this.recalc = function () {
      onResize();
    };
  };

  $.fn.swipeImage = function (options) {
    var defaults = {
      image_src: '/apps/toshiba-ss-v2/clientlibs/dist/img/swipe.png',
      image_alt: '',
      isShow: function isShow($target) {
        if (!window.matchMedia('(max-width:768px)').matches) {
          return false;
        }

        if ($target.outerHeight() == 0) {
          return false;
        }

        if ($target.hasClass('ps--active-x-double')) {
          return true;
        }

        if ($target.hasClass('ps--active-x-single')) {
          return true;
        }

        if ($target.hasClass('ps--active-y-single')) {
          return true;
        }

        return false;
      },
      calcPositionTop: function calcPositionTop($target, $swipe) {
        return $target.position().top + parseInt($target.css('margin-top'), 10) + $target.outerHeight() / 2 - $swipe.outerHeight() / 2 + 'px';
      },
      calcPositionLeft: function calcPositionLeft($target, $swipe) {
        return $target.position().left + parseInt($target.css('margin-left'), 10) + $target.outerWidth() / 2 - $swipe.outerWidth() / 2 + 'px';
      }
    };

    if (typeof options === 'undefined') {
      options = {};
    }

    if (typeof options === 'string') {
      var $swipeImage = $(this).data('swipeImage');

      if (_typeof($swipeImage) === 'object') {
        return $swipeImage[options].apply($swipeImage, Array.prototype.slice.call(arguments, 1));
      }
    }

    if (_typeof(options) === 'object') {
      options = $.extend({}, defaults, options);
      return this.each(function () {
        if (typeof $(this).data('swipeImage') === 'undefined') {
          new $.swipeImage(this, options);
        }
      });
    }

    $.error('Method ' + options + ' does not exist on jQuery.swipeImage');
  };
})(jQuery);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.ResizeObserver = factory();
})(this, function () {
  'use strict';


  var MapShim = function () {
    if (typeof Map !== 'undefined') {
      return Map;
    }


    function getIndex(arr, key) {
      var result = -1;
      arr.some(function (entry, index) {
        if (entry[0] === key) {
          result = index;
          return true;
        }

        return false;
      });
      return result;
    }

    return function () {
      function anonymous() {
        this.__entries__ = [];
      }

      var prototypeAccessors = {
        size: {
          configurable: true
        }
      };

      prototypeAccessors.size.get = function () {
        return this.__entries__.length;
      };


      anonymous.prototype.get = function (key) {
        var index = getIndex(this.__entries__, key);
        var entry = this.__entries__[index];
        return entry && entry[1];
      };


      anonymous.prototype.set = function (key, value) {
        var index = getIndex(this.__entries__, key);

        if (~index) {
          this.__entries__[index][1] = value;
        } else {
          this.__entries__.push([key, value]);
        }
      };


      anonymous.prototype["delete"] = function (key) {
        var entries = this.__entries__;
        var index = getIndex(entries, key);

        if (~index) {
          entries.splice(index, 1);
        }
      };


      anonymous.prototype.has = function (key) {
        return !!~getIndex(this.__entries__, key);
      };


      anonymous.prototype.clear = function () {
        this.__entries__.splice(0);
      };


      anonymous.prototype.forEach = function (callback, ctx) {
        var this$1 = this;
        if (ctx === void 0) ctx = null;

        for (var i = 0, list = this$1.__entries__; i < list.length; i += 1) {
          var entry = list[i];
          callback.call(ctx, entry[1], entry[0]);
        }
      };

      Object.defineProperties(anonymous.prototype, prototypeAccessors);
      return anonymous;
    }();
  }();


  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; 

  var global$1 = function () {
    if (typeof global !== 'undefined' && global.Math === Math) {
      return global;
    }

    if (typeof self !== 'undefined' && self.Math === Math) {
      return self;
    }

    if (typeof window !== 'undefined' && window.Math === Math) {
      return window;
    } 


    return Function('return this')();
  }();


  var requestAnimationFrame$1 = function () {
    if (typeof requestAnimationFrame === 'function') {
      return requestAnimationFrame.bind(global$1);
    }

    return function (callback) {
      return setTimeout(function () {
        return callback(Date.now());
      }, 1000 / 60);
    };
  }(); 


  var trailingTimeout = 2;

  var throttle = function throttle(callback, delay) {
    var leadingCall = false,
        trailingCall = false,
        lastCallTime = 0;

    function resolvePending() {
      if (leadingCall) {
        leadingCall = false;
        callback();
      }

      if (trailingCall) {
        proxy();
      }
    }


    function timeoutCallback() {
      requestAnimationFrame$1(resolvePending);
    }


    function proxy() {
      var timeStamp = Date.now();

      if (leadingCall) {
        if (timeStamp - lastCallTime < trailingTimeout) {
          return;
        } 


        trailingCall = true;
      } else {
        leadingCall = true;
        trailingCall = false;
        setTimeout(timeoutCallback, delay);
      }

      lastCallTime = timeStamp;
    }

    return proxy;
  }; 


  var REFRESH_DELAY = 20; 

  var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; 

  var mutationObserverSupported = typeof MutationObserver !== 'undefined';

  var ResizeObserverController = function ResizeObserverController() {
    this.connected_ = false;
    this.mutationEventsAdded_ = false;
    this.mutationsObserver_ = null;
    this.observers_ = [];
    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
  };





  ResizeObserverController.prototype.addObserver = function (observer) {
    if (!~this.observers_.indexOf(observer)) {
      this.observers_.push(observer);
    } 


    if (!this.connected_) {
      this.connect_();
    }
  };


  ResizeObserverController.prototype.removeObserver = function (observer) {
    var observers = this.observers_;
    var index = observers.indexOf(observer); 

    if (~index) {
      observers.splice(index, 1);
    } 


    if (!observers.length && this.connected_) {
      this.disconnect_();
    }
  };


  ResizeObserverController.prototype.refresh = function () {
    var changesDetected = this.updateObservers_(); 

    if (changesDetected) {
      this.refresh();
    }
  };


  ResizeObserverController.prototype.updateObservers_ = function () {
    var activeObservers = this.observers_.filter(function (observer) {
      return observer.gatherActive(), observer.hasActive();
    }); 

    activeObservers.forEach(function (observer) {
      return observer.broadcastActive();
    });
    return activeObservers.length > 0;
  };


  ResizeObserverController.prototype.connect_ = function () {
    if (!isBrowser || this.connected_) {
      return;
    } 


    document.addEventListener('transitionend', this.onTransitionEnd_);
    window.addEventListener('resize', this.refresh);

    if (mutationObserverSupported) {
      this.mutationsObserver_ = new MutationObserver(this.refresh);
      this.mutationsObserver_.observe(document, {
        attributes: true,
        childList: true,
        characterData: true,
        subtree: true
      });
    } else {
      document.addEventListener('DOMSubtreeModified', this.refresh);
      this.mutationEventsAdded_ = true;
    }

    this.connected_ = true;
  };


  ResizeObserverController.prototype.disconnect_ = function () {
    if (!isBrowser || !this.connected_) {
      return;
    }

    document.removeEventListener('transitionend', this.onTransitionEnd_);
    window.removeEventListener('resize', this.refresh);

    if (this.mutationsObserver_) {
      this.mutationsObserver_.disconnect();
    }

    if (this.mutationEventsAdded_) {
      document.removeEventListener('DOMSubtreeModified', this.refresh);
    }

    this.mutationsObserver_ = null;
    this.mutationEventsAdded_ = false;
    this.connected_ = false;
  };


  ResizeObserverController.prototype.onTransitionEnd_ = function (ref) {
    var propertyName = ref.propertyName;
    if (propertyName === void 0) propertyName = ''; 

    var isReflowProperty = transitionKeys.some(function (key) {
      return !!~propertyName.indexOf(key);
    });

    if (isReflowProperty) {
      this.refresh();
    }
  };


  ResizeObserverController.getInstance = function () {
    if (!this.instance_) {
      this.instance_ = new ResizeObserverController();
    }

    return this.instance_;
  };

  ResizeObserverController.instance_ = null;

  var defineConfigurable = function defineConfigurable(target, props) {
    for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {
      var key = list[i];
      Object.defineProperty(target, key, {
        value: props[key],
        enumerable: false,
        writable: false,
        configurable: true
      });
    }

    return target;
  };


  var getWindowOf = function getWindowOf(target) {
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; 

    return ownerGlobal || global$1;
  }; 


  var emptyRect = createRectInit(0, 0, 0, 0);

  function toFloat(value) {
    return parseFloat(value) || 0;
  }


  function getBordersSize(styles) {
    var positions = [],
        len = arguments.length - 1;

    while (len-- > 0) {
      positions[len] = arguments[len + 1];
    }

    return positions.reduce(function (size, position) {
      var value = styles['border-' + position + '-width'];
      return size + toFloat(value);
    }, 0);
  }


  function getPaddings(styles) {
    var positions = ['top', 'right', 'bottom', 'left'];
    var paddings = {};

    for (var i = 0, list = positions; i < list.length; i += 1) {
      var position = list[i];
      var value = styles['padding-' + position];
      paddings[position] = toFloat(value);
    }

    return paddings;
  }


  function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
  }


  function getHTMLElementContentRect(target) {
    var clientWidth = target.clientWidth;
    var clientHeight = target.clientHeight; 

    if (!clientWidth && !clientHeight) {
      return emptyRect;
    }

    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom; 

    var width = toFloat(styles.width),
        height = toFloat(styles.height); 

    if (styles.boxSizing === 'border-box') {
      if (Math.round(width + horizPad) !== clientWidth) {
        width -= getBordersSize(styles, 'left', 'right') + horizPad;
      }

      if (Math.round(height + vertPad) !== clientHeight) {
        height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
      }
    } 


    if (!isDocumentElement(target)) {
      var vertScrollbar = Math.round(width + horizPad) - clientWidth;
      var horizScrollbar = Math.round(height + vertPad) - clientHeight; 

      if (Math.abs(vertScrollbar) !== 1) {
        width -= vertScrollbar;
      }

      if (Math.abs(horizScrollbar) !== 1) {
        height -= horizScrollbar;
      }
    }

    return createRectInit(paddings.left, paddings.top, width, height);
  }


  var isSVGGraphicsElement = function () {
    if (typeof SVGGraphicsElement !== 'undefined') {
      return function (target) {
        return target instanceof getWindowOf(target).SVGGraphicsElement;
      };
    } 


    return function (target) {
      return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';
    };
  }();


  function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
  }


  function getContentRect(target) {
    if (!isBrowser) {
      return emptyRect;
    }

    if (isSVGGraphicsElement(target)) {
      return getSVGContentRect(target);
    }

    return getHTMLElementContentRect(target);
  }


  function createReadOnlyRect(ref) {
    var x = ref.x;
    var y = ref.y;
    var width = ref.width;
    var height = ref.height; 

    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype); 

    defineConfigurable(rect, {
      x: x,
      y: y,
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: height + y,
      left: x
    });
    return rect;
  }


  function createRectInit(x, y, width, height) {
    return {
      x: x,
      y: y,
      width: width,
      height: height
    };
  }


  var ResizeObservation = function ResizeObservation(target) {
    this.broadcastWidth = 0;
    this.broadcastHeight = 0;
    this.contentRect_ = createRectInit(0, 0, 0, 0);
    this.target = target;
  };




  ResizeObservation.prototype.isActive = function () {
    var rect = getContentRect(this.target);
    this.contentRect_ = rect;
    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
  };


  ResizeObservation.prototype.broadcastRect = function () {
    var rect = this.contentRect_;
    this.broadcastWidth = rect.width;
    this.broadcastHeight = rect.height;
    return rect;
  };

  var ResizeObserverEntry = function ResizeObserverEntry(target, rectInit) {
    var contentRect = createReadOnlyRect(rectInit); 

    defineConfigurable(this, {
      target: target,
      contentRect: contentRect
    });
  };

  var ResizeObserverSPI = function ResizeObserverSPI(callback, controller, callbackCtx) {
    this.activeObservations_ = [];
    this.observations_ = new MapShim();

    if (typeof callback !== 'function') {
      throw new TypeError('The callback provided as parameter 1 is not a function.');
    }

    this.callback_ = callback;
    this.controller_ = controller;
    this.callbackCtx_ = callbackCtx;
  };





  ResizeObserverSPI.prototype.observe = function (target) {
    if (!arguments.length) {
      throw new TypeError('1 argument required, but only 0 present.');
    } 


    if (typeof Element === 'undefined' || !(Element instanceof Object)) {
      return;
    }

    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }

    var observations = this.observations_; 

    if (observations.has(target)) {
      return;
    }

    observations.set(target, new ResizeObservation(target));
    this.controller_.addObserver(this); 

    this.controller_.refresh();
  };


  ResizeObserverSPI.prototype.unobserve = function (target) {
    if (!arguments.length) {
      throw new TypeError('1 argument required, but only 0 present.');
    } 


    if (typeof Element === 'undefined' || !(Element instanceof Object)) {
      return;
    }

    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }

    var observations = this.observations_; 

    if (!observations.has(target)) {
      return;
    }

    observations["delete"](target);

    if (!observations.size) {
      this.controller_.removeObserver(this);
    }
  };


  ResizeObserverSPI.prototype.disconnect = function () {
    this.clearActive();
    this.observations_.clear();
    this.controller_.removeObserver(this);
  };


  ResizeObserverSPI.prototype.gatherActive = function () {
    var this$1 = this;
    this.clearActive();
    this.observations_.forEach(function (observation) {
      if (observation.isActive()) {
        this$1.activeObservations_.push(observation);
      }
    });
  };


  ResizeObserverSPI.prototype.broadcastActive = function () {
    if (!this.hasActive()) {
      return;
    }

    var ctx = this.callbackCtx_; 

    var entries = this.activeObservations_.map(function (observation) {
      return new ResizeObserverEntry(observation.target, observation.broadcastRect());
    });
    this.callback_.call(ctx, entries, ctx);
    this.clearActive();
  };


  ResizeObserverSPI.prototype.clearActive = function () {
    this.activeObservations_.splice(0);
  };


  ResizeObserverSPI.prototype.hasActive = function () {
    return this.activeObservations_.length > 0;
  }; 


  var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();

  var ResizeObserver = function ResizeObserver(callback) {
    if (!(this instanceof ResizeObserver)) {
      throw new TypeError('Cannot call a class as a function.');
    }

    if (!arguments.length) {
      throw new TypeError('1 argument required, but only 0 present.');
    }

    var controller = ResizeObserverController.getInstance();
    var observer = new ResizeObserverSPI(callback, controller, this);
    observers.set(this, observer);
  }; 


  ['observe', 'unobserve', 'disconnect'].forEach(function (method) {
    ResizeObserver.prototype[method] = function () {
      return (ref = observers.get(this))[method].apply(ref, arguments);
      var ref;
    };
  });

  var index = function () {
    if (typeof global$1.ResizeObserver !== 'undefined') {
      return global$1.ResizeObserver;
    }

    global$1.ResizeObserver = ResizeObserver;
    return ResizeObserver;
  }();

  return index;
});
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }


;

(function (factory) {
  'use strict';

  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else if (typeof exports !== 'undefined') {
    module.exports = factory(require('jquery'));
  } else {
    factory(jQuery);
  }
})(function ($) {
  'use strict';

  var Slick = window.Slick || {};

  Slick = function () {
    var instanceUid = 0;

    function Slick(element, settings) {
      var _ = this,
          dataSettings;

      _.defaults = {
        accessibility: true,
        adaptiveHeight: false,
        appendArrows: $(element),
        appendDots: $(element),
        arrows: true,
        asNavFor: null,
        prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
        nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
        autoplay: false,
        autoplaySpeed: 3000,
        centerMode: false,
        centerPadding: '50px',
        cssEase: 'ease',
        customPaging: function customPaging(slider, i) {
          return $('<button type="button" />').text(i + 1);
        },
        dots: false,
        dotsClass: 'slick-dots',
        draggable: true,
        easing: 'linear',
        edgeFriction: 0.35,
        fade: false,
        focusOnSelect: false,
        focusOnChange: false,
        infinite: true,
        initialSlide: 0,
        lazyLoad: 'ondemand',
        mobileFirst: false,
        pauseOnHover: true,
        pauseOnFocus: true,
        pauseOnDotsHover: false,
        respondTo: 'window',
        responsive: null,
        rows: 1,
        rtl: false,
        slide: '',
        slidesPerRow: 1,
        slidesToShow: 1,
        slidesToScroll: 1,
        speed: 500,
        swipe: true,
        swipeToSlide: false,
        touchMove: true,
        touchThreshold: 5,
        useCSS: true,
        useTransform: true,
        variableWidth: false,
        vertical: false,
        verticalSwiping: false,
        waitForAnimate: true,
        zIndex: 1000
      };
      _.initials = {
        animating: false,
        dragging: false,
        autoPlayTimer: null,
        currentDirection: 0,
        currentLeft: null,
        currentSlide: 0,
        direction: 1,
        $dots: null,
        listWidth: null,
        listHeight: null,
        loadIndex: 0,
        $nextArrow: null,
        $prevArrow: null,
        scrolling: false,
        slideCount: null,
        slideWidth: null,
        $slideTrack: null,
        $slides: null,
        sliding: false,
        slideOffset: 0,
        swipeLeft: null,
        swiping: false,
        $list: null,
        touchObject: {},
        transformsEnabled: false,
        unslicked: false
      };
      $.extend(_, _.initials);
      _.activeBreakpoint = null;
      _.animType = null;
      _.animProp = null;
      _.breakpoints = [];
      _.breakpointSettings = [];
      _.cssTransitions = false;
      _.focussed = false;
      _.interrupted = false;
      _.hidden = 'hidden';
      _.paused = true;
      _.positionProp = null;
      _.respondTo = null;
      _.rowCount = 1;
      _.shouldClick = true;
      _.$slider = $(element);
      _.$slidesCache = null;
      _.transformType = null;
      _.transitionType = null;
      _.visibilityChange = 'visibilitychange';
      _.windowWidth = 0;
      _.windowTimer = null;
      dataSettings = $(element).data('slick') || {};
      _.options = $.extend({}, _.defaults, settings, dataSettings);
      _.currentSlide = _.options.initialSlide;
      _.originalSettings = _.options;

      if (typeof document.mozHidden !== 'undefined') {
        _.hidden = 'mozHidden';
        _.visibilityChange = 'mozvisibilitychange';
      } else if (typeof document.webkitHidden !== 'undefined') {
        _.hidden = 'webkitHidden';
        _.visibilityChange = 'webkitvisibilitychange';
      }

      _.autoPlay = $.proxy(_.autoPlay, _);
      _.autoPlayClear = $.proxy(_.autoPlayClear, _);
      _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
      _.changeSlide = $.proxy(_.changeSlide, _);
      _.clickHandler = $.proxy(_.clickHandler, _);
      _.selectHandler = $.proxy(_.selectHandler, _);
      _.setPosition = $.proxy(_.setPosition, _);
      _.swipeHandler = $.proxy(_.swipeHandler, _);
      _.dragHandler = $.proxy(_.dragHandler, _);
      _.keyHandler = $.proxy(_.keyHandler, _);
      _.instanceUid = instanceUid++; 

      _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;

      _.registerBreakpoints();

      _.init(true);
    }

    return Slick;
  }();

  Slick.prototype.activateADA = function () {
    var _ = this;

    _.$slideTrack.find('.slick-active').attr({
      'aria-hidden': 'false'
    }).find('a, input, button, select').attr({
      'tabindex': '0'
    });
  };

  Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {
    var _ = this;

    if (typeof index === 'boolean') {
      addBefore = index;
      index = null;
    } else if (index < 0 || index >= _.slideCount) {
      return false;
    }

    _.unload();

    if (typeof index === 'number') {
      if (index === 0 && _.$slides.length === 0) {
        $(markup).appendTo(_.$slideTrack);
      } else if (addBefore) {
        $(markup).insertBefore(_.$slides.eq(index));
      } else {
        $(markup).insertAfter(_.$slides.eq(index));
      }
    } else {
      if (addBefore === true) {
        $(markup).prependTo(_.$slideTrack);
      } else {
        $(markup).appendTo(_.$slideTrack);
      }
    }

    _.$slides = _.$slideTrack.children(this.options.slide);

    _.$slideTrack.children(this.options.slide).detach();

    _.$slideTrack.append(_.$slides);

    _.$slides.each(function (index, element) {
      $(element).attr('data-slick-index', index);
    });

    _.$slidesCache = _.$slides;

    _.reinit();
  };

  Slick.prototype.animateHeight = function () {
    var _ = this;

    if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);

      _.$list.animate({
        height: targetHeight
      }, _.options.speed);
    }
  };

  Slick.prototype.animateSlide = function (targetLeft, callback) {
    var animProps = {},
        _ = this;

    _.animateHeight();

    if (_.options.rtl === true && _.options.vertical === false) {
      targetLeft = -targetLeft;
    }

    if (_.transformsEnabled === false) {
      if (_.options.vertical === false) {
        _.$slideTrack.animate({
          left: targetLeft
        }, _.options.speed, _.options.easing, callback);
      } else {
        _.$slideTrack.animate({
          top: targetLeft
        }, _.options.speed, _.options.easing, callback);
      }
    } else {
      if (_.cssTransitions === false) {
        if (_.options.rtl === true) {
          _.currentLeft = -_.currentLeft;
        }

        $({
          animStart: _.currentLeft
        }).animate({
          animStart: targetLeft
        }, {
          duration: _.options.speed,
          easing: _.options.easing,
          step: function step(now) {
            now = Math.ceil(now);

            if (_.options.vertical === false) {
              animProps[_.animType] = 'translate(' + now + 'px, 0px)';

              _.$slideTrack.css(animProps);
            } else {
              animProps[_.animType] = 'translate(0px,' + now + 'px)';

              _.$slideTrack.css(animProps);
            }
          },
          complete: function complete() {
            if (callback) {
              callback.call();
            }
          }
        });
      } else {
        _.applyTransition();

        targetLeft = Math.ceil(targetLeft);

        if (_.options.vertical === false) {
          animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
        } else {
          animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
        }

        _.$slideTrack.css(animProps);

        if (callback) {
          setTimeout(function () {
            _.disableTransition();

            callback.call();
          }, _.options.speed);
        }
      }
    }
  };

  Slick.prototype.getNavTarget = function () {
    var _ = this,
        asNavFor = _.options.asNavFor;

    if (asNavFor && asNavFor !== null) {
      asNavFor = $(asNavFor).not(_.$slider);
    }

    return asNavFor;
  };

  Slick.prototype.asNavFor = function (index) {
    var _ = this,
        asNavFor = _.getNavTarget();

    if (asNavFor !== null && _typeof(asNavFor) === 'object') {
      asNavFor.each(function () {
        var target = $(this).slick('getSlick');

        if (!target.unslicked) {
          target.slideHandler(index, true);
        }
      });
    }
  };

  Slick.prototype.applyTransition = function (slide) {
    var _ = this,
        transition = {};

    if (_.options.fade === false) {
      transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
    } else {
      transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
    }

    if (_.options.fade === false) {
      _.$slideTrack.css(transition);
    } else {
      _.$slides.eq(slide).css(transition);
    }
  };

  Slick.prototype.autoPlay = function () {
    var _ = this;

    _.autoPlayClear();

    if (_.slideCount > _.options.slidesToShow) {
      _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
    }
  };

  Slick.prototype.autoPlayClear = function () {
    var _ = this;

    if (_.autoPlayTimer) {
      clearInterval(_.autoPlayTimer);
    }
  };

  Slick.prototype.autoPlayIterator = function () {
    var _ = this,
        slideTo = _.currentSlide + _.options.slidesToScroll;

    if (!_.paused && !_.interrupted && !_.focussed) {
      if (_.options.infinite === false) {
        if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {
          _.direction = 0;
        } else if (_.direction === 0) {
          slideTo = _.currentSlide - _.options.slidesToScroll;

          if (_.currentSlide - 1 === 0) {
            _.direction = 1;
          }
        }
      }

      _.slideHandler(slideTo);
    }
  };

  Slick.prototype.buildArrows = function () {
    var _ = this;

    if (_.options.arrows === true) {
      _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
      _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

      if (_.slideCount > _.options.slidesToShow) {
        _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

        _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

        if (_.htmlExpr.test(_.options.prevArrow)) {
          _.$prevArrow.prependTo(_.options.appendArrows);
        }

        if (_.htmlExpr.test(_.options.nextArrow)) {
          _.$nextArrow.appendTo(_.options.appendArrows);
        }

        if (_.options.infinite !== true) {
          _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
        }
      } else {
        _.$prevArrow.add(_.$nextArrow).addClass('slick-hidden').attr({
          'aria-disabled': 'true',
          'tabindex': '-1'
        });
      }
    }
  };

  Slick.prototype.buildDots = function () {
    var _ = this,
        i,
        dot;

    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      _.$slider.addClass('slick-dotted');

      dot = $('<ul />').addClass(_.options.dotsClass);

      for (i = 0; i <= _.getDotCount(); i += 1) {
        dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
      }

      _.$dots = dot.appendTo(_.options.appendDots);

      _.$dots.find('li').first().addClass('slick-active');
    }
  };

  Slick.prototype.buildOut = function () {
    var _ = this;

    _.$slides = _.$slider.children(_.options.slide + ':not(.slick-cloned)').addClass('slick-slide');
    _.slideCount = _.$slides.length;

    _.$slides.each(function (index, element) {
      $(element).attr('data-slick-index', index).data('originalStyling', $(element).attr('style') || '');
    });

    _.$slider.addClass('slick-slider');

    _.$slideTrack = _.slideCount === 0 ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent();
    _.$list = _.$slideTrack.wrap('<div class="slick-list"/>').parent();

    _.$slideTrack.css('opacity', 0);

    if (_.options.centerMode === true || _.options.swipeToSlide === true) {
      _.options.slidesToScroll = 1;
    }

    $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

    _.setupInfinite();

    _.buildArrows();

    _.buildDots();

    _.updateDots();

    _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

    if (_.options.draggable === true) {
      _.$list.addClass('draggable');
    }
  };

  Slick.prototype.buildRows = function () {
    var _ = this,
        a,
        b,
        c,
        newSlides,
        numOfSlides,
        originalSlides,
        slidesPerSection;

    newSlides = document.createDocumentFragment();
    originalSlides = _.$slider.children();

    if (_.options.rows > 0) {
      slidesPerSection = _.options.slidesPerRow * _.options.rows;
      numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);

      for (a = 0; a < numOfSlides; a++) {
        var slide = document.createElement('div');

        for (b = 0; b < _.options.rows; b++) {
          var row = document.createElement('div');

          for (c = 0; c < _.options.slidesPerRow; c++) {
            var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);

            if (originalSlides.get(target)) {
              row.appendChild(originalSlides.get(target));
            }
          }

          slide.appendChild(row);
        }

        newSlides.appendChild(slide);
      }

      _.$slider.empty().append(newSlides);

      _.$slider.children().children().children().css({
        'width': 100 / _.options.slidesPerRow + '%',
        'display': 'inline-flex'
      });
    }
  };

  Slick.prototype.checkResponsive = function (initial, forceUpdate) {
    var _ = this,
        breakpoint,
        targetBreakpoint,
        respondToWidth,
        triggerBreakpoint = false;

    var sliderWidth = _.$slider.width();

    var windowWidth = window.innerWidth || $(window).width();

    if (_.respondTo === 'window') {
      respondToWidth = windowWidth;
    } else if (_.respondTo === 'slider') {
      respondToWidth = sliderWidth;
    } else if (_.respondTo === 'min') {
      respondToWidth = Math.min(windowWidth, sliderWidth);
    }

    if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {
      targetBreakpoint = null;

      for (breakpoint in _.breakpoints) {
        if (_.breakpoints.hasOwnProperty(breakpoint)) {
          if (_.originalSettings.mobileFirst === false) {
            if (respondToWidth < _.breakpoints[breakpoint]) {
              targetBreakpoint = _.breakpoints[breakpoint];
            }
          } else {
            if (respondToWidth > _.breakpoints[breakpoint]) {
              targetBreakpoint = _.breakpoints[breakpoint];
            }
          }
        }
      }

      if (targetBreakpoint !== null) {
        if (_.activeBreakpoint !== null) {
          if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
            _.activeBreakpoint = targetBreakpoint;

            if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
              _.unslick(targetBreakpoint);
            } else {
              _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);

              if (initial === true) {
                _.currentSlide = _.options.initialSlide;
              }

              _.refresh(initial);
            }

            triggerBreakpoint = targetBreakpoint;
          }
        } else {
          _.activeBreakpoint = targetBreakpoint;

          if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
            _.unslick(targetBreakpoint);
          } else {
            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);

            if (initial === true) {
              _.currentSlide = _.options.initialSlide;
            }

            _.refresh(initial);
          }

          triggerBreakpoint = targetBreakpoint;
        }
      } else {
        if (_.activeBreakpoint !== null) {
          _.activeBreakpoint = null;
          _.options = _.originalSettings;

          if (initial === true) {
            _.currentSlide = _.options.initialSlide;
          }

          _.refresh(initial);

          triggerBreakpoint = targetBreakpoint;
        }
      } 


      if (!initial && triggerBreakpoint !== false) {
        _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
      }
    }
  };

  Slick.prototype.changeSlide = function (event, dontAnimate) {
    var _ = this,
        $target = $(event.currentTarget),
        indexOffset,
        slideOffset,
        unevenOffset; 


    if ($target.is('a')) {
      event.preventDefault();
    } 


    if (!$target.is('li')) {
      $target = $target.closest('li');
    }

    unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;
    indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

    switch (event.data.message) {
      case 'previous':
        slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;

        if (_.slideCount > _.options.slidesToShow) {
          _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
        }

        break;

      case 'next':
        slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;

        if (_.slideCount > _.options.slidesToShow) {
          _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
        }

        break;

      case 'index':
        var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;

        _.slideHandler(_.checkNavigable(index), false, dontAnimate);

        $target.children().trigger('focus');
        break;

      default:
        return;
    }
  };

  Slick.prototype.checkNavigable = function (index) {
    var _ = this,
        navigables,
        prevNavigable;

    navigables = _.getNavigableIndexes();
    prevNavigable = 0;

    if (index > navigables[navigables.length - _.options.slidesToShow]) {
      index = navigables[navigables.length - _.options.slidesToShow];
    } else {
      for (var n in navigables) {
        if (index < navigables[n]) {
          index = prevNavigable;
          break;
        }

        prevNavigable = navigables[n];
      }
    }

    return index;
  };

  Slick.prototype.cleanUpEvents = function () {
    var _ = this;

    if (_.options.dots && _.$dots !== null) {
      $('li', _.$dots).off('click.slick', _.changeSlide).off('mouseenter.slick', $.proxy(_.interrupt, _, true)).off('mouseleave.slick', $.proxy(_.interrupt, _, false));

      if (_.options.accessibility === true) {
        _.$dots.off('keydown.slick', _.keyHandler);
      }
    }

    _.$slider.off('focus.slick blur.slick');

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
      _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);

      if (_.options.accessibility === true) {
        _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);
        _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);
      }
    }

    _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);

    _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);

    _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);

    _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

    _.$list.off('click.slick', _.clickHandler);

    $(document).off(_.visibilityChange, _.visibility);

    _.cleanUpSlideEvents();

    if (_.options.accessibility === true) {
      _.$list.off('keydown.slick', _.keyHandler);
    }

    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().off('click.slick', _.selectHandler);
    }

    $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);
    $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);
    $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);
    $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
  };

  Slick.prototype.cleanUpSlideEvents = function () {
    var _ = this;

    _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));

    _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));
  };

  Slick.prototype.cleanUpRows = function () {
    var _ = this,
        originalSlides;

    if (_.options.rows > 0) {
      originalSlides = _.$slides.children().children();
      originalSlides.removeAttr('style');

      _.$slider.empty().append(originalSlides);
    }
  };

  Slick.prototype.clickHandler = function (event) {
    var _ = this;

    if (_.shouldClick === false) {
      event.stopImmediatePropagation();
      event.stopPropagation();
      event.preventDefault();
    }
  };

  Slick.prototype.destroy = function (refresh) {
    var _ = this;

    _.autoPlayClear();

    _.touchObject = {};

    _.cleanUpEvents();

    $('.slick-cloned', _.$slider).detach();

    if (_.$dots) {
      _.$dots.remove();
    }

    if (_.$prevArrow && _.$prevArrow.length) {
      _.$prevArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

      if (_.htmlExpr.test(_.options.prevArrow)) {
        _.$prevArrow.remove();
      }
    }

    if (_.$nextArrow && _.$nextArrow.length) {
      _.$nextArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

      if (_.htmlExpr.test(_.options.nextArrow)) {
        _.$nextArrow.remove();
      }
    }

    if (_.$slides) {
      _.$slides.removeClass('slick-slide slick-active slick-center slick-visible slick-current').removeAttr('aria-hidden').removeAttr('data-slick-index').each(function () {
        $(this).attr('style', $(this).data('originalStyling'));
      });

      _.$slideTrack.children(this.options.slide).detach();

      _.$slideTrack.detach();

      _.$list.detach();

      _.$slider.append(_.$slides);
    }

    _.cleanUpRows();

    _.$slider.removeClass('slick-slider');

    _.$slider.removeClass('slick-initialized');

    _.$slider.removeClass('slick-dotted');

    _.unslicked = true;

    if (!refresh) {
      _.$slider.trigger('destroy', [_]);
    }
  };

  Slick.prototype.disableTransition = function (slide) {
    var _ = this,
        transition = {};

    transition[_.transitionType] = '';

    if (_.options.fade === false) {
      _.$slideTrack.css(transition);
    } else {
      _.$slides.eq(slide).css(transition);
    }
  };

  Slick.prototype.fadeSlide = function (slideIndex, callback) {
    var _ = this;

    if (_.cssTransitions === false) {
      _.$slides.eq(slideIndex).css({
        zIndex: _.options.zIndex
      });

      _.$slides.eq(slideIndex).animate({
        opacity: 1
      }, _.options.speed, _.options.easing, callback);
    } else {
      _.applyTransition(slideIndex);

      _.$slides.eq(slideIndex).css({
        opacity: 1,
        zIndex: _.options.zIndex
      });

      if (callback) {
        setTimeout(function () {
          _.disableTransition(slideIndex);

          callback.call();
        }, _.options.speed);
      }
    }
  };

  Slick.prototype.fadeSlideOut = function (slideIndex) {
    var _ = this;

    if (_.cssTransitions === false) {
      _.$slides.eq(slideIndex).animate({
        opacity: 0,
        zIndex: _.options.zIndex - 2
      }, _.options.speed, _.options.easing);
    } else {
      _.applyTransition(slideIndex);

      _.$slides.eq(slideIndex).css({
        opacity: 0,
        zIndex: _.options.zIndex - 2
      });
    }
  };

  Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {
    var _ = this;

    if (filter !== null) {
      _.$slidesCache = _.$slides;

      _.unload();

      _.$slideTrack.children(this.options.slide).detach();

      _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

      _.reinit();
    }
  };

  Slick.prototype.slickCustomFilter = function (filter) {
    var _ = this;

    if (filter === null) {
      return;
    }

    $('.slick-cloned', _.$slider).remove();

    if (_.$dots) {
      _.$dots.remove();
    }

    if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
      _.$prevArrow.remove();
    }

    if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
      _.$nextArrow.remove();
    }

    _.$slides.removeClass('slick-active slick-visible slick-current').attr('aria-hidden', 'true');

    _.$slideTrack.children(this.options.slide).filter(filter);

    _.slideCount = _.$slides.filter('[data-slick-index]').length;
    _.currentSlide = 0;

    _.registerBreakpoints();

    _.setProps();

    _.setupInfinite();

    _.buildArrows();

    _.updateArrows();

    _.initArrowEvents();

    _.buildDots();

    _.updateDots();

    _.initDotEvents();

    _.cleanUpSlideEvents();

    _.initSlideEvents();

    _.checkResponsive(false, true);

    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().on('click.slick', _.selectHandler);
    }

    _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

    _.setPosition();

    _.focusHandler();

    _.paused = !_.options.autoplay;

    _.autoPlay();

    _.$slider.trigger('reInit', [_]);
  };

  Slick.prototype.focusHandler = function () {
    var _ = this;

    _.$slider.off('focus.slick blur.slick').on('focus.slick blur.slick', '*', function (event) {
      event.stopImmediatePropagation();
      var $sf = $(this);
      setTimeout(function () {
        if (_.options.pauseOnFocus) {
          _.focussed = $sf.is(':focus');

          _.autoPlay();
        }
      }, 0);
    });
  };

  Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {
    var _ = this;

    return _.currentSlide;
  };

  Slick.prototype.getDotCount = function () {
    var _ = this;

    var breakPoint = 0;
    var counter = 0;
    var pagerQty = 0;

    if (_.options.infinite === true) {
      if (_.slideCount <= _.options.slidesToShow) {
        ++pagerQty;
      } else {
        while (breakPoint < _.slideCount) {
          ++pagerQty;
          breakPoint = counter + _.options.slidesToScroll;
          counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }
      }
    } else if (_.options.centerMode === true) {
      pagerQty = _.slideCount;
    } else if (!_.options.asNavFor) {
      pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
    } else {
      while (breakPoint < _.slideCount) {
        ++pagerQty;
        breakPoint = counter + _.options.slidesToScroll;
        counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
      }
    }

    return pagerQty - 1;
  };

  Slick.prototype.getLeft = function (slideIndex) {
    var _ = this,
        targetLeft,
        verticalHeight,
        verticalOffset = 0,
        targetSlide,
        coef;

    _.slideOffset = 0;
    verticalHeight = _.$slides.first().outerHeight(true);

    if (_.options.infinite === true) {
      if (_.slideCount > _.options.slidesToShow) {
        _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;
        coef = -1;

        if (_.options.vertical === true && _.options.centerMode === true) {
          if (_.options.slidesToShow === 2) {
            coef = -1.5;
          } else if (_.options.slidesToShow === 1) {
            coef = -2;
          }
        }

        verticalOffset = verticalHeight * _.options.slidesToShow * coef;
      }

      if (_.slideCount % _.options.slidesToScroll !== 0) {
        if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
          if (slideIndex > _.slideCount) {
            _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;
            verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;
          } else {
            _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;
            verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;
          }
        }
      }
    } else {
      if (slideIndex + _.options.slidesToShow > _.slideCount) {
        _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;
        verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;
      }
    }

    if (_.slideCount <= _.options.slidesToShow) {
      _.slideOffset = 0;
      verticalOffset = 0;
    }

    if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
      _.slideOffset = _.slideWidth * Math.floor(_.options.slidesToShow) / 2 - _.slideWidth * _.slideCount / 2;
    } else if (_.options.centerMode === true && _.options.infinite === true) {
      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
    } else if (_.options.centerMode === true) {
      _.slideOffset = 0;
      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
    }

    if (_.options.vertical === false) {
      targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;
    } else {
      targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;
    }

    if (_.options.variableWidth === true) {
      if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
      } else {
        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
      }

      if (_.options.rtl === true) {
        if (targetSlide[0]) {
          targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
        } else {
          targetLeft = 0;
        }
      } else {
        targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
      }

      if (_.options.centerMode === true) {
        if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
          targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
        } else {
          targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
        }

        if (_.options.rtl === true) {
          if (targetSlide[0]) {
            targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
          } else {
            targetLeft = 0;
          }
        } else {
          targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
        }

        targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
      }
    }

    return targetLeft;
  };

  Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {
    var _ = this;

    return _.options[option];
  };

  Slick.prototype.getNavigableIndexes = function () {
    var _ = this,
        breakPoint = 0,
        counter = 0,
        indexes = [],
        max;

    if (_.options.infinite === false) {
      max = _.slideCount;
    } else {
      breakPoint = (_.options.swipeToSlide ? _.options.slidesToShow : _.options.slidesToScroll) * -1;
      counter = (_.options.swipeToSlide ? _.options.slidesToShow : _.options.slidesToScroll) * -1;
      max = _.slideCount * 2;
    }

    while (breakPoint < max) {
      indexes.push(breakPoint);
      breakPoint = counter + _.options.slidesToScroll;
      counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
    }

    return indexes;
  };

  Slick.prototype.getSlick = function () {
    return this;
  };

  Slick.prototype.getSlideCount = function () {
    var _ = this,
        slidesTraversed,
        swipedSlide,
        centerOffset;

    centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

    if (_.options.swipeToSlide === true) {
      _.$slideTrack.find('.slick-slide').each(function (index, slide) {
        if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {
          swipedSlide = slide;
          return false;
        }
      });

      slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;
      return slidesTraversed;
    } else {
      return _.options.slidesToScroll;
    }
  };

  Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {
    var _ = this;

    _.changeSlide({
      data: {
        message: 'index',
        index: parseInt(slide)
      }
    }, dontAnimate);
  };

  Slick.prototype.init = function (creation) {
    var _ = this;

    if (!$(_.$slider).hasClass('slick-initialized')) {
      $(_.$slider).addClass('slick-initialized');

      _.buildRows();

      _.buildOut();

      _.setProps();

      _.startLoad();

      _.loadSlider();

      _.initializeEvents();

      _.updateArrows();

      _.updateDots();

      _.checkResponsive(true);

      _.focusHandler();
    }

    if (creation) {
      _.$slider.trigger('init', [_]);
    }

    if (_.options.accessibility === true) {
      _.initADA();

      _.$slider.trigger('afterInitADA', [_]);
    }

    if (_.options.autoplay) {
      _.paused = false;

      _.autoPlay();
    }
  };

  Slick.prototype.initADA = function () {
    var _ = this,
        numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
        tabControlIndexes = _.getNavigableIndexes().filter(function (val) {
      return val >= 0 && val < _.slideCount;
    });

    _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
      'aria-hidden': 'true',
      'tabindex': '-1'
    }).find('a, input, button, select').attr({
      'tabindex': '-1'
    });

    if (_.$dots !== null) {
      _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {
        var slideControlIndex = tabControlIndexes.indexOf(i);
        $(this).attr({
          'role': 'tabpanel',
          'id': 'slick-slide' + _.instanceUid + i,
          'tabindex': -1
        });

        if (slideControlIndex !== -1) {
          var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex;

          if ($('#' + ariaButtonControl).length) {
            $(this).attr({
              'aria-describedby': ariaButtonControl
            });
          }
        }
      });

      _.$dots.attr('role', 'tablist').find('li').each(function (i) {
        var mappedSlideIndex = tabControlIndexes[i];
        $(this).attr({
          'role': 'presentation'
        });
        $(this).find('button').first().attr({
          'role': 'tab',
          'id': 'slick-slide-control' + _.instanceUid + i,
          'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,
          'aria-label': i + 1 + ' of ' + numDotGroups,
          'aria-selected': null,
          'tabindex': '-1'
        });
      }).eq(_.currentSlide).find('button').attr({
        'aria-selected': 'true',
        'tabindex': '0'
      }).end();
    }

    for (var i = _.currentSlide, max = i + _.options.slidesToShow; i < max; i++) {
      if (_.options.focusOnChange) {
        _.$slides.eq(i).attr({
          'tabindex': '0'
        });
      } else {
        _.$slides.eq(i).removeAttr('tabindex');
      }
    }

    _.activateADA();
  };

  Slick.prototype.initArrowEvents = function () {
    var _ = this;

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.off('click.slick').on('click.slick', {
        message: 'previous'
      }, _.changeSlide);

      _.$nextArrow.off('click.slick').on('click.slick', {
        message: 'next'
      }, _.changeSlide);

      if (_.options.accessibility === true) {
        _.$prevArrow.on('keydown.slick', _.keyHandler);

        _.$nextArrow.on('keydown.slick', _.keyHandler);
      }
    }
  };

  Slick.prototype.initDotEvents = function () {
    var _ = this;

    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      $('li', _.$dots).on('click.slick', {
        message: 'index'
      }, _.changeSlide);

      if (_.options.accessibility === true) {
        _.$dots.on('keydown.slick', _.keyHandler);
      }
    }

    if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {
      $('li', _.$dots).on('mouseenter.slick', $.proxy(_.interrupt, _, true)).on('mouseleave.slick', $.proxy(_.interrupt, _, false));
    }
  };

  Slick.prototype.initSlideEvents = function () {
    var _ = this;

    if (_.options.pauseOnHover) {
      _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));

      _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));
    }
  };

  Slick.prototype.initializeEvents = function () {
    var _ = this;

    _.initArrowEvents();

    _.initDotEvents();

    _.initSlideEvents();

    _.$list.on('touchstart.slick mousedown.slick', {
      action: 'start'
    }, _.swipeHandler);

    _.$list.on('touchmove.slick mousemove.slick', {
      action: 'move'
    }, _.swipeHandler);

    _.$list.on('touchend.slick mouseup.slick', {
      action: 'end'
    }, _.swipeHandler);

    _.$list.on('touchcancel.slick mouseleave.slick', {
      action: 'end'
    }, _.swipeHandler);

    _.$list.on('click.slick', _.clickHandler);

    $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

    if (_.options.accessibility === true) {
      _.$list.on('keydown.slick', _.keyHandler);
    }

    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().on('click.slick', _.selectHandler);
    }

    $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));
    $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));
    $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);
    $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
    $(_.setPosition);
  };

  Slick.prototype.initUI = function () {
    var _ = this;

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.show();

      _.$nextArrow.show();
    }

    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      _.$dots.show();
    }
  };

  Slick.prototype.keyHandler = function (event) {
    var _ = this; 


    if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
      if (event.keyCode === 37 && _.options.accessibility === true) {
        _.changeSlide({
          data: {
            message: _.options.rtl === true ? 'next' : 'previous'
          }
        });
      } else if (event.keyCode === 39 && _.options.accessibility === true) {
        _.changeSlide({
          data: {
            message: _.options.rtl === true ? 'previous' : 'next'
          }
        });
      }
    }
  };

  Slick.prototype.lazyLoad = function () {
    var _ = this,
        loadRange,
        cloneRange,
        rangeStart,
        rangeEnd;

    function loadImages(imagesScope) {
      $('img[data-lazy]', imagesScope).each(function () {
        var image = $(this),
            imageSource = $(this).attr('data-lazy'),
            imageSrcSet = $(this).attr('data-srcset'),
            imageSizes = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
            imageToLoad = document.createElement('img');

        imageToLoad.onload = function () {
          image.animate({
            opacity: 0
          }, 100, function () {
            if (imageSrcSet) {
              image.attr('srcset', imageSrcSet);

              if (imageSizes) {
                image.attr('sizes', imageSizes);
              }
            }

            image.attr('src', imageSource).animate({
              opacity: 1
            }, 200, function () {
              image.removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');
            });

            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
          });
        };

        imageToLoad.onerror = function () {
          image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

          _.$slider.trigger('lazyLoadError', [_, image, imageSource]);
        };

        imageToLoad.src = imageSource;
      });
    }

    if (_.options.centerMode === true) {
      if (_.options.infinite === true) {
        rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
        rangeEnd = rangeStart + _.options.slidesToShow + 2;
      } else {
        rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
        rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
      }
    } else {
      rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
      rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);

      if (_.options.fade === true) {
        if (rangeStart > 0) rangeStart--;
        if (rangeEnd <= _.slideCount) rangeEnd++;
      }
    }

    loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);

    if (_.options.lazyLoad === 'anticipated') {
      var prevSlide = rangeStart - 1,
          nextSlide = rangeEnd,
          $slides = _.$slider.find('.slick-slide');

      for (var i = 0; i < _.options.slidesToScroll; i++) {
        if (prevSlide < 0) prevSlide = _.slideCount - 1;
        loadRange = loadRange.add($slides.eq(prevSlide));
        loadRange = loadRange.add($slides.eq(nextSlide));
        prevSlide--;
        nextSlide++;
      }
    }

    loadImages(loadRange);

    if (_.slideCount <= _.options.slidesToShow) {
      cloneRange = _.$slider.find('.slick-slide');
      loadImages(cloneRange);
    } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
      cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
      loadImages(cloneRange);
    } else if (_.currentSlide === 0) {
      cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
      loadImages(cloneRange);
    }
  };

  Slick.prototype.loadSlider = function () {
    var _ = this;

    _.setPosition();

    _.$slideTrack.css({
      opacity: 1
    });

    _.$slider.removeClass('slick-loading');

    _.initUI();

    if (_.options.lazyLoad === 'progressive') {
      _.progressiveLazyLoad();
    }
  };

  Slick.prototype.next = Slick.prototype.slickNext = function () {
    var _ = this;

    _.changeSlide({
      data: {
        message: 'next'
      }
    });
  };

  Slick.prototype.orientationChange = function () {
    var _ = this;

    _.checkResponsive();

    _.setPosition();
  };

  Slick.prototype.pause = Slick.prototype.slickPause = function () {
    var _ = this;

    _.autoPlayClear();

    _.paused = true;
  };

  Slick.prototype.play = Slick.prototype.slickPlay = function () {
    var _ = this;

    _.autoPlay();

    _.options.autoplay = true;
    _.paused = false;
    _.focussed = false;
    _.interrupted = false;
  };

  Slick.prototype.postSlide = function (index) {
    var _ = this;

    if (!_.unslicked) {
      _.$slider.trigger('afterChange', [_, index]);

      _.animating = false;

      if (_.slideCount > _.options.slidesToShow) {
        _.setPosition();
      }

      _.swipeLeft = null;

      if (_.options.autoplay) {
        _.autoPlay();
      }

      if (_.options.accessibility === true) {
        _.initADA();

        if (_.options.focusOnChange) {
          var $currentSlide = $(_.$slides.get(_.currentSlide));
          $currentSlide.attr('tabindex', 0).focus();
        }

        _.$slider.trigger('afterInitADA', [_]);
      }
    }
  };

  Slick.prototype.prev = Slick.prototype.slickPrev = function () {
    var _ = this;

    _.changeSlide({
      data: {
        message: 'previous'
      }
    });
  };

  Slick.prototype.preventDefault = function (event) {
    event.preventDefault();
  };

  Slick.prototype.progressiveLazyLoad = function (tryCount) {
    tryCount = tryCount || 1;

    var _ = this,
        $imgsToLoad = $('img[data-lazy]', _.$slider),
        image,
        imageSource,
        imageSrcSet,
        imageSizes,
        imageToLoad;

    if ($imgsToLoad.length) {
      image = $imgsToLoad.first();
      imageSource = image.attr('data-lazy');
      imageSrcSet = image.attr('data-srcset');
      imageSizes = image.attr('data-sizes') || _.$slider.attr('data-sizes');
      imageToLoad = document.createElement('img');

      imageToLoad.onload = function () {
        if (imageSrcSet) {
          image.attr('srcset', imageSrcSet);

          if (imageSizes) {
            image.attr('sizes', imageSizes);
          }
        }

        image.attr('src', imageSource).removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');

        if (_.options.adaptiveHeight === true) {
          _.setPosition();
        }

        _.$slider.trigger('lazyLoaded', [_, image, imageSource]);

        _.progressiveLazyLoad();
      };

      imageToLoad.onerror = function () {
        if (tryCount < 3) {
          setTimeout(function () {
            _.progressiveLazyLoad(tryCount + 1);
          }, 500);
        } else {
          image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

          _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

          _.progressiveLazyLoad();
        }
      };

      imageToLoad.src = imageSource;
    } else {
      _.$slider.trigger('allImagesLoaded', [_]);
    }
  };

  Slick.prototype.refresh = function (initializing) {
    var _ = this,
        currentSlide,
        lastVisibleIndex;

    lastVisibleIndex = _.slideCount - _.options.slidesToShow; 

    if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {
      _.currentSlide = lastVisibleIndex;
    } 


    if (_.slideCount <= _.options.slidesToShow) {
      _.currentSlide = 0;
    }

    currentSlide = _.currentSlide;

    _.destroy(true);

    $.extend(_, _.initials, {
      currentSlide: currentSlide
    });

    _.init();

    if (!initializing) {
      _.changeSlide({
        data: {
          message: 'index',
          index: currentSlide
        }
      }, false);
    }
  };

  Slick.prototype.registerBreakpoints = function () {
    var _ = this,
        breakpoint,
        currentBreakpoint,
        l,
        responsiveSettings = _.options.responsive || null;

    if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {
      _.respondTo = _.options.respondTo || 'window';

      for (breakpoint in responsiveSettings) {
        l = _.breakpoints.length - 1;

        if (responsiveSettings.hasOwnProperty(breakpoint)) {
          currentBreakpoint = responsiveSettings[breakpoint].breakpoint; 

          while (l >= 0) {
            if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
              _.breakpoints.splice(l, 1);
            }

            l--;
          }

          _.breakpoints.push(currentBreakpoint);

          _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
        }
      }

      _.breakpoints.sort(function (a, b) {
        return _.options.mobileFirst ? a - b : b - a;
      });
    }
  };

  Slick.prototype.reinit = function () {
    var _ = this;

    _.$slides = _.$slideTrack.children(_.options.slide).addClass('slick-slide');
    _.slideCount = _.$slides.length;

    if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
      _.currentSlide = _.currentSlide - _.options.slidesToScroll;
    }

    if (_.slideCount <= _.options.slidesToShow) {
      _.currentSlide = 0;
    }

    _.registerBreakpoints();

    _.setProps();

    _.setupInfinite();

    _.buildArrows();

    _.updateArrows();

    _.initArrowEvents();

    _.buildDots();

    _.updateDots();

    _.initDotEvents();

    _.cleanUpSlideEvents();

    _.initSlideEvents();

    _.checkResponsive(false, true);

    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().on('click.slick', _.selectHandler);
    }

    _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

    _.setPosition();

    _.focusHandler();

    _.paused = !_.options.autoplay;

    _.autoPlay();

    _.$slider.trigger('reInit', [_]);
  };

  Slick.prototype.resize = function () {
    var _ = this;

    if ($(window).width() !== _.windowWidth) {
      clearTimeout(_.windowDelay);
      _.windowDelay = window.setTimeout(function () {
        _.windowWidth = $(window).width();

        _.checkResponsive();

        if (!_.unslicked) {
          _.setPosition();
        }
      }, 50);
    }
  };

  Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {
    var _ = this;

    if (typeof index === 'boolean') {
      removeBefore = index;
      index = removeBefore === true ? 0 : _.slideCount - 1;
    } else {
      index = removeBefore === true ? --index : index;
    }

    if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
      return false;
    }

    _.unload();

    if (removeAll === true) {
      _.$slideTrack.children().remove();
    } else {
      _.$slideTrack.children(this.options.slide).eq(index).remove();
    }

    _.$slides = _.$slideTrack.children(this.options.slide);

    _.$slideTrack.children(this.options.slide).detach();

    _.$slideTrack.append(_.$slides);

    _.$slidesCache = _.$slides;

    _.reinit();
  };

  Slick.prototype.setCSS = function (position) {
    var _ = this,
        positionProps = {},
        x,
        y;

    if (_.options.rtl === true) {
      position = -position;
    }

    x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
    y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';
    positionProps[_.positionProp] = position;

    if (_.transformsEnabled === false) {
      _.$slideTrack.css(positionProps);
    } else {
      positionProps = {};

      if (_.cssTransitions === false) {
        positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';

        _.$slideTrack.css(positionProps);
      } else {
        positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';

        _.$slideTrack.css(positionProps);
      }
    }
  };

  Slick.prototype.setDimensions = function () {
    var _ = this;

    if (_.options.vertical === false) {
      if (_.options.centerMode === true) {
        _.$list.css({
          padding: '0px ' + _.options.centerPadding
        });
      }
    } else {
      _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);

      if (_.options.centerMode === true) {
        _.$list.css({
          padding: _.options.centerPadding + ' 0px'
        });
      }
    }

    _.listWidth = _.$list.width();
    _.listHeight = _.$list.height();

    if (_.options.vertical === false && _.options.variableWidth === false) {
      _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);

      _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children('.slick-slide').length));
    } else if (_.options.variableWidth === true) {
      _.$slideTrack.width(5000 * _.slideCount);
    } else {
      _.slideWidth = Math.ceil(_.listWidth);

      _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length));
    }

    var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();

    if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
  };

  Slick.prototype.setFade = function () {
    var _ = this,
        targetLeft;

    _.$slides.each(function (index, element) {
      targetLeft = _.slideWidth * index * -1;

      if (_.options.rtl === true) {
        $(element).css({
          position: 'relative',
          right: targetLeft,
          top: 0,
          zIndex: _.options.zIndex - 2,
          opacity: 0
        });
      } else {
        $(element).css({
          position: 'relative',
          left: targetLeft,
          top: 0,
          zIndex: _.options.zIndex - 2,
          opacity: 0
        });
      }
    });

    _.$slides.eq(_.currentSlide).css({
      zIndex: _.options.zIndex - 1,
      opacity: 1
    });
  };

  Slick.prototype.setHeight = function () {
    var _ = this;

    if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);

      _.$list.css('height', targetHeight);
    }
  };

  Slick.prototype.setOption = Slick.prototype.slickSetOption = function () {
    var _ = this,
        l,
        item,
        option,
        value,
        refresh = false,
        type;

    if ($.type(arguments[0]) === 'object') {
      option = arguments[0];
      refresh = arguments[1];
      type = 'multiple';
    } else if ($.type(arguments[0]) === 'string') {
      option = arguments[0];
      value = arguments[1];
      refresh = arguments[2];

      if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {
        type = 'responsive';
      } else if (typeof arguments[1] !== 'undefined') {
        type = 'single';
      }
    }

    if (type === 'single') {
      _.options[option] = value;
    } else if (type === 'multiple') {
      $.each(option, function (opt, val) {
        _.options[opt] = val;
      });
    } else if (type === 'responsive') {
      for (item in value) {
        if ($.type(_.options.responsive) !== 'array') {
          _.options.responsive = [value[item]];
        } else {
          l = _.options.responsive.length - 1; 

          while (l >= 0) {
            if (_.options.responsive[l].breakpoint === value[item].breakpoint) {
              _.options.responsive.splice(l, 1);
            }

            l--;
          }

          _.options.responsive.push(value[item]);
        }
      }
    }

    if (refresh) {
      _.unload();

      _.reinit();
    }
  };

  Slick.prototype.setPosition = function () {
    var _ = this;

    _.setDimensions();

    _.setHeight();

    if (_.options.fade === false) {
      _.setCSS(_.getLeft(_.currentSlide));
    } else {
      _.setFade();
    }

    _.$slider.trigger('setPosition', [_]);
  };

  Slick.prototype.setProps = function () {
    var _ = this,
        bodyStyle = document.body.style;

    _.positionProp = _.options.vertical === true ? 'top' : 'left';

    if (_.positionProp === 'top') {
      _.$slider.addClass('slick-vertical');
    } else {
      _.$slider.removeClass('slick-vertical');
    }

    if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {
      if (_.options.useCSS === true) {
        _.cssTransitions = true;
      }
    }

    if (_.options.fade) {
      if (typeof _.options.zIndex === 'number') {
        if (_.options.zIndex < 3) {
          _.options.zIndex = 3;
        }
      } else {
        _.options.zIndex = _.defaults.zIndex;
      }
    }

    if (bodyStyle.OTransform !== undefined) {
      _.animType = 'OTransform';
      _.transformType = '-o-transform';
      _.transitionType = 'OTransition';
      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
    }

    if (bodyStyle.MozTransform !== undefined) {
      _.animType = 'MozTransform';
      _.transformType = '-moz-transform';
      _.transitionType = 'MozTransition';
      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
    }

    if (bodyStyle.webkitTransform !== undefined) {
      _.animType = 'webkitTransform';
      _.transformType = '-webkit-transform';
      _.transitionType = 'webkitTransition';
      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
    }

    if (bodyStyle.msTransform !== undefined) {
      _.animType = 'msTransform';
      _.transformType = '-ms-transform';
      _.transitionType = 'msTransition';
      if (bodyStyle.msTransform === undefined) _.animType = false;
    }

    if (bodyStyle.transform !== undefined && _.animType !== false) {
      _.animType = 'transform';
      _.transformType = 'transform';
      _.transitionType = 'transition';
    }

    _.transformsEnabled = _.options.useTransform && _.animType !== null && _.animType !== false;
  };

  Slick.prototype.setSlideClasses = function (index) {
    var _ = this,
        centerOffset,
        allSlides,
        indexOffset,
        remainder;

    allSlides = _.$slider.find('.slick-slide').removeClass('slick-active slick-center slick-current').attr('aria-hidden', 'true');

    _.$slides.eq(index).addClass('slick-current');

    if (_.options.centerMode === true) {
      var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;
      centerOffset = Math.floor(_.options.slidesToShow / 2);

      if (_.options.infinite === true) {
        if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {
          _.$slides.slice(index - centerOffset + evenCoef, index + centerOffset + 1).addClass('slick-active').attr('aria-hidden', 'false');
        } else {
          indexOffset = _.options.slidesToShow + index;
          allSlides.slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2).addClass('slick-active').attr('aria-hidden', 'false');
        }

        if (index === 0) {
          allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass('slick-center');
        } else if (index === _.slideCount - 1) {
          allSlides.eq(_.options.slidesToShow).addClass('slick-center');
        }
      }

      _.$slides.eq(index).addClass('slick-center');
    } else {
      if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {
        _.$slides.slice(index, index + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
      } else if (allSlides.length <= _.options.slidesToShow) {
        allSlides.addClass('slick-active').attr('aria-hidden', 'false');
      } else {
        remainder = _.slideCount % _.options.slidesToShow;
        indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

        if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {
          allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass('slick-active').attr('aria-hidden', 'false');
        } else {
          allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
        }
      }
    }

    if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
      _.lazyLoad();
    }
  };

  Slick.prototype.setupInfinite = function () {
    var _ = this,
        i,
        slideIndex,
        infiniteCount;

    if (_.options.fade === true) {
      _.options.centerMode = false;
    }

    if (_.options.infinite === true && _.options.fade === false) {
      slideIndex = null;

      if (_.slideCount > _.options.slidesToShow) {
        if (_.options.centerMode === true) {
          infiniteCount = _.options.slidesToShow + 1;
        } else {
          infiniteCount = _.options.slidesToShow;
        }

        var $displayedSlides = _.$slides.filter('[data-slick-index]');

        for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {
          slideIndex = i - 1;
          $($displayedSlides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');
        }

        for (i = 0; i < infiniteCount; i += 1) {
          slideIndex = i;
          $($displayedSlides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');
        }

        _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {
          $(this).attr('id', '');
        });
      }
    }
  };

  Slick.prototype.interrupt = function (toggle) {
    var _ = this;

    if (!toggle) {
      _.autoPlay();
    }

    _.interrupted = toggle;
  };

  Slick.prototype.selectHandler = function (event) {
    var _ = this;

    var targetElement = $(event.target).is('.slick-slide') ? $(event.target) : $(event.target).parents('.slick-slide');
    var index = parseInt(targetElement.attr('data-slick-index'));
    if (!index) index = 0;

    if (_.slideCount <= _.options.slidesToShow) {
      _.slideHandler(index, false, true);

      return;
    }

    _.slideHandler(index);
  };

  Slick.prototype.slideHandler = function (index, sync, dontAnimate) {
    var targetSlide,
        animSlide,
        oldSlide,
        slideLeft,
        targetLeft = null,
        _ = this,
        navTarget;

    sync = sync || false;

    if (_.animating === true && _.options.waitForAnimate === true) {
      return;
    }

    if (_.options.fade === true && _.currentSlide === index) {
      return;
    }

    if (sync === false) {
      _.asNavFor(index);
    }

    targetSlide = index;
    targetLeft = _.getLeft(targetSlide);
    slideLeft = _.getLeft(_.currentSlide);
    _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

    if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
      if (_.options.fade === false) {
        targetSlide = _.currentSlide;

        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
          _.animateSlide(slideLeft, function () {
            _.postSlide(targetSlide);
          });
        } else {
          _.postSlide(targetSlide);
        }
      }

      return;
    } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {
      if (_.options.fade === false) {
        targetSlide = _.currentSlide;

        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
          _.animateSlide(slideLeft, function () {
            _.postSlide(targetSlide);
          });
        } else {
          _.postSlide(targetSlide);
        }
      }

      return;
    }

    if (_.options.autoplay) {
      clearInterval(_.autoPlayTimer);
    }

    if (targetSlide < 0) {
      if (_.slideCount % _.options.slidesToScroll !== 0) {
        animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;
      } else {
        animSlide = _.slideCount + targetSlide;
      }
    } else if (targetSlide >= _.slideCount) {
      if (_.slideCount % _.options.slidesToScroll !== 0) {
        animSlide = 0;
      } else {
        animSlide = targetSlide - _.slideCount;
      }
    } else {
      animSlide = targetSlide;
    }

    _.animating = true;

    _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

    oldSlide = _.currentSlide;
    _.currentSlide = animSlide;

    _.setSlideClasses(_.currentSlide);

    if (_.options.asNavFor) {
      navTarget = _.getNavTarget();
      navTarget = navTarget.slick('getSlick');

      if (navTarget.slideCount <= navTarget.options.slidesToShow) {
        navTarget.setSlideClasses(_.currentSlide);
      }
    } 


    if (_.currentSlide != oldSlide + 1 && _.currentSlide != oldSlide - 1) {
      if (_.currentSlide < oldSlide) {
        var slide = $(_.$slides[oldSlide]).next();
        $(slide).addClass('slick-center');

        _.$slider.one('afterChange', function () {
          $(slide).removeClass('slick-center');
        });
      }
    }

    _.updateDots();

    _.updateArrows();

    if (_.options.fade === true) {
      if (dontAnimate !== true) {
        _.fadeSlideOut(oldSlide);

        _.fadeSlide(animSlide, function () {
          _.postSlide(animSlide);
        });
      } else {
        _.postSlide(animSlide);
      }

      _.animateHeight();

      return;
    }

    if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
      _.animateSlide(targetLeft, function () {
        _.postSlide(animSlide);
      });
    } else {
      _.postSlide(animSlide);
    }
  };

  Slick.prototype.startLoad = function () {
    var _ = this;

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.hide();

      _.$nextArrow.hide();
    }

    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      _.$dots.hide();
    }

    _.$slider.addClass('slick-loading');
  };

  Slick.prototype.swipeDirection = function () {
    var xDist,
        yDist,
        r,
        swipeAngle,
        _ = this;

    xDist = _.touchObject.startX - _.touchObject.curX;
    yDist = _.touchObject.startY - _.touchObject.curY;
    r = Math.atan2(yDist, xDist);
    swipeAngle = Math.round(r * 180 / Math.PI);

    if (swipeAngle < 0) {
      swipeAngle = 360 - Math.abs(swipeAngle);
    }

    if (swipeAngle <= 45 && swipeAngle >= 0) {
      return _.options.rtl === false ? 'left' : 'right';
    }

    if (swipeAngle <= 360 && swipeAngle >= 315) {
      return _.options.rtl === false ? 'left' : 'right';
    }

    if (swipeAngle >= 135 && swipeAngle <= 225) {
      return _.options.rtl === false ? 'right' : 'left';
    }

    if (_.options.verticalSwiping === true) {
      if (swipeAngle >= 35 && swipeAngle <= 135) {
        return 'down';
      } else {
        return 'up';
      }
    }

    return 'vertical';
  };

  Slick.prototype.swipeEnd = function (event) {
    var _ = this,
        slideCount,
        direction;

    _.dragging = false;
    _.swiping = false;

    if (_.scrolling) {
      _.scrolling = false;
      return false;
    }

    _.interrupted = false;
    _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;

    if (_.touchObject.curX === undefined) {
      return false;
    }

    if (_.touchObject.edgeHit === true) {
      _.$slider.trigger('edge', [_, _.swipeDirection()]);
    }

    if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {
      direction = _.swipeDirection();

      switch (direction) {
        case 'left':
        case 'down':
          slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();
          _.currentDirection = 0;
          break;

        case 'right':
        case 'up':
          slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();
          _.currentDirection = 1;
          break;

        default:
      }

      if (direction != 'vertical') {
        _.slideHandler(slideCount);

        _.touchObject = {};

        _.$slider.trigger('swipe', [_, direction]);
      }
    } else {
      if (_.touchObject.startX !== _.touchObject.curX) {
        _.slideHandler(_.currentSlide);

        _.touchObject = {};
      }
    }
  };

  Slick.prototype.swipeHandler = function (event) {
    var _ = this;

    if (_.options.swipe === false || 'ontouchend' in document && _.options.swipe === false) {
      return;
    } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
      return;
    }

    _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;
    _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;

    if (_.options.verticalSwiping === true) {
      _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;
    }

    switch (event.data.action) {
      case 'start':
        _.swipeStart(event);

        break;

      case 'move':
        _.swipeMove(event);

        break;

      case 'end':
        _.swipeEnd(event);

        break;
    }
  };

  Slick.prototype.swipeMove = function (event) {
    var _ = this,
        edgeWasHit = false,
        curLeft,
        swipeDirection,
        swipeLength,
        positionOffset,
        touches,
        verticalSwipeLength;

    touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

    if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
      return false;
    }

    curLeft = _.getLeft(_.currentSlide);
    _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
    _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;
    _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));
    verticalSwipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));

    if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
      _.scrolling = true;
      return false;
    }

    if (_.options.verticalSwiping === true) {
      _.touchObject.swipeLength = verticalSwipeLength;
    }

    swipeDirection = _.swipeDirection();

    if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
      _.swiping = true;
      event.preventDefault();
    }

    positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);

    if (_.options.verticalSwiping === true) {
      positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
    }

    swipeLength = _.touchObject.swipeLength;
    _.touchObject.edgeHit = false;

    if (_.options.infinite === false) {
      if (_.currentSlide === 0 && swipeDirection === 'right' || _.currentSlide >= _.getDotCount() && swipeDirection === 'left') {
        swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
        _.touchObject.edgeHit = true;
      }
    }

    if (_.options.vertical === false) {
      _.swipeLeft = curLeft + swipeLength * positionOffset;
    } else {
      _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;
    }

    if (_.options.verticalSwiping === true) {
      _.swipeLeft = curLeft + swipeLength * positionOffset;
    }

    if (_.options.fade === true || _.options.touchMove === false) {
      return false;
    }

    if (_.animating === true) {
      _.swipeLeft = null;
      return false;
    }

    _.setCSS(_.swipeLeft);
  };

  Slick.prototype.swipeStart = function (event) {
    var _ = this,
        touches;

    _.interrupted = true;

    if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
      _.touchObject = {};
      return false;
    }

    if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
      touches = event.originalEvent.touches[0];
    }

    _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
    _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;
    _.dragging = true;
  };

  Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {
    var _ = this;

    if (_.$slidesCache !== null) {
      _.unload();

      _.$slideTrack.children(this.options.slide).detach();

      _.$slidesCache.appendTo(_.$slideTrack);

      _.reinit();
    }
  };

  Slick.prototype.unload = function () {
    var _ = this;

    $('.slick-cloned', _.$slider).remove();

    if (_.$dots) {
      _.$dots.remove();
    }

    if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
      _.$prevArrow.remove();
    }

    if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
      _.$nextArrow.remove();
    }

    _.$slides.removeClass('slick-slide slick-active slick-visible slick-current').attr('aria-hidden', 'true').css('width', '');
  };

  Slick.prototype.unslick = function (fromBreakpoint) {
    var _ = this;

    _.$slider.trigger('unslick', [_, fromBreakpoint]);

    _.destroy();
  };

  Slick.prototype.updateArrows = function () {
    var _ = this,
        centerOffset;

    centerOffset = Math.floor(_.options.slidesToShow / 2);

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {
      _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

      _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

      if (_.currentSlide === 0) {
        _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');

        _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
      } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {
        _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');

        _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
      } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {
        _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');

        _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
      }
    }
  };

  Slick.prototype.updateDots = function () {
    var _ = this;

    if (_.$dots !== null) {
      _.$dots.find('li').removeClass('slick-active').end();

      _.$dots.find('li').eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass('slick-active');
    }
  };

  Slick.prototype.visibility = function () {
    var _ = this;

    if (_.options.autoplay) {
      if (document[_.hidden]) {
        _.interrupted = true;
      } else {
        _.interrupted = false;
      }
    }
  };

  $.fn.slick = function () {
    var _ = this,
        opt = arguments[0],
        args = Array.prototype.slice.call(arguments, 1),
        l = _.length,
        i,
        ret;

    for (i = 0; i < l; i++) {
      if (_typeof(opt) == 'object' || typeof opt == 'undefined') _[i].slick = new Slick(_[i], opt);else ret = _[i].slick[opt].apply(_[i].slick, args);
      if (typeof ret != 'undefined') return ret;
    }

    return _;
  };
});
"use strict";

;

(function (window, document) {
    'use strict';

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var seppuku = false;
    var isWindowDefined = typeof window !== 'undefined';

    if (!isWindowDefined || !window.getComputedStyle) seppuku = true;
    else {
        (function () {
            var testNode = document.createElement('div');
            if (['', '-webkit-', '-moz-', '-ms-'].some(function (prefix) {
                try {
                    testNode.style.position = prefix + 'sticky';
                } catch (e) { }

                return testNode.style.position != '';
            })) seppuku = true;
        })();
    }

    var isInitialized = false;

    var shadowRootExists = typeof ShadowRoot !== 'undefined';

    var scroll = {
        top: null,
        left: null
    };

    var stickies = [];

    function extend(targetObj, sourceObject) {
        for (var key in sourceObject) {
            if (sourceObject.hasOwnProperty(key)) {
                targetObj[key] = sourceObject[key];
            }
        }
    }

    function parseNumeric(val) {
        return parseFloat(val) || 0;
    }

    function getDocOffsetTop(node) {
        var docOffsetTop = 0;

        while (node) {
            docOffsetTop += node.offsetTop;
            node = node.offsetParent;
        }

        return docOffsetTop;
    }


    var Sticky = function () {
        function Sticky(node) {
            _classCallCheck(this, Sticky);

            if (!(node instanceof HTMLElement)) throw new Error('First argument must be HTMLElement');
            if (stickies.some(function (sticky) {
                return sticky._node === node;
            })) throw new Error('Stickyfill is already applied to this node');
            this._node = node;
            this._stickyMode = null;
            this._active = false;
            stickies.push(this);
            this.refresh();
        }

        _createClass(Sticky, [{
            key: 'refresh',
            value: function refresh() {
                if (seppuku || this._removed) return;
                if (this._active) this._deactivate();
                var node = this._node;

                var nodeComputedStyle = getComputedStyle(node);
                var nodeComputedProps = {
                    position: nodeComputedStyle.position,
                    top: nodeComputedStyle.top,
                    display: nodeComputedStyle.display,
                    marginTop: nodeComputedStyle.marginTop,
                    marginBottom: nodeComputedStyle.marginBottom,
                    marginLeft: nodeComputedStyle.marginLeft,
                    marginRight: nodeComputedStyle.marginRight,
                    cssFloat: nodeComputedStyle.cssFloat
                };

                if (isNaN(parseFloat(nodeComputedProps.top)) || nodeComputedProps.display == 'table-cell' || nodeComputedProps.display == 'none') return;
                this._active = true;

                var originalPosition = node.style.position;
                if (nodeComputedStyle.position == 'sticky' || nodeComputedStyle.position == '-webkit-sticky') node.style.position = 'static';

                var referenceNode = node.parentNode;
                var parentNode = shadowRootExists && referenceNode instanceof ShadowRoot ? referenceNode.host : referenceNode;
                var nodeWinOffset = node.getBoundingClientRect();
                var parentWinOffset = parentNode.getBoundingClientRect();
                var parentComputedStyle = getComputedStyle(parentNode);
                this._parent = {
                    node: parentNode,
                    styles: {
                        position: parentNode.style.position
                    },
                    offsetHeight: parentNode.offsetHeight
                };
                this._offsetToWindow = {
                    left: nodeWinOffset.left,
                    right: document.documentElement.clientWidth - nodeWinOffset.right
                };
                this._offsetToParent = {
                    top: nodeWinOffset.top - parentWinOffset.top - parseNumeric(parentComputedStyle.borderTopWidth),
                    left: nodeWinOffset.left - parentWinOffset.left - parseNumeric(parentComputedStyle.borderLeftWidth),
                    right: -nodeWinOffset.right + parentWinOffset.right - parseNumeric(parentComputedStyle.borderRightWidth)
                };
                this._styles = {
                    position: originalPosition,
                    top: node.style.top,
                    bottom: node.style.bottom,
                    left: node.style.left,
                    right: node.style.right,
                    width: node.style.width,
                    marginTop: node.style.marginTop,
                    marginLeft: node.style.marginLeft,
                    marginRight: node.style.marginRight
                };
                var nodeTopValue = parseNumeric(nodeComputedProps.top);
                this._limits = {
                    start: nodeWinOffset.top + window.pageYOffset - nodeTopValue,
                    end: parentWinOffset.top + window.pageYOffset + parentNode.offsetHeight - parseNumeric(parentComputedStyle.borderBottomWidth) - node.offsetHeight - nodeTopValue - parseNumeric(nodeComputedProps.marginBottom)
                };

                var parentPosition = parentComputedStyle.position;

                if (parentPosition != 'absolute' && parentPosition != 'relative') {
                    parentNode.style.position = 'relative';
                }


                this._recalcPosition();


                var clone = this._clone = {};
                clone.node = document.createElement('div');

                extend(clone.node.style, {
                    width: nodeWinOffset.right - nodeWinOffset.left + 'px',
                    height: nodeWinOffset.bottom - nodeWinOffset.top + 'px',
                    marginTop: nodeComputedProps.marginTop,
                    marginBottom: nodeComputedProps.marginBottom,
                    marginLeft: nodeComputedProps.marginLeft,
                    marginRight: nodeComputedProps.marginRight,
                    cssFloat: nodeComputedProps.cssFloat,
                    padding: 0,
                    border: 0,
                    borderSpacing: 0,
                    fontSize: '1em',
                    position: 'static'
                });
                referenceNode.insertBefore(clone.node, node);
                clone.docOffsetTop = getDocOffsetTop(clone.node);
            }
        }, {
            key: '_recalcPosition',
            value: function _recalcPosition() {
                if (!this._active || this._removed) return;
                var stickyMode = scroll.top <= this._limits.start ? 'start' : scroll.top >= this._limits.end ? 'end' : 'middle';
                if (this._stickyMode == stickyMode) return;

                switch (stickyMode) {
                    case 'start':
                        extend(this._node.style, {
                            position: 'absolute',
                            left: this._offsetToParent.left + 'px',
                            right: this._offsetToParent.right + 'px',
                            top: this._offsetToParent.top + 'px',
                            bottom: 'auto',
                            width: 'auto',
                            marginLeft: 0,
                            marginRight: 0,
                            marginTop: 0
                        });
                        break;

                    case 'middle':
                        extend(this._node.style, {
                            position: 'fixed',
                            left: this._offsetToWindow.left + 'px',
                            right: this._offsetToWindow.right + 'px',
                            top: this._styles.top,
                            bottom: 'auto',
                            width: 'auto',
                            marginLeft: 0,
                            marginRight: 0,
                            marginTop: 0
                        });
                        break;

                    case 'end':
                        extend(this._node.style, {
                            position: 'absolute',
                            left: this._offsetToParent.left + 'px',
                            right: this._offsetToParent.right + 'px',
                            top: 'auto',
                            bottom: 0,
                            width: 'auto',
                            marginLeft: 0,
                            marginRight: 0
                        });
                        break;
                }

                this._stickyMode = stickyMode;
            }
        }, {
            key: '_fastCheck',
            value: function _fastCheck() {
                if (!this._active || this._removed) return;
                if (Math.abs(getDocOffsetTop(this._clone.node) - this._clone.docOffsetTop) > 1 || Math.abs(this._parent.node.offsetHeight - this._parent.offsetHeight) > 1) this.refresh();
            }
        }, {
            key: '_deactivate',
            value: function _deactivate() {
                var _this = this;

                if (!this._active || this._removed) return;

                this._clone.node.parentNode.removeChild(this._clone.node);

                delete this._clone;
                extend(this._node.style, this._styles);
                delete this._styles;

                if (!stickies.some(function (sticky) {
                    return sticky !== _this && sticky._parent && sticky._parent.node === _this._parent.node;
                })) {
                    extend(this._parent.node.style, this._parent.styles);
                }

                delete this._parent;
                this._stickyMode = null;
                this._active = false;
                delete this._offsetToWindow;
                delete this._offsetToParent;
                delete this._limits;
            }
        }, {
            key: 'remove',
            value: function remove() {
                var _this2 = this;

                this._deactivate();

                stickies.some(function (sticky, index) {
                    if (sticky._node === _this2._node) {
                        stickies.splice(index, 1);
                        return true;
                    }
                });
                this._removed = true;
            }
        }]);

        return Sticky;
    }();


    var Stickyfill = {
        stickies: stickies,
        Sticky: Sticky,
        forceSticky: function forceSticky() {
            seppuku = false;
            init();
            this.refreshAll();
        },
        addOne: function addOne(node) {
            if (!(node instanceof HTMLElement)) {
                if (node.length && node[0]) node = node[0]; else return;
            }


            for (var i = 0; i < stickies.length; i++) {
                if (stickies[i]._node === node) return stickies[i];
            }


            return new Sticky(node);
        },
        add: function add(nodeList) {
            if (nodeList instanceof HTMLElement) nodeList = [nodeList];

            if (!nodeList.length) return;

            var addedStickies = [];

            var _loop = function _loop(i) {
                var node = nodeList[i];

                if (!(node instanceof HTMLElement)) {
                    addedStickies.push(void 0);
                    return 'continue';
                }


                if (stickies.some(function (sticky) {
                    if (sticky._node === node) {
                        addedStickies.push(sticky);
                        return true;
                    }
                })) return 'continue';

                addedStickies.push(new Sticky(node));
            };

            for (var i = 0; i < nodeList.length; i++) {
                var _ret2 = _loop(i);

                if (_ret2 === 'continue') continue;
            }

            return addedStickies;
        },
        refreshAll: function refreshAll() {
            stickies.forEach(function (sticky) {
                return sticky.refresh();
            });
        },
        removeOne: function removeOne(node) {
            if (!(node instanceof HTMLElement)) {
                if (node.length && node[0]) node = node[0]; else return;
            }


            stickies.some(function (sticky) {
                if (sticky._node === node) {
                    sticky.remove();
                    return true;
                }
            });
        },
        remove: function remove(nodeList) {
            if (nodeList instanceof HTMLElement) nodeList = [nodeList];

            if (!nodeList.length) return;

            var _loop2 = function _loop2(i) {
                var node = nodeList[i];
                stickies.some(function (sticky) {
                    if (sticky._node === node) {
                        sticky.remove();
                        return true;
                    }
                });
            };

            for (var i = 0; i < nodeList.length; i++) {
                _loop2(i);
            }
        },
        removeAll: function removeAll() {
            while (stickies.length) {
                stickies[0].remove();
            }
        }
    };

    function init() {
        if (isInitialized) {
            return;
        }

        isInitialized = true;

        function checkScroll() {
            if (window.pageXOffset != scroll.left) {
                scroll.top = window.pageYOffset;
                scroll.left = window.pageXOffset;
                Stickyfill.refreshAll();
            } else if (window.pageYOffset != scroll.top) {
                scroll.top = window.pageYOffset;
                scroll.left = window.pageXOffset;

                stickies.forEach(function (sticky) {
                    return sticky._recalcPosition();
                });
            }
        }

        checkScroll();
        window.addEventListener('scroll', checkScroll);

        window.addEventListener('resize', Stickyfill.refreshAll);
        window.addEventListener('orientationchange', Stickyfill.refreshAll);

        var fastCheckTimer = void 0;

        function startFastCheckTimer() {
            fastCheckTimer = setInterval(function () {
                stickies.forEach(function (sticky) {
                    return sticky._fastCheck();
                });
            }, 500);
        }

        function stopFastCheckTimer() {
            clearInterval(fastCheckTimer);
        }

        var docHiddenKey = void 0;
        var visibilityChangeEventName = void 0;

        if ('hidden' in document) {
            docHiddenKey = 'hidden';
            visibilityChangeEventName = 'visibilitychange';
        } else if ('webkitHidden' in document) {
            docHiddenKey = 'webkitHidden';
            visibilityChangeEventName = 'webkitvisibilitychange';
        }

        if (visibilityChangeEventName) {
            if (!document[docHiddenKey]) startFastCheckTimer();
            document.addEventListener(visibilityChangeEventName, function () {
                if (document[docHiddenKey]) {
                    stopFastCheckTimer();
                } else {
                    startFastCheckTimer();
                }
            });
        } else startFastCheckTimer();
    }

    if (!seppuku) init();

    if (typeof module != 'undefined' && module.exports) {
        module.exports = Stickyfill;
    } else if (isWindowDefined) {
        window.Stickyfill = Stickyfill;
    }
})(window, document);
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

;

(function (factory) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object' && module.exports) {
    module.exports = function (root, jQuery) {
      if (jQuery === undefined) {
        if (typeof window !== 'undefined') {
          jQuery = require('jquery');
        } else {
          jQuery = require('jquery')(root);
        }
      }

      factory(jQuery);
      return jQuery;
    };
  } else {
    factory(jQuery);
  }
})(function (jQuery) {
  var S2 = function () {
    if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
      var S2 = jQuery.fn.select2.amd;
    }

    var S2;

    (function () {
      if (!S2 || !S2.requirejs) {
        if (!S2) {
          S2 = {};
        } else {
          require = S2;
        }



        var requirejs, require, define;

        (function (undef) {
          var main,
              _req,
              makeMap,
              handlers,
              defined = {},
              waiting = {},
              config = {},
              defining = {},
              hasOwn = Object.prototype.hasOwnProperty,
              aps = [].slice,
              jsSuffixRegExp = /\.js$/;

          function hasProp(obj, prop) {
            return hasOwn.call(obj, prop);
          }


          function normalize(name, baseName) {
            var nameParts,
                nameSegment,
                mapValue,
                foundMap,
                lastIndex,
                foundI,
                foundStarMap,
                starI,
                i,
                j,
                part,
                normalizedBaseParts,
                baseParts = baseName && baseName.split("/"),
                map = config.map,
                starMap = map && map['*'] || {}; 

            if (name) {
              name = name.split('/');
              lastIndex = name.length - 1; 

              if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
              } 


              if (name[0].charAt(0) === '.' && baseParts) {
                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                name = normalizedBaseParts.concat(name);
              } 


              for (i = 0; i < name.length; i++) {
                part = name[i];

                if (part === '.') {
                  name.splice(i, 1);
                  i -= 1;
                } else if (part === '..') {
                  if (i === 0 || i === 1 && name[2] === '..' || name[i - 1] === '..') {
                    continue;
                  } else if (i > 0) {
                    name.splice(i - 1, 2);
                    i -= 2;
                  }
                }
              } 


              name = name.join('/');
            } 


            if ((baseParts || starMap) && map) {
              nameParts = name.split('/');

              for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                  for (j = baseParts.length; j > 0; j -= 1) {
                    mapValue = map[baseParts.slice(0, j).join('/')]; 

                    if (mapValue) {
                      mapValue = mapValue[nameSegment];

                      if (mapValue) {
                        foundMap = mapValue;
                        foundI = i;
                        break;
                      }
                    }
                  }
                }

                if (foundMap) {
                  break;
                } 


                if (!foundStarMap && starMap && starMap[nameSegment]) {
                  foundStarMap = starMap[nameSegment];
                  starI = i;
                }
              }

              if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
              }

              if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
              }
            }

            return name;
          }

          function makeRequire(relName, forceSync) {
            return function () {
              var args = aps.call(arguments, 0); 

              if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
              }

              return _req.apply(undef, args.concat([relName, forceSync]));
            };
          }

          function makeNormalize(relName) {
            return function (name) {
              return normalize(name, relName);
            };
          }

          function makeLoad(depName) {
            return function (value) {
              defined[depName] = value;
            };
          }

          function callDep(name) {
            if (hasProp(waiting, name)) {
              var args = waiting[name];
              delete waiting[name];
              defining[name] = true;
              main.apply(undef, args);
            }

            if (!hasProp(defined, name) && !hasProp(defining, name)) {
              throw new Error('No ' + name);
            }

            return defined[name];
          } 


          function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;

            if (index > -1) {
              prefix = name.substring(0, index);
              name = name.substring(index + 1, name.length);
            }

            return [prefix, name];
          } 


          function makeRelParts(relName) {
            return relName ? splitPrefix(relName) : [];
          }


          makeMap = function makeMap(name, relParts) {
            var plugin,
                parts = splitPrefix(name),
                prefix = parts[0],
                relResourceName = relParts[1];
            name = parts[1];

            if (prefix) {
              prefix = normalize(prefix, relResourceName);
              plugin = callDep(prefix);
            } 


            if (prefix) {
              if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relResourceName));
              } else {
                name = normalize(name, relResourceName);
              }
            } else {
              name = normalize(name, relResourceName);
              parts = splitPrefix(name);
              prefix = parts[0];
              name = parts[1];

              if (prefix) {
                plugin = callDep(prefix);
              }
            } 


            return {
              f: prefix ? prefix + '!' + name : name,
              n: name,
              pr: prefix,
              p: plugin
            };
          };

          function makeConfig(name) {
            return function () {
              return config && config.config && config.config[name] || {};
            };
          }

          handlers = {
            require: function require(name) {
              return makeRequire(name);
            },
            exports: function exports(name) {
              var e = defined[name];

              if (typeof e !== 'undefined') {
                return e;
              } else {
                return defined[name] = {};
              }
            },
            module: function module(name) {
              return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
              };
            }
          };

          main = function main(name, deps, callback, relName) {
            var cjsModule,
                depName,
                ret,
                map,
                i,
                relParts,
                args = [],
                callbackType = _typeof(callback),
                usingExports; 


            relName = relName || name;
            relParts = makeRelParts(relName); 

            if (callbackType === 'undefined' || callbackType === 'function') {
              deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;

              for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relParts);
                depName = map.f; 

                if (depName === "require") {
                  args[i] = handlers.require(name);
                } else if (depName === "exports") {
                  args[i] = handlers.exports(name);
                  usingExports = true;
                } else if (depName === "module") {
                  cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) || hasProp(waiting, depName) || hasProp(defining, depName)) {
                  args[i] = callDep(depName);
                } else if (map.p) {
                  map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                  args[i] = defined[depName];
                } else {
                  throw new Error(name + ' missing ' + depName);
                }
              }

              ret = callback ? callback.apply(defined[name], args) : undefined;

              if (name) {
                if (cjsModule && cjsModule.exports !== undef && cjsModule.exports !== defined[name]) {
                  defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                  defined[name] = ret;
                }
              }
            } else if (name) {
              defined[name] = callback;
            }
          };

          requirejs = require = _req = function req(deps, callback, relName, forceSync, alt) {
            if (typeof deps === "string") {
              if (handlers[deps]) {
                return handlers[deps](callback);
              } 


              return callDep(makeMap(deps, makeRelParts(callback)).f);
            } else if (!deps.splice) {
              config = deps;

              if (config.deps) {
                _req(config.deps, config.callback);
              }

              if (!callback) {
                return;
              }

              if (callback.splice) {
                deps = callback;
                callback = relName;
                relName = null;
              } else {
                deps = undef;
              }
            } 


            callback = callback || function () {}; 


            if (typeof relName === 'function') {
              relName = forceSync;
              forceSync = alt;
            } 


            if (forceSync) {
              main(undef, deps, callback, relName);
            } else {
              setTimeout(function () {
                main(undef, deps, callback, relName);
              }, 4);
            }

            return _req;
          };


          _req.config = function (cfg) {
            return _req(cfg);
          };


          requirejs._defined = defined;

          define = function define(name, deps, callback) {
            if (typeof name !== 'string') {
              throw new Error('See almond README: incorrect module build, no module name');
            } 


            if (!deps.splice) {
              callback = deps;
              deps = [];
            }

            if (!hasProp(defined, name) && !hasProp(waiting, name)) {
              waiting[name] = [name, deps, callback];
            }
          };

          define.amd = {
            jQuery: true
          };
        })();

        S2.requirejs = requirejs;
        S2.require = require;
        S2.define = define;
      }
    })();

    S2.define("almond", function () {});

    S2.define('jquery', [], function () {
      var _$ = jQuery || $;

      if (_$ == null && console && console.error) {
        void 0;
      }

      return _$;
    });
    S2.define('select2/utils', ['jquery'], function ($) {
      var Utils = {};

      Utils.Extend = function (ChildClass, SuperClass) {
        var __hasProp = {}.hasOwnProperty;

        function BaseConstructor() {
          this.constructor = ChildClass;
        }

        for (var key in SuperClass) {
          if (__hasProp.call(SuperClass, key)) {
            ChildClass[key] = SuperClass[key];
          }
        }

        BaseConstructor.prototype = SuperClass.prototype;
        ChildClass.prototype = new BaseConstructor();
        ChildClass.__super__ = SuperClass.prototype;
        return ChildClass;
      };

      function getMethods(theClass) {
        var proto = theClass.prototype;
        var methods = [];

        for (var methodName in proto) {
          var m = proto[methodName];

          if (typeof m !== 'function') {
            continue;
          }

          if (methodName === 'constructor') {
            continue;
          }

          methods.push(methodName);
        }

        return methods;
      }

      Utils.Decorate = function (SuperClass, DecoratorClass) {
        var decoratedMethods = getMethods(DecoratorClass);
        var superMethods = getMethods(SuperClass);

        function DecoratedClass() {
          var unshift = Array.prototype.unshift;
          var argCount = DecoratorClass.prototype.constructor.length;
          var calledConstructor = SuperClass.prototype.constructor;

          if (argCount > 0) {
            unshift.call(arguments, SuperClass.prototype.constructor);
            calledConstructor = DecoratorClass.prototype.constructor;
          }

          calledConstructor.apply(this, arguments);
        }

        DecoratorClass.displayName = SuperClass.displayName;

        function ctr() {
          this.constructor = DecoratedClass;
        }

        DecoratedClass.prototype = new ctr();

        for (var m = 0; m < superMethods.length; m++) {
          var superMethod = superMethods[m];
          DecoratedClass.prototype[superMethod] = SuperClass.prototype[superMethod];
        }

        var calledMethod = function calledMethod(methodName) {
          var originalMethod = function originalMethod() {};

          if (methodName in DecoratedClass.prototype) {
            originalMethod = DecoratedClass.prototype[methodName];
          }

          var decoratedMethod = DecoratorClass.prototype[methodName];
          return function () {
            var unshift = Array.prototype.unshift;
            unshift.call(arguments, originalMethod);
            return decoratedMethod.apply(this, arguments);
          };
        };

        for (var d = 0; d < decoratedMethods.length; d++) {
          var decoratedMethod = decoratedMethods[d];
          DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
        }

        return DecoratedClass;
      };

      var Observable = function Observable() {
        this.listeners = {};
      };

      Observable.prototype.on = function (event, callback) {
        this.listeners = this.listeners || {};

        if (event in this.listeners) {
          this.listeners[event].push(callback);
        } else {
          this.listeners[event] = [callback];
        }
      };

      Observable.prototype.trigger = function (event) {
        var slice = Array.prototype.slice;
        var params = slice.call(arguments, 1);
        this.listeners = this.listeners || {}; 

        if (params == null) {
          params = [];
        } 


        if (params.length === 0) {
          params.push({});
        } 


        params[0]._type = event;

        if (event in this.listeners) {
          this.invoke(this.listeners[event], slice.call(arguments, 1));
        }

        if ('*' in this.listeners) {
          this.invoke(this.listeners['*'], arguments);
        }
      };

      Observable.prototype.invoke = function (listeners, params) {
        for (var i = 0, len = listeners.length; i < len; i++) {
          listeners[i].apply(this, params);
        }
      };

      Utils.Observable = Observable;

      Utils.generateChars = function (length) {
        var chars = '';

        for (var i = 0; i < length; i++) {
          var randomChar = Math.floor(Math.random() * 36);
          chars += randomChar.toString(36);
        }

        return chars;
      };

      Utils.bind = function (func, context) {
        return function () {
          func.apply(context, arguments);
        };
      };

      Utils._convertData = function (data) {
        for (var originalKey in data) {
          var keys = originalKey.split('-');
          var dataLevel = data;

          if (keys.length === 1) {
            continue;
          }

          for (var k = 0; k < keys.length; k++) {
            var key = keys[k]; 

            key = key.substring(0, 1).toLowerCase() + key.substring(1);

            if (!(key in dataLevel)) {
              dataLevel[key] = {};
            }

            if (k == keys.length - 1) {
              dataLevel[key] = data[originalKey];
            }

            dataLevel = dataLevel[key];
          }

          delete data[originalKey];
        }

        return data;
      };

      Utils.hasScroll = function (index, el) {
        var $el = $(el);
        var overflowX = el.style.overflowX;
        var overflowY = el.style.overflowY; 

        if (overflowX === overflowY && (overflowY === 'hidden' || overflowY === 'visible')) {
          return false;
        }

        if (overflowX === 'scroll' || overflowY === 'scroll') {
          return true;
        }

        return $el.innerHeight() < el.scrollHeight || $el.innerWidth() < el.scrollWidth;
      };

      Utils.escapeMarkup = function (markup) {
        var replaceMap = {
          '\\': '&#92;',
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          '\'': '&#39;',
          '/': '&#47;'
        }; 

        if (typeof markup !== 'string') {
          return markup;
        }

        return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
          return replaceMap[match];
        });
      }; 


      Utils.appendMany = function ($element, $nodes) {
        if ($.fn.jquery.substr(0, 3) === '1.7') {
          var $jqNodes = $();
          $.map($nodes, function (node) {
            $jqNodes = $jqNodes.add(node);
          });
          $nodes = $jqNodes;
        }

        $element.append($nodes);
      }; 


      Utils.__cache = {};
      var id = 0;

      Utils.GetUniqueElementId = function (element) {
        var select2Id = element.getAttribute('data-select2-id');

        if (select2Id == null) {
          if (element.id) {
            select2Id = element.id;
            element.setAttribute('data-select2-id', select2Id);
          } else {
            element.setAttribute('data-select2-id', ++id);
            select2Id = id.toString();
          }
        }

        return select2Id;
      };

      Utils.StoreData = function (element, name, value) {
        var id = Utils.GetUniqueElementId(element);

        if (!Utils.__cache[id]) {
          Utils.__cache[id] = {};
        }

        Utils.__cache[id][name] = value;
      };

      Utils.GetData = function (element, name) {
        var id = Utils.GetUniqueElementId(element);

        if (name) {
          if (Utils.__cache[id]) {
            return Utils.__cache[id][name] != null ? Utils.__cache[id][name] : $(element).data(name); 
          }

          return $(element).data(name); 
        } else {
          return Utils.__cache[id];
        }
      };

      Utils.RemoveData = function (element) {
        var id = Utils.GetUniqueElementId(element);

        if (Utils.__cache[id] != null) {
          delete Utils.__cache[id];
        }
      };

      return Utils;
    });
    S2.define('select2/results', ['jquery', './utils'], function ($, Utils) {
      function Results($element, options, dataAdapter) {
        this.$element = $element;
        this.data = dataAdapter;
        this.options = options;

        Results.__super__.constructor.call(this);
      }

      Utils.Extend(Results, Utils.Observable);

      Results.prototype.render = function () {
        var $results = $('<ul class="select2-results__options" role="tree"></ul>');

        if (this.options.get('multiple')) {
          $results.attr('aria-multiselectable', 'true');
        }

        this.$results = $results;
        return $results;
      };

      Results.prototype.clear = function () {
        this.$results.empty();
      };

      Results.prototype.displayMessage = function (params) {
        var escapeMarkup = this.options.get('escapeMarkup');
        this.clear();
        this.hideLoading();
        var $message = $('<li role="treeitem" aria-live="assertive"' + ' class="select2-results__option"></li>');
        var message = this.options.get('translations').get(params.message);
        $message.append(escapeMarkup(message(params.args)));
        $message[0].className += ' select2-results__message';
        this.$results.append($message);
      };

      Results.prototype.hideMessages = function () {
        this.$results.find('.select2-results__message').remove();
      };

      Results.prototype.append = function (data) {
        this.hideLoading();
        var $options = [];

        if (data.results == null || data.results.length === 0) {
          if (this.$results.children().length === 0) {
            this.trigger('results:message', {
              message: 'noResults'
            });
          }

          return;
        }

        data.results = this.sort(data.results);

        for (var d = 0; d < data.results.length; d++) {
          var item = data.results[d];
          var $option = this.option(item);
          $options.push($option);
        }

        this.$results.append($options);
      };

      Results.prototype.position = function ($results, $dropdown) {
        var $resultsContainer = $dropdown.find('.select2-results');
        $resultsContainer.append($results);
      };

      Results.prototype.sort = function (data) {
        var sorter = this.options.get('sorter');
        return sorter(data);
      };

      Results.prototype.highlightFirstItem = function () {
        var $options = this.$results.find('.select2-results__option[aria-selected]');
        var $selected = $options.filter('[aria-selected=true]'); 

        if ($selected.length > 0) {
          $selected.first().trigger('mouseenter');
        } else {
          $options.first().trigger('mouseenter');
        }

        this.ensureHighlightVisible();
      };

      Results.prototype.setClasses = function () {
        var self = this;
        this.data.current(function (selected) {
          var selectedIds = $.map(selected, function (s) {
            return s.id.toString();
          });
          var $options = self.$results.find('.select2-results__option[aria-selected]');
          $options.each(function () {
            var $option = $(this);
            var item = Utils.GetData(this, 'data'); 

            var id = '' + item.id;

            if (item.element != null && item.element.selected || item.element == null && $.inArray(id, selectedIds) > -1) {
              $option.attr('aria-selected', 'true');
            } else {
              $option.attr('aria-selected', 'false');
            }
          });
        });
      };

      Results.prototype.showLoading = function (params) {
        this.hideLoading();
        var loadingMore = this.options.get('translations').get('searching');
        var loading = {
          disabled: true,
          loading: true,
          text: loadingMore(params)
        };
        var $loading = this.option(loading);
        $loading.className += ' loading-results';
        this.$results.prepend($loading);
      };

      Results.prototype.hideLoading = function () {
        this.$results.find('.loading-results').remove();
      };

      Results.prototype.option = function (data) {
        var option = document.createElement('li');
        option.className = 'select2-results__option';
        var attrs = {
          'role': 'treeitem',
          'aria-selected': 'false'
        };

        if (data.disabled) {
          delete attrs['aria-selected'];
          attrs['aria-disabled'] = 'true';
        }

        if (data.id == null) {
          delete attrs['aria-selected'];
        }

        if (data._resultId != null) {
          option.id = data._resultId;
        }

        if (data.title) {
          option.title = data.title;
        }

        if (data.children) {
          attrs.role = 'group';
          attrs['aria-label'] = data.text;
          delete attrs['aria-selected'];
        }

        for (var attr in attrs) {
          var val = attrs[attr];
          option.setAttribute(attr, val);
        }

        if (data.children) {
          var $option = $(option);
          var label = document.createElement('strong');
          label.className = 'select2-results__group';
          var $label = $(label);
          this.template(data, label);
          var $children = [];

          for (var c = 0; c < data.children.length; c++) {
            var child = data.children[c];
            var $child = this.option(child);
            $children.push($child);
          }

          var $childrenContainer = $('<ul></ul>', {
            'class': 'select2-results__options select2-results__options--nested'
          });
          $childrenContainer.append($children);
          $option.append(label);
          $option.append($childrenContainer);
        } else {
          this.template(data, option);
        }

        Utils.StoreData(option, 'data', data);
        return option;
      };

      Results.prototype.bind = function (container, $container) {
        var self = this;
        var id = container.id + '-results';
        this.$results.attr('id', id);
        container.on('results:all', function (params) {
          self.clear();
          self.append(params.data);

          if (container.isOpen()) {
            self.setClasses();
            self.highlightFirstItem();
          }
        });
        container.on('results:append', function (params) {
          self.append(params.data);

          if (container.isOpen()) {
            self.setClasses();
          }
        });
        container.on('query', function (params) {
          self.hideMessages();
          self.showLoading(params);
        });
        container.on('select', function () {
          if (!container.isOpen()) {
            return;
          }

          self.setClasses(); 

          if (!(self.options.get('multiple') && !self.options.get('closeOnSelect'))) {
            self.highlightFirstItem();
          }
        });
        container.on('unselect', function () {
          if (!container.isOpen()) {
            return;
          }

          self.setClasses();
          self.highlightFirstItem();
        });
        container.on('open', function () {
          self.$results.attr('aria-expanded', 'true');
          self.$results.attr('aria-hidden', 'false');
          self.setClasses();
          self.ensureHighlightVisible();
        });
        container.on('close', function () {
          self.$results.attr('aria-expanded', 'false');
          self.$results.attr('aria-hidden', 'true');
          self.$results.removeAttr('aria-activedescendant');
        });
        container.on('results:toggle', function () {
          var $highlighted = self.getHighlightedResults();

          if ($highlighted.length === 0) {
            return;
          }

          $highlighted.trigger('mouseup');
        });
        container.on('results:select', function () {
          var $highlighted = self.getHighlightedResults();

          if ($highlighted.length === 0) {
            return;
          }

          var data = Utils.GetData($highlighted[0], 'data');

          if ($highlighted.attr('aria-selected') == 'true') {
            self.trigger('close', {});
          } else {
            self.trigger('select', {
              data: data
            });
          }
        });
        container.on('results:previous', function () {
          var $highlighted = self.getHighlightedResults();
          var $options = self.$results.find('[aria-selected]');
          var currentIndex = $options.index($highlighted); 

          if (currentIndex <= 0) {
            return;
          }

          var nextIndex = currentIndex - 1; 

          if ($highlighted.length === 0) {
            nextIndex = 0;
          }

          var $next = $options.eq(nextIndex);
          $next.trigger('mouseenter');
          var currentOffset = self.$results.offset().top;
          var nextTop = $next.offset().top;
          var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

          if (nextIndex === 0) {
            self.$results.scrollTop(0);
          } else if (nextTop - currentOffset < 0) {
            self.$results.scrollTop(nextOffset);
          }
        });
        container.on('results:next', function () {
          var $highlighted = self.getHighlightedResults();
          var $options = self.$results.find('[aria-selected]');
          var currentIndex = $options.index($highlighted);
          var nextIndex = currentIndex + 1; 

          if (nextIndex >= $options.length) {
            return;
          }

          var $next = $options.eq(nextIndex);
          $next.trigger('mouseenter');
          var currentOffset = self.$results.offset().top + self.$results.outerHeight(false);
          var nextBottom = $next.offset().top + $next.outerHeight(false);
          var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

          if (nextIndex === 0) {
            self.$results.scrollTop(0);
          } else if (nextBottom > currentOffset) {
            self.$results.scrollTop(nextOffset);
          }
        });
        container.on('results:focus', function (params) {
          params.element.addClass('select2-results__option--highlighted');
        });
        container.on('results:message', function (params) {
          self.displayMessage(params);
        });

        if ($.fn.mousewheel) {
          this.$results.on('mousewheel', function (e) {
            var top = self.$results.scrollTop();
            var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;
            var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
            var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

            if (isAtTop) {
              self.$results.scrollTop(0);
              e.preventDefault();
              e.stopPropagation();
            } else if (isAtBottom) {
              self.$results.scrollTop(self.$results.get(0).scrollHeight - self.$results.height());
              e.preventDefault();
              e.stopPropagation();
            }
          });
        }

        this.$results.on('mouseup', '.select2-results__option[aria-selected]', function (evt) {
          var $this = $(this);
          var data = Utils.GetData(this, 'data');

          if ($this.attr('aria-selected') === 'true') {
            if (self.options.get('multiple')) {
              self.trigger('unselect', {
                originalEvent: evt,
                data: data
              });
            } else {
              self.trigger('close', {});
            }

            return;
          }

          self.trigger('select', {
            originalEvent: evt,
            data: data
          });
        });
        this.$results.on('mouseenter', '.select2-results__option[aria-selected]', function (evt) {
          var data = Utils.GetData(this, 'data');
          self.getHighlightedResults().removeClass('select2-results__option--highlighted');
          self.trigger('results:focus', {
            data: data,
            element: $(this)
          });
        });
      };

      Results.prototype.getHighlightedResults = function () {
        var $highlighted = this.$results.find('.select2-results__option--highlighted');
        return $highlighted;
      };

      Results.prototype.destroy = function () {
        this.$results.remove();
      };

      Results.prototype.ensureHighlightVisible = function () {
        var $highlighted = this.getHighlightedResults();

        if ($highlighted.length === 0) {
          return;
        }

        var $options = this.$results.find('[aria-selected]');
        var currentIndex = $options.index($highlighted);
        var currentOffset = this.$results.offset().top;
        var nextTop = $highlighted.offset().top;
        var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);
        var offsetDelta = nextTop - currentOffset;
        nextOffset -= $highlighted.outerHeight(false) * 2;

        if (currentIndex <= 2) {
          this.$results.scrollTop(0);
        } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
          this.$results.scrollTop(nextOffset);
        }
      };

      Results.prototype.template = function (result, container) {
        var template = this.options.get('templateResult');
        var escapeMarkup = this.options.get('escapeMarkup');
        var content = template(result, container);

        if (content == null) {
          container.style.display = 'none';
        } else if (typeof content === 'string') {
          container.innerHTML = escapeMarkup(content);
        } else {
          $(container).append(content);
        }
      };

      return Results;
    });
    S2.define('select2/keys', [], function () {
      var KEYS = {
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        ESC: 27,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        END: 35,
        HOME: 36,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        DELETE: 46
      };
      return KEYS;
    });
    S2.define('select2/selection/base', ['jquery', '../utils', '../keys'], function ($, Utils, KEYS) {
      function BaseSelection($element, options) {
        this.$element = $element;
        this.options = options;

        BaseSelection.__super__.constructor.call(this);
      }

      Utils.Extend(BaseSelection, Utils.Observable);

      BaseSelection.prototype.render = function () {
        var $selection = $('<span class="select2-selection" role="combobox" ' + ' aria-haspopup="true" aria-expanded="false">' + '</span>');
        this._tabindex = 0;

        if (Utils.GetData(this.$element[0], 'old-tabindex') != null) {
          this._tabindex = Utils.GetData(this.$element[0], 'old-tabindex');
        } else if (this.$element.attr('tabindex') != null) {
          this._tabindex = this.$element.attr('tabindex');
        }

        $selection.attr('title', this.$element.attr('title'));
        $selection.attr('tabindex', this._tabindex);
        this.$selection = $selection;
        return $selection;
      };

      BaseSelection.prototype.bind = function (container, $container) {
        var self = this;
        var id = container.id + '-container';
        var resultsId = container.id + '-results';
        this.container = container;
        this.$selection.on('focus', function (evt) {
          self.trigger('focus', evt);
        });
        this.$selection.on('blur', function (evt) {
          self._handleBlur(evt);
        });
        this.$selection.on('keydown', function (evt) {
          self.trigger('keypress', evt);

          if (evt.which === KEYS.SPACE) {
            evt.preventDefault();
          }
        });
        container.on('results:focus', function (params) {
          self.$selection.attr('aria-activedescendant', params.data._resultId);
        });
        container.on('selection:update', function (params) {
          self.update(params.data);
        });
        container.on('open', function () {
          self.$selection.attr('aria-expanded', 'true');
          self.$selection.attr('aria-owns', resultsId);

          self._attachCloseHandler(container);
        });
        container.on('close', function () {
          self.$selection.attr('aria-expanded', 'false');
          self.$selection.removeAttr('aria-activedescendant');
          self.$selection.removeAttr('aria-owns');
          self.$selection.focus();
          window.setTimeout(function () {
            self.$selection.focus();
          }, 0);

          self._detachCloseHandler(container);
        });
        container.on('enable', function () {
          self.$selection.attr('tabindex', self._tabindex);
        });
        container.on('disable', function () {
          self.$selection.attr('tabindex', '-1');
        });
      };

      BaseSelection.prototype._handleBlur = function (evt) {
        var self = this; 

        window.setTimeout(function () {
          if (document.activeElement == self.$selection[0] || $.contains(self.$selection[0], document.activeElement)) {
            return;
          }

          self.trigger('blur', evt);
        }, 1);
      };

      BaseSelection.prototype._attachCloseHandler = function (container) {
        var self = this;
        $(document.body).on('mousedown.select2.' + container.id, function (e) {
          var $target = $(e.target);
          var $select = $target.closest('.select2');
          var $all = $('.select2.select2-container--open');
          $all.each(function () {
            var $this = $(this);

            if (this == $select[0]) {
              return;
            }

            var $element = Utils.GetData(this, 'element');
            $element.select2('close');
          });
        });
      };

      BaseSelection.prototype._detachCloseHandler = function (container) {
        $(document.body).off('mousedown.select2.' + container.id);
      };

      BaseSelection.prototype.position = function ($selection, $container) {
        var $selectionContainer = $container.find('.selection');
        $selectionContainer.append($selection);
      };

      BaseSelection.prototype.destroy = function () {
        this._detachCloseHandler(this.container);
      };

      BaseSelection.prototype.update = function (data) {
        throw new Error('The `update` method must be defined in child classes.');
      };

      return BaseSelection;
    });
    S2.define('select2/selection/single', ['jquery', './base', '../utils', '../keys'], function ($, BaseSelection, Utils, KEYS) {
      function SingleSelection() {
        SingleSelection.__super__.constructor.apply(this, arguments);
      }

      Utils.Extend(SingleSelection, BaseSelection);

      SingleSelection.prototype.render = function () {
        var $selection = SingleSelection.__super__.render.call(this);

        $selection.addClass('select2-selection--single');
        $selection.html('<span class="select2-selection__rendered"></span>' + '<span class="select2-selection__arrow" role="presentation">' + '<b role="presentation"></b>' + '</span>');
        return $selection;
      };

      SingleSelection.prototype.bind = function (container, $container) {
        var self = this;

        SingleSelection.__super__.bind.apply(this, arguments);

        var id = container.id + '-container';
        this.$selection.find('.select2-selection__rendered').attr('id', id).attr('role', 'textbox').attr('aria-readonly', 'true');
        this.$selection.attr('aria-labelledby', id);
        this.$selection.on('mousedown', function (evt) {
          if (evt.which !== 1) {
            return;
          }

          self.trigger('toggle', {
            originalEvent: evt
          });
        });
        this.$selection.on('focus', function (evt) {
        });
        this.$selection.on('blur', function (evt) {
        });
        container.on('focus', function (evt) {
          if (!container.isOpen()) {
            self.$selection.focus();
          }
        });
      };

      SingleSelection.prototype.clear = function () {
        var $rendered = this.$selection.find('.select2-selection__rendered');
        $rendered.empty();
        $rendered.removeAttr('title'); 
      };

      SingleSelection.prototype.display = function (data, container) {
        var template = this.options.get('templateSelection');
        var escapeMarkup = this.options.get('escapeMarkup');
        return escapeMarkup(template(data, container));
      };

      SingleSelection.prototype.selectionContainer = function () {
        return $('<span></span>');
      };

      SingleSelection.prototype.update = function (data) {
        if (data.length === 0) {
          this.clear();
          return;
        }

        var selection = data[0];
        var $rendered = this.$selection.find('.select2-selection__rendered');
        var formatted = this.display(selection, $rendered);
        $rendered.empty().append(formatted);
        $rendered.attr('title', selection.title || selection.text);
      };

      return SingleSelection;
    });
    S2.define('select2/selection/multiple', ['jquery', './base', '../utils'], function ($, BaseSelection, Utils) {
      function MultipleSelection($element, options) {
        MultipleSelection.__super__.constructor.apply(this, arguments);
      }

      Utils.Extend(MultipleSelection, BaseSelection);

      MultipleSelection.prototype.render = function () {
        var $selection = MultipleSelection.__super__.render.call(this);

        $selection.addClass('select2-selection--multiple');
        $selection.html('<ul class="select2-selection__rendered"></ul>');
        return $selection;
      };

      MultipleSelection.prototype.bind = function (container, $container) {
        var self = this;

        MultipleSelection.__super__.bind.apply(this, arguments);

        this.$selection.on('click', function (evt) {
          self.trigger('toggle', {
            originalEvent: evt
          });
        });
        this.$selection.on('click', '.select2-selection__choice__remove', function (evt) {
          if (self.options.get('disabled')) {
            return;
          }

          var $remove = $(this);
          var $selection = $remove.parent();
          var data = Utils.GetData($selection[0], 'data');
          self.trigger('unselect', {
            originalEvent: evt,
            data: data
          });
        });
      };

      MultipleSelection.prototype.clear = function () {
        var $rendered = this.$selection.find('.select2-selection__rendered');
        $rendered.empty();
        $rendered.removeAttr('title');
      };

      MultipleSelection.prototype.display = function (data, container) {
        var template = this.options.get('templateSelection');
        var escapeMarkup = this.options.get('escapeMarkup');
        return escapeMarkup(template(data, container));
      };

      MultipleSelection.prototype.selectionContainer = function () {
        var $container = $('<li class="select2-selection__choice">' + '<span class="select2-selection__choice__remove" role="presentation">' + '&times;' + '</span>' + '</li>');
        return $container;
      };

      MultipleSelection.prototype.update = function (data) {
        this.clear();

        if (data.length === 0) {
          return;
        }

        var $selections = [];

        for (var d = 0; d < data.length; d++) {
          var selection = data[d];
          var $selection = this.selectionContainer();
          var formatted = this.display(selection, $selection);
          $selection.append(formatted);
          $selection.attr('title', selection.title || selection.text);
          Utils.StoreData($selection[0], 'data', selection);
          $selections.push($selection);
        }

        var $rendered = this.$selection.find('.select2-selection__rendered');
        Utils.appendMany($rendered, $selections);
      };

      return MultipleSelection;
    });
    S2.define('select2/selection/placeholder', ['../utils'], function (Utils) {
      function Placeholder(decorated, $element, options) {
        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));
        decorated.call(this, $element, options);
      }

      Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
        if (typeof placeholder === 'string') {
          placeholder = {
            id: '',
            text: placeholder
          };
        }

        return placeholder;
      };

      Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
        var $placeholder = this.selectionContainer();
        $placeholder.html(this.display(placeholder));
        $placeholder.addClass('select2-selection__placeholder').removeClass('select2-selection__choice');
        return $placeholder;
      };

      Placeholder.prototype.update = function (decorated, data) {
        var singlePlaceholder = data.length == 1 && data[0].id != this.placeholder.id;
        var multipleSelections = data.length > 1;

        if (multipleSelections || singlePlaceholder) {
          return decorated.call(this, data);
        }

        this.clear();
        var $placeholder = this.createPlaceholder(this.placeholder);
        this.$selection.find('.select2-selection__rendered').append($placeholder);
      };

      return Placeholder;
    });
    S2.define('select2/selection/allowClear', ['jquery', '../keys', '../utils'], function ($, KEYS, Utils) {
      function AllowClear() {}

      AllowClear.prototype.bind = function (decorated, container, $container) {
        var self = this;
        decorated.call(this, container, $container);

        if (this.placeholder == null) {
          if (this.options.get('debug') && window.console && console.error) {
            void 0;
          }
        } 


        this.$selection.on('click', '.select2-selection__clear', function (evt) {
          self._handleClear(evt);
        });
        container.on('keypress', function (evt) {
          self._handleKeyboardClear(evt, container);
        });
      };

      AllowClear.prototype._handleClear = function (_, evt) {
        if (this.options.get('disabled')) {
          return;
        }

        var $clear = this.$selection.find('.select2-selection__clear'); 

        if ($clear.length === 0) {
          return;
        }

        evt.stopPropagation();
        var data = Utils.GetData($clear[0], 'data');
        var previousVal = this.$element.val();
        this.$element.val(this.placeholder.id);
        var unselectData = {
          data: data
        };
        this.trigger('clear', unselectData);

        if (unselectData.prevented) {
          this.$element.val(previousVal);
          return;
        }

        for (var d = 0; d < data.length; d++) {
          unselectData = {
            data: data[d]
          }; 

          this.trigger('unselect', unselectData); 

          if (unselectData.prevented) {
            this.$element.val(previousVal);
            return;
          }
        }

        this.$element.trigger('change');
        this.trigger('toggle', {});
      };

      AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
        if (container.isOpen()) {
          return;
        }

        if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
          this._handleClear(evt);
        }
      };

      AllowClear.prototype.update = function (decorated, data) {
        decorated.call(this, data);

        if (this.$selection.find('.select2-selection__placeholder').length > 0 || data.length === 0) {
          return;
        }

        var $remove = $('<span class="select2-selection__clear">' + '&times;' + '</span>');
        Utils.StoreData($remove[0], 'data', data);
        this.$selection.find('.select2-selection__rendered').prepend($remove);
      };

      return AllowClear;
    });
    S2.define('select2/selection/search', ['jquery', '../utils', '../keys'], function ($, Utils, KEYS) {
      function Search(decorated, $element, options) {
        decorated.call(this, $element, options);
      }

      Search.prototype.render = function (decorated) {
        var $search = $('<li class="select2-search select2-search--inline">' + '<input class="select2-search__field" type="search" tabindex="-1"' + ' autocomplete="off" autocorrect="off" autocapitalize="none"' + ' spellcheck="false" role="textbox" aria-autocomplete="list" readonly />' + '</li>');
        this.$searchContainer = $search;
        this.$search = $search.find('input');
        var $rendered = decorated.call(this);

        this._transferTabIndex();

        return $rendered;
      };

      Search.prototype.bind = function (decorated, container, $container) {
        var self = this;
        decorated.call(this, container, $container);
        container.on('open', function () {
          self.$search.trigger('focus');
        });
        container.on('close', function () {
          self.$search.val('');
          self.$search.removeAttr('aria-activedescendant');
          self.$search.trigger('focus');
        });
        container.on('enable', function () {
          self.$search.prop('disabled', false);

          self._transferTabIndex();
        });
        container.on('disable', function () {
          self.$search.prop('disabled', true);
        });
        container.on('focus', function (evt) {
          self.$search.trigger('focus');
        });
        container.on('results:focus', function (params) {
          self.$search.attr('aria-activedescendant', params.id);
        });
        this.$selection.on('focusin', '.select2-search--inline', function (evt) {
          self.trigger('focus', evt);
        });
        this.$selection.on('focusout', '.select2-search--inline', function (evt) {
          self._handleBlur(evt);
        });
        this.$selection.on('keydown', '.select2-search--inline', function (evt) {
          evt.stopPropagation();
          self.trigger('keypress', evt);
          self._keyUpPrevented = evt.isDefaultPrevented();
          var key = evt.which;

          if (key === KEYS.BACKSPACE && self.$search.val() === '') {
            var $previousChoice = self.$searchContainer.prev('.select2-selection__choice');

            if ($previousChoice.length > 0) {
              var item = Utils.GetData($previousChoice[0], 'data');
              self.searchRemoveChoice(item);
              evt.preventDefault();
            }
          }
        }); 

        var msie = document.documentMode;
        var disableInputEvents = msie && msie <= 11; 

        this.$selection.on('input.searchcheck', '.select2-search--inline', function (evt) {
          if (disableInputEvents) {
            self.$selection.off('input.search input.searchcheck');
            return;
          } 


          self.$selection.off('keyup.search');
        });
        this.$selection.on('keyup.search input.search', '.select2-search--inline', function (evt) {
          if (disableInputEvents && evt.type === 'input') {
            self.$selection.off('input.search input.searchcheck');
            return;
          }

          var key = evt.which; 

          if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
            return;
          } 


          if (key == KEYS.TAB) {
            return;
          }

          self.handleSearch(evt);
        });
      };


      Search.prototype._transferTabIndex = function (decorated) {
        this.$search.attr('tabindex', this.$selection.attr('tabindex'));
        this.$selection.attr('tabindex', '-1');
      };

      Search.prototype.createPlaceholder = function (decorated, placeholder) {
        this.$search.attr('placeholder', placeholder.text);
      };

      Search.prototype.update = function (decorated, data) {
        var searchHadFocus = this.$search[0] == document.activeElement;
        this.$search.attr('placeholder', '');
        decorated.call(this, data);
        this.$selection.find('.select2-selection__rendered').append(this.$searchContainer);
        this.resizeSearch();

        if (searchHadFocus) {
          var isTagInput = this.$element.find('[data-select2-tag]').length;

          if (isTagInput) {
            this.$element.focus();
          } else {
            this.$search.focus();
          }
        }
      };

      Search.prototype.handleSearch = function () {
        this.resizeSearch();

        if (!this._keyUpPrevented) {
          var input = this.$search.val();
          this.trigger('query', {
            term: input
          });
        }

        this._keyUpPrevented = false;
      };

      Search.prototype.searchRemoveChoice = function (decorated, item) {
        this.trigger('unselect', {
          data: item
        });
        this.$search.val(item.text);
        this.handleSearch();
      };

      Search.prototype.resizeSearch = function () {
        this.$search.css('width', '25px');
        var width = '';

        if (this.$search.attr('placeholder') !== '') {
          width = this.$selection.find('.select2-selection__rendered').width();
        } else {
          var minimumWidth = this.$search.val().length + 1;
          width = minimumWidth * 0.75 + 'em';
        }

        this.$search.css('width', width);
      };

      return Search;
    });
    S2.define('select2/selection/eventRelay', ['jquery'], function ($) {
      function EventRelay() {}

      EventRelay.prototype.bind = function (decorated, container, $container) {
        var self = this;
        var relayEvents = ['open', 'opening', 'close', 'closing', 'select', 'selecting', 'unselect', 'unselecting', 'clear', 'clearing'];
        var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting', 'clearing'];
        decorated.call(this, container, $container);
        container.on('*', function (name, params) {
          if ($.inArray(name, relayEvents) === -1) {
            return;
          } 


          params = params || {}; 

          var evt = $.Event('select2:' + name, {
            params: params
          });
          self.$element.trigger(evt); 

          if ($.inArray(name, preventableEvents) === -1) {
            return;
          }

          params.prevented = evt.isDefaultPrevented();
        });
      };

      return EventRelay;
    });
    S2.define('select2/translation', ['jquery', 'require'], function ($, require) {
      function Translation(dict) {
        this.dict = dict || {};
      }

      Translation.prototype.all = function () {
        return this.dict;
      };

      Translation.prototype.get = function (key) {
        return this.dict[key];
      };

      Translation.prototype.extend = function (translation) {
        this.dict = $.extend({}, translation.all(), this.dict);
      }; 


      Translation._cache = {};

      Translation.loadPath = function (path) {
        if (!(path in Translation._cache)) {
          var translations = require(path);

          Translation._cache[path] = translations;
        }

        return new Translation(Translation._cache[path]);
      };

      return Translation;
    });
    S2.define('select2/diacritics', [], function () {
      var diacritics = {
        "\u24B6": 'A',
        "\uFF21": 'A',
        "\xC0": 'A',
        "\xC1": 'A',
        "\xC2": 'A',
        "\u1EA6": 'A',
        "\u1EA4": 'A',
        "\u1EAA": 'A',
        "\u1EA8": 'A',
        "\xC3": 'A',
        "\u0100": 'A',
        "\u0102": 'A',
        "\u1EB0": 'A',
        "\u1EAE": 'A',
        "\u1EB4": 'A',
        "\u1EB2": 'A',
        "\u0226": 'A',
        "\u01E0": 'A',
        "\xC4": 'A',
        "\u01DE": 'A',
        "\u1EA2": 'A',
        "\xC5": 'A',
        "\u01FA": 'A',
        "\u01CD": 'A',
        "\u0200": 'A',
        "\u0202": 'A',
        "\u1EA0": 'A',
        "\u1EAC": 'A',
        "\u1EB6": 'A',
        "\u1E00": 'A',
        "\u0104": 'A',
        "\u023A": 'A',
        "\u2C6F": 'A',
        "\uA732": 'AA',
        "\xC6": 'AE',
        "\u01FC": 'AE',
        "\u01E2": 'AE',
        "\uA734": 'AO',
        "\uA736": 'AU',
        "\uA738": 'AV',
        "\uA73A": 'AV',
        "\uA73C": 'AY',
        "\u24B7": 'B',
        "\uFF22": 'B',
        "\u1E02": 'B',
        "\u1E04": 'B',
        "\u1E06": 'B',
        "\u0243": 'B',
        "\u0182": 'B',
        "\u0181": 'B',
        "\u24B8": 'C',
        "\uFF23": 'C',
        "\u0106": 'C',
        "\u0108": 'C',
        "\u010A": 'C',
        "\u010C": 'C',
        "\xC7": 'C',
        "\u1E08": 'C',
        "\u0187": 'C',
        "\u023B": 'C',
        "\uA73E": 'C',
        "\u24B9": 'D',
        "\uFF24": 'D',
        "\u1E0A": 'D',
        "\u010E": 'D',
        "\u1E0C": 'D',
        "\u1E10": 'D',
        "\u1E12": 'D',
        "\u1E0E": 'D',
        "\u0110": 'D',
        "\u018B": 'D',
        "\u018A": 'D',
        "\u0189": 'D',
        "\uA779": 'D',
        "\u01F1": 'DZ',
        "\u01C4": 'DZ',
        "\u01F2": 'Dz',
        "\u01C5": 'Dz',
        "\u24BA": 'E',
        "\uFF25": 'E',
        "\xC8": 'E',
        "\xC9": 'E',
        "\xCA": 'E',
        "\u1EC0": 'E',
        "\u1EBE": 'E',
        "\u1EC4": 'E',
        "\u1EC2": 'E',
        "\u1EBC": 'E',
        "\u0112": 'E',
        "\u1E14": 'E',
        "\u1E16": 'E',
        "\u0114": 'E',
        "\u0116": 'E',
        "\xCB": 'E',
        "\u1EBA": 'E',
        "\u011A": 'E',
        "\u0204": 'E',
        "\u0206": 'E',
        "\u1EB8": 'E',
        "\u1EC6": 'E',
        "\u0228": 'E',
        "\u1E1C": 'E',
        "\u0118": 'E',
        "\u1E18": 'E',
        "\u1E1A": 'E',
        "\u0190": 'E',
        "\u018E": 'E',
        "\u24BB": 'F',
        "\uFF26": 'F',
        "\u1E1E": 'F',
        "\u0191": 'F',
        "\uA77B": 'F',
        "\u24BC": 'G',
        "\uFF27": 'G',
        "\u01F4": 'G',
        "\u011C": 'G',
        "\u1E20": 'G',
        "\u011E": 'G',
        "\u0120": 'G',
        "\u01E6": 'G',
        "\u0122": 'G',
        "\u01E4": 'G',
        "\u0193": 'G',
        "\uA7A0": 'G',
        "\uA77D": 'G',
        "\uA77E": 'G',
        "\u24BD": 'H',
        "\uFF28": 'H',
        "\u0124": 'H',
        "\u1E22": 'H',
        "\u1E26": 'H',
        "\u021E": 'H',
        "\u1E24": 'H',
        "\u1E28": 'H',
        "\u1E2A": 'H',
        "\u0126": 'H',
        "\u2C67": 'H',
        "\u2C75": 'H',
        "\uA78D": 'H',
        "\u24BE": 'I',
        "\uFF29": 'I',
        "\xCC": 'I',
        "\xCD": 'I',
        "\xCE": 'I',
        "\u0128": 'I',
        "\u012A": 'I',
        "\u012C": 'I',
        "\u0130": 'I',
        "\xCF": 'I',
        "\u1E2E": 'I',
        "\u1EC8": 'I',
        "\u01CF": 'I',
        "\u0208": 'I',
        "\u020A": 'I',
        "\u1ECA": 'I',
        "\u012E": 'I',
        "\u1E2C": 'I',
        "\u0197": 'I',
        "\u24BF": 'J',
        "\uFF2A": 'J',
        "\u0134": 'J',
        "\u0248": 'J',
        "\u24C0": 'K',
        "\uFF2B": 'K',
        "\u1E30": 'K',
        "\u01E8": 'K',
        "\u1E32": 'K',
        "\u0136": 'K',
        "\u1E34": 'K',
        "\u0198": 'K',
        "\u2C69": 'K',
        "\uA740": 'K',
        "\uA742": 'K',
        "\uA744": 'K',
        "\uA7A2": 'K',
        "\u24C1": 'L',
        "\uFF2C": 'L',
        "\u013F": 'L',
        "\u0139": 'L',
        "\u013D": 'L',
        "\u1E36": 'L',
        "\u1E38": 'L',
        "\u013B": 'L',
        "\u1E3C": 'L',
        "\u1E3A": 'L',
        "\u0141": 'L',
        "\u023D": 'L',
        "\u2C62": 'L',
        "\u2C60": 'L',
        "\uA748": 'L',
        "\uA746": 'L',
        "\uA780": 'L',
        "\u01C7": 'LJ',
        "\u01C8": 'Lj',
        "\u24C2": 'M',
        "\uFF2D": 'M',
        "\u1E3E": 'M',
        "\u1E40": 'M',
        "\u1E42": 'M',
        "\u2C6E": 'M',
        "\u019C": 'M',
        "\u24C3": 'N',
        "\uFF2E": 'N',
        "\u01F8": 'N',
        "\u0143": 'N',
        "\xD1": 'N',
        "\u1E44": 'N',
        "\u0147": 'N',
        "\u1E46": 'N',
        "\u0145": 'N',
        "\u1E4A": 'N',
        "\u1E48": 'N',
        "\u0220": 'N',
        "\u019D": 'N',
        "\uA790": 'N',
        "\uA7A4": 'N',
        "\u01CA": 'NJ',
        "\u01CB": 'Nj',
        "\u24C4": 'O',
        "\uFF2F": 'O',
        "\xD2": 'O',
        "\xD3": 'O',
        "\xD4": 'O',
        "\u1ED2": 'O',
        "\u1ED0": 'O',
        "\u1ED6": 'O',
        "\u1ED4": 'O',
        "\xD5": 'O',
        "\u1E4C": 'O',
        "\u022C": 'O',
        "\u1E4E": 'O',
        "\u014C": 'O',
        "\u1E50": 'O',
        "\u1E52": 'O',
        "\u014E": 'O',
        "\u022E": 'O',
        "\u0230": 'O',
        "\xD6": 'O',
        "\u022A": 'O',
        "\u1ECE": 'O',
        "\u0150": 'O',
        "\u01D1": 'O',
        "\u020C": 'O',
        "\u020E": 'O',
        "\u01A0": 'O',
        "\u1EDC": 'O',
        "\u1EDA": 'O',
        "\u1EE0": 'O',
        "\u1EDE": 'O',
        "\u1EE2": 'O',
        "\u1ECC": 'O',
        "\u1ED8": 'O',
        "\u01EA": 'O',
        "\u01EC": 'O',
        "\xD8": 'O',
        "\u01FE": 'O',
        "\u0186": 'O',
        "\u019F": 'O',
        "\uA74A": 'O',
        "\uA74C": 'O',
        "\u01A2": 'OI',
        "\uA74E": 'OO',
        "\u0222": 'OU',
        "\u24C5": 'P',
        "\uFF30": 'P',
        "\u1E54": 'P',
        "\u1E56": 'P',
        "\u01A4": 'P',
        "\u2C63": 'P',
        "\uA750": 'P',
        "\uA752": 'P',
        "\uA754": 'P',
        "\u24C6": 'Q',
        "\uFF31": 'Q',
        "\uA756": 'Q',
        "\uA758": 'Q',
        "\u024A": 'Q',
        "\u24C7": 'R',
        "\uFF32": 'R',
        "\u0154": 'R',
        "\u1E58": 'R',
        "\u0158": 'R',
        "\u0210": 'R',
        "\u0212": 'R',
        "\u1E5A": 'R',
        "\u1E5C": 'R',
        "\u0156": 'R',
        "\u1E5E": 'R',
        "\u024C": 'R',
        "\u2C64": 'R',
        "\uA75A": 'R',
        "\uA7A6": 'R',
        "\uA782": 'R',
        "\u24C8": 'S',
        "\uFF33": 'S',
        "\u1E9E": 'S',
        "\u015A": 'S',
        "\u1E64": 'S',
        "\u015C": 'S',
        "\u1E60": 'S',
        "\u0160": 'S',
        "\u1E66": 'S',
        "\u1E62": 'S',
        "\u1E68": 'S',
        "\u0218": 'S',
        "\u015E": 'S',
        "\u2C7E": 'S',
        "\uA7A8": 'S',
        "\uA784": 'S',
        "\u24C9": 'T',
        "\uFF34": 'T',
        "\u1E6A": 'T',
        "\u0164": 'T',
        "\u1E6C": 'T',
        "\u021A": 'T',
        "\u0162": 'T',
        "\u1E70": 'T',
        "\u1E6E": 'T',
        "\u0166": 'T',
        "\u01AC": 'T',
        "\u01AE": 'T',
        "\u023E": 'T',
        "\uA786": 'T',
        "\uA728": 'TZ',
        "\u24CA": 'U',
        "\uFF35": 'U',
        "\xD9": 'U',
        "\xDA": 'U',
        "\xDB": 'U',
        "\u0168": 'U',
        "\u1E78": 'U',
        "\u016A": 'U',
        "\u1E7A": 'U',
        "\u016C": 'U',
        "\xDC": 'U',
        "\u01DB": 'U',
        "\u01D7": 'U',
        "\u01D5": 'U',
        "\u01D9": 'U',
        "\u1EE6": 'U',
        "\u016E": 'U',
        "\u0170": 'U',
        "\u01D3": 'U',
        "\u0214": 'U',
        "\u0216": 'U',
        "\u01AF": 'U',
        "\u1EEA": 'U',
        "\u1EE8": 'U',
        "\u1EEE": 'U',
        "\u1EEC": 'U',
        "\u1EF0": 'U',
        "\u1EE4": 'U',
        "\u1E72": 'U',
        "\u0172": 'U',
        "\u1E76": 'U',
        "\u1E74": 'U',
        "\u0244": 'U',
        "\u24CB": 'V',
        "\uFF36": 'V',
        "\u1E7C": 'V',
        "\u1E7E": 'V',
        "\u01B2": 'V',
        "\uA75E": 'V',
        "\u0245": 'V',
        "\uA760": 'VY',
        "\u24CC": 'W',
        "\uFF37": 'W',
        "\u1E80": 'W',
        "\u1E82": 'W',
        "\u0174": 'W',
        "\u1E86": 'W',
        "\u1E84": 'W',
        "\u1E88": 'W',
        "\u2C72": 'W',
        "\u24CD": 'X',
        "\uFF38": 'X',
        "\u1E8A": 'X',
        "\u1E8C": 'X',
        "\u24CE": 'Y',
        "\uFF39": 'Y',
        "\u1EF2": 'Y',
        "\xDD": 'Y',
        "\u0176": 'Y',
        "\u1EF8": 'Y',
        "\u0232": 'Y',
        "\u1E8E": 'Y',
        "\u0178": 'Y',
        "\u1EF6": 'Y',
        "\u1EF4": 'Y',
        "\u01B3": 'Y',
        "\u024E": 'Y',
        "\u1EFE": 'Y',
        "\u24CF": 'Z',
        "\uFF3A": 'Z',
        "\u0179": 'Z',
        "\u1E90": 'Z',
        "\u017B": 'Z',
        "\u017D": 'Z',
        "\u1E92": 'Z',
        "\u1E94": 'Z',
        "\u01B5": 'Z',
        "\u0224": 'Z',
        "\u2C7F": 'Z',
        "\u2C6B": 'Z',
        "\uA762": 'Z',
        "\u24D0": 'a',
        "\uFF41": 'a',
        "\u1E9A": 'a',
        "\xE0": 'a',
        "\xE1": 'a',
        "\xE2": 'a',
        "\u1EA7": 'a',
        "\u1EA5": 'a',
        "\u1EAB": 'a',
        "\u1EA9": 'a',
        "\xE3": 'a',
        "\u0101": 'a',
        "\u0103": 'a',
        "\u1EB1": 'a',
        "\u1EAF": 'a',
        "\u1EB5": 'a',
        "\u1EB3": 'a',
        "\u0227": 'a',
        "\u01E1": 'a',
        "\xE4": 'a',
        "\u01DF": 'a',
        "\u1EA3": 'a',
        "\xE5": 'a',
        "\u01FB": 'a',
        "\u01CE": 'a',
        "\u0201": 'a',
        "\u0203": 'a',
        "\u1EA1": 'a',
        "\u1EAD": 'a',
        "\u1EB7": 'a',
        "\u1E01": 'a',
        "\u0105": 'a',
        "\u2C65": 'a',
        "\u0250": 'a',
        "\uA733": 'aa',
        "\xE6": 'ae',
        "\u01FD": 'ae',
        "\u01E3": 'ae',
        "\uA735": 'ao',
        "\uA737": 'au',
        "\uA739": 'av',
        "\uA73B": 'av',
        "\uA73D": 'ay',
        "\u24D1": 'b',
        "\uFF42": 'b',
        "\u1E03": 'b',
        "\u1E05": 'b',
        "\u1E07": 'b',
        "\u0180": 'b',
        "\u0183": 'b',
        "\u0253": 'b',
        "\u24D2": 'c',
        "\uFF43": 'c',
        "\u0107": 'c',
        "\u0109": 'c',
        "\u010B": 'c',
        "\u010D": 'c',
        "\xE7": 'c',
        "\u1E09": 'c',
        "\u0188": 'c',
        "\u023C": 'c',
        "\uA73F": 'c',
        "\u2184": 'c',
        "\u24D3": 'd',
        "\uFF44": 'd',
        "\u1E0B": 'd',
        "\u010F": 'd',
        "\u1E0D": 'd',
        "\u1E11": 'd',
        "\u1E13": 'd',
        "\u1E0F": 'd',
        "\u0111": 'd',
        "\u018C": 'd',
        "\u0256": 'd',
        "\u0257": 'd',
        "\uA77A": 'd',
        "\u01F3": 'dz',
        "\u01C6": 'dz',
        "\u24D4": 'e',
        "\uFF45": 'e',
        "\xE8": 'e',
        "\xE9": 'e',
        "\xEA": 'e',
        "\u1EC1": 'e',
        "\u1EBF": 'e',
        "\u1EC5": 'e',
        "\u1EC3": 'e',
        "\u1EBD": 'e',
        "\u0113": 'e',
        "\u1E15": 'e',
        "\u1E17": 'e',
        "\u0115": 'e',
        "\u0117": 'e',
        "\xEB": 'e',
        "\u1EBB": 'e',
        "\u011B": 'e',
        "\u0205": 'e',
        "\u0207": 'e',
        "\u1EB9": 'e',
        "\u1EC7": 'e',
        "\u0229": 'e',
        "\u1E1D": 'e',
        "\u0119": 'e',
        "\u1E19": 'e',
        "\u1E1B": 'e',
        "\u0247": 'e',
        "\u025B": 'e',
        "\u01DD": 'e',
        "\u24D5": 'f',
        "\uFF46": 'f',
        "\u1E1F": 'f',
        "\u0192": 'f',
        "\uA77C": 'f',
        "\u24D6": 'g',
        "\uFF47": 'g',
        "\u01F5": 'g',
        "\u011D": 'g',
        "\u1E21": 'g',
        "\u011F": 'g',
        "\u0121": 'g',
        "\u01E7": 'g',
        "\u0123": 'g',
        "\u01E5": 'g',
        "\u0260": 'g',
        "\uA7A1": 'g',
        "\u1D79": 'g',
        "\uA77F": 'g',
        "\u24D7": 'h',
        "\uFF48": 'h',
        "\u0125": 'h',
        "\u1E23": 'h',
        "\u1E27": 'h',
        "\u021F": 'h',
        "\u1E25": 'h',
        "\u1E29": 'h',
        "\u1E2B": 'h',
        "\u1E96": 'h',
        "\u0127": 'h',
        "\u2C68": 'h',
        "\u2C76": 'h',
        "\u0265": 'h',
        "\u0195": 'hv',
        "\u24D8": 'i',
        "\uFF49": 'i',
        "\xEC": 'i',
        "\xED": 'i',
        "\xEE": 'i',
        "\u0129": 'i',
        "\u012B": 'i',
        "\u012D": 'i',
        "\xEF": 'i',
        "\u1E2F": 'i',
        "\u1EC9": 'i',
        "\u01D0": 'i',
        "\u0209": 'i',
        "\u020B": 'i',
        "\u1ECB": 'i',
        "\u012F": 'i',
        "\u1E2D": 'i',
        "\u0268": 'i',
        "\u0131": 'i',
        "\u24D9": 'j',
        "\uFF4A": 'j',
        "\u0135": 'j',
        "\u01F0": 'j',
        "\u0249": 'j',
        "\u24DA": 'k',
        "\uFF4B": 'k',
        "\u1E31": 'k',
        "\u01E9": 'k',
        "\u1E33": 'k',
        "\u0137": 'k',
        "\u1E35": 'k',
        "\u0199": 'k',
        "\u2C6A": 'k',
        "\uA741": 'k',
        "\uA743": 'k',
        "\uA745": 'k',
        "\uA7A3": 'k',
        "\u24DB": 'l',
        "\uFF4C": 'l',
        "\u0140": 'l',
        "\u013A": 'l',
        "\u013E": 'l',
        "\u1E37": 'l',
        "\u1E39": 'l',
        "\u013C": 'l',
        "\u1E3D": 'l',
        "\u1E3B": 'l',
        "\u017F": 'l',
        "\u0142": 'l',
        "\u019A": 'l',
        "\u026B": 'l',
        "\u2C61": 'l',
        "\uA749": 'l',
        "\uA781": 'l',
        "\uA747": 'l',
        "\u01C9": 'lj',
        "\u24DC": 'm',
        "\uFF4D": 'm',
        "\u1E3F": 'm',
        "\u1E41": 'm',
        "\u1E43": 'm',
        "\u0271": 'm',
        "\u026F": 'm',
        "\u24DD": 'n',
        "\uFF4E": 'n',
        "\u01F9": 'n',
        "\u0144": 'n',
        "\xF1": 'n',
        "\u1E45": 'n',
        "\u0148": 'n',
        "\u1E47": 'n',
        "\u0146": 'n',
        "\u1E4B": 'n',
        "\u1E49": 'n',
        "\u019E": 'n',
        "\u0272": 'n',
        "\u0149": 'n',
        "\uA791": 'n',
        "\uA7A5": 'n',
        "\u01CC": 'nj',
        "\u24DE": 'o',
        "\uFF4F": 'o',
        "\xF2": 'o',
        "\xF3": 'o',
        "\xF4": 'o',
        "\u1ED3": 'o',
        "\u1ED1": 'o',
        "\u1ED7": 'o',
        "\u1ED5": 'o',
        "\xF5": 'o',
        "\u1E4D": 'o',
        "\u022D": 'o',
        "\u1E4F": 'o',
        "\u014D": 'o',
        "\u1E51": 'o',
        "\u1E53": 'o',
        "\u014F": 'o',
        "\u022F": 'o',
        "\u0231": 'o',
        "\xF6": 'o',
        "\u022B": 'o',
        "\u1ECF": 'o',
        "\u0151": 'o',
        "\u01D2": 'o',
        "\u020D": 'o',
        "\u020F": 'o',
        "\u01A1": 'o',
        "\u1EDD": 'o',
        "\u1EDB": 'o',
        "\u1EE1": 'o',
        "\u1EDF": 'o',
        "\u1EE3": 'o',
        "\u1ECD": 'o',
        "\u1ED9": 'o',
        "\u01EB": 'o',
        "\u01ED": 'o',
        "\xF8": 'o',
        "\u01FF": 'o',
        "\u0254": 'o',
        "\uA74B": 'o',
        "\uA74D": 'o',
        "\u0275": 'o',
        "\u01A3": 'oi',
        "\u0223": 'ou',
        "\uA74F": 'oo',
        "\u24DF": 'p',
        "\uFF50": 'p',
        "\u1E55": 'p',
        "\u1E57": 'p',
        "\u01A5": 'p',
        "\u1D7D": 'p',
        "\uA751": 'p',
        "\uA753": 'p',
        "\uA755": 'p',
        "\u24E0": 'q',
        "\uFF51": 'q',
        "\u024B": 'q',
        "\uA757": 'q',
        "\uA759": 'q',
        "\u24E1": 'r',
        "\uFF52": 'r',
        "\u0155": 'r',
        "\u1E59": 'r',
        "\u0159": 'r',
        "\u0211": 'r',
        "\u0213": 'r',
        "\u1E5B": 'r',
        "\u1E5D": 'r',
        "\u0157": 'r',
        "\u1E5F": 'r',
        "\u024D": 'r',
        "\u027D": 'r',
        "\uA75B": 'r',
        "\uA7A7": 'r',
        "\uA783": 'r',
        "\u24E2": 's',
        "\uFF53": 's',
        "\xDF": 's',
        "\u015B": 's',
        "\u1E65": 's',
        "\u015D": 's',
        "\u1E61": 's',
        "\u0161": 's',
        "\u1E67": 's',
        "\u1E63": 's',
        "\u1E69": 's',
        "\u0219": 's',
        "\u015F": 's',
        "\u023F": 's',
        "\uA7A9": 's',
        "\uA785": 's',
        "\u1E9B": 's',
        "\u24E3": 't',
        "\uFF54": 't',
        "\u1E6B": 't',
        "\u1E97": 't',
        "\u0165": 't',
        "\u1E6D": 't',
        "\u021B": 't',
        "\u0163": 't',
        "\u1E71": 't',
        "\u1E6F": 't',
        "\u0167": 't',
        "\u01AD": 't',
        "\u0288": 't',
        "\u2C66": 't',
        "\uA787": 't',
        "\uA729": 'tz',
        "\u24E4": 'u',
        "\uFF55": 'u',
        "\xF9": 'u',
        "\xFA": 'u',
        "\xFB": 'u',
        "\u0169": 'u',
        "\u1E79": 'u',
        "\u016B": 'u',
        "\u1E7B": 'u',
        "\u016D": 'u',
        "\xFC": 'u',
        "\u01DC": 'u',
        "\u01D8": 'u',
        "\u01D6": 'u',
        "\u01DA": 'u',
        "\u1EE7": 'u',
        "\u016F": 'u',
        "\u0171": 'u',
        "\u01D4": 'u',
        "\u0215": 'u',
        "\u0217": 'u',
        "\u01B0": 'u',
        "\u1EEB": 'u',
        "\u1EE9": 'u',
        "\u1EEF": 'u',
        "\u1EED": 'u',
        "\u1EF1": 'u',
        "\u1EE5": 'u',
        "\u1E73": 'u',
        "\u0173": 'u',
        "\u1E77": 'u',
        "\u1E75": 'u',
        "\u0289": 'u',
        "\u24E5": 'v',
        "\uFF56": 'v',
        "\u1E7D": 'v',
        "\u1E7F": 'v',
        "\u028B": 'v',
        "\uA75F": 'v',
        "\u028C": 'v',
        "\uA761": 'vy',
        "\u24E6": 'w',
        "\uFF57": 'w',
        "\u1E81": 'w',
        "\u1E83": 'w',
        "\u0175": 'w',
        "\u1E87": 'w',
        "\u1E85": 'w',
        "\u1E98": 'w',
        "\u1E89": 'w',
        "\u2C73": 'w',
        "\u24E7": 'x',
        "\uFF58": 'x',
        "\u1E8B": 'x',
        "\u1E8D": 'x',
        "\u24E8": 'y',
        "\uFF59": 'y',
        "\u1EF3": 'y',
        "\xFD": 'y',
        "\u0177": 'y',
        "\u1EF9": 'y',
        "\u0233": 'y',
        "\u1E8F": 'y',
        "\xFF": 'y',
        "\u1EF7": 'y',
        "\u1E99": 'y',
        "\u1EF5": 'y',
        "\u01B4": 'y',
        "\u024F": 'y',
        "\u1EFF": 'y',
        "\u24E9": 'z',
        "\uFF5A": 'z',
        "\u017A": 'z',
        "\u1E91": 'z',
        "\u017C": 'z',
        "\u017E": 'z',
        "\u1E93": 'z',
        "\u1E95": 'z',
        "\u01B6": 'z',
        "\u0225": 'z',
        "\u0240": 'z',
        "\u2C6C": 'z',
        "\uA763": 'z',
        "\u0386": "\u0391",
        "\u0388": "\u0395",
        "\u0389": "\u0397",
        "\u038A": "\u0399",
        "\u03AA": "\u0399",
        "\u038C": "\u039F",
        "\u038E": "\u03A5",
        "\u03AB": "\u03A5",
        "\u038F": "\u03A9",
        "\u03AC": "\u03B1",
        "\u03AD": "\u03B5",
        "\u03AE": "\u03B7",
        "\u03AF": "\u03B9",
        "\u03CA": "\u03B9",
        "\u0390": "\u03B9",
        "\u03CC": "\u03BF",
        "\u03CD": "\u03C5",
        "\u03CB": "\u03C5",
        "\u03B0": "\u03C5",
        "\u03C9": "\u03C9",
        "\u03C2": "\u03C3"
      };
      return diacritics;
    });
    S2.define('select2/data/base', ['../utils'], function (Utils) {
      function BaseAdapter($element, options) {
        BaseAdapter.__super__.constructor.call(this);
      }

      Utils.Extend(BaseAdapter, Utils.Observable);

      BaseAdapter.prototype.current = function (callback) {
        throw new Error('The `current` method must be defined in child classes.');
      };

      BaseAdapter.prototype.query = function (params, callback) {
        throw new Error('The `query` method must be defined in child classes.');
      };

      BaseAdapter.prototype.bind = function (container, $container) {
      };

      BaseAdapter.prototype.destroy = function () {
      };

      BaseAdapter.prototype.generateResultId = function (container, data) {
        var id = container.id + '-result-';
        id += Utils.generateChars(4);

        if (data.id != null) {
          id += '-' + data.id.toString();
        } else {
          id += '-' + Utils.generateChars(4);
        }

        return id;
      };

      return BaseAdapter;
    });
    S2.define('select2/data/select', ['./base', '../utils', 'jquery'], function (BaseAdapter, Utils, $) {
      function SelectAdapter($element, options) {
        this.$element = $element;
        this.options = options;

        SelectAdapter.__super__.constructor.call(this);
      }

      Utils.Extend(SelectAdapter, BaseAdapter);

      SelectAdapter.prototype.current = function (callback) {
        var data = [];
        var self = this;
        this.$element.find(':selected').each(function () {
          var $option = $(this);
          var option = self.item($option);
          data.push(option);
        });
        callback(data);
      };

      SelectAdapter.prototype.select = function (data) {
        var self = this;
        data.selected = true; 

        if ($(data.element).is('option')) {
          data.element.selected = true;
          this.$element.trigger('change');
          return;
        }

        if (this.$element.prop('multiple')) {
          this.current(function (currentData) {
            var val = [];
            data = [data];
            data.push.apply(data, currentData);

            for (var d = 0; d < data.length; d++) {
              var id = data[d].id;

              if ($.inArray(id, val) === -1) {
                val.push(id);
              }
            }

            self.$element.val(val);
            self.$element.trigger('change');
          });
        } else {
          var val = data.id;
          this.$element.val(val);
          this.$element.trigger('change');
        }
      };

      SelectAdapter.prototype.unselect = function (data) {
        var self = this;

        if (!this.$element.prop('multiple')) {
          return;
        }

        data.selected = false;

        if ($(data.element).is('option')) {
          data.element.selected = false;
          this.$element.trigger('change');
          return;
        }

        this.current(function (currentData) {
          var val = [];

          for (var d = 0; d < currentData.length; d++) {
            var id = currentData[d].id;

            if (id !== data.id && $.inArray(id, val) === -1) {
              val.push(id);
            }
          }

          self.$element.val(val);
          self.$element.trigger('change');
        });
      };

      SelectAdapter.prototype.bind = function (container, $container) {
        var self = this;
        this.container = container;
        container.on('select', function (params) {
          self.select(params.data);
        });
        container.on('unselect', function (params) {
          self.unselect(params.data);
        });
      };

      SelectAdapter.prototype.destroy = function () {
        this.$element.find('*').each(function () {
          Utils.RemoveData(this);
        });
      };

      SelectAdapter.prototype.query = function (params, callback) {
        var data = [];
        var self = this;
        var $options = this.$element.children();
        $options.each(function () {
          var $option = $(this);

          if (!$option.is('option') && !$option.is('optgroup')) {
            return;
          }

          var option = self.item($option);
          var matches = self.matches(params, option);

          if (matches !== null) {
            data.push(matches);
          }
        });
        callback({
          results: data
        });
      };

      SelectAdapter.prototype.addOptions = function ($options) {
        Utils.appendMany(this.$element, $options);
      };

      SelectAdapter.prototype.option = function (data) {
        var option;

        if (data.children) {
          option = document.createElement('optgroup');
          option.label = data.text;
        } else {
          option = document.createElement('option');

          if (option.textContent !== undefined) {
            option.textContent = data.text;
          } else {
            option.innerText = data.text;
          }
        }

        if (data.id !== undefined) {
          option.value = data.id;
        }

        if (data.disabled) {
          option.disabled = true;
        }

        if (data.selected) {
          option.selected = true;
        }

        if (data.title) {
          option.title = data.title;
        }

        var $option = $(option);

        var normalizedData = this._normalizeItem(data);

        normalizedData.element = option; 

        Utils.StoreData(option, 'data', normalizedData);
        return $option;
      };

      SelectAdapter.prototype.item = function ($option) {
        var data = {};
        data = Utils.GetData($option[0], 'data');

        if (data != null) {
          return data;
        }

        if ($option.is('option')) {
          data = {
            id: $option.val(),
            text: $option.text(),
            disabled: $option.prop('disabled'),
            selected: $option.prop('selected'),
            title: $option.prop('title')
          };
        } else if ($option.is('optgroup')) {
          data = {
            text: $option.prop('label'),
            children: [],
            title: $option.prop('title')
          };
          var $children = $option.children('option');
          var children = [];

          for (var c = 0; c < $children.length; c++) {
            var $child = $($children[c]);
            var child = this.item($child);
            children.push(child);
          }

          data.children = children;
        }

        data = this._normalizeItem(data);
        data.element = $option[0];
        Utils.StoreData($option[0], 'data', data);
        return data;
      };

      SelectAdapter.prototype._normalizeItem = function (item) {
        if (item !== Object(item)) {
          item = {
            id: item,
            text: item
          };
        }

        item = $.extend({}, {
          text: ''
        }, item);
        var defaults = {
          selected: false,
          disabled: false
        };

        if (item.id != null) {
          item.id = item.id.toString();
        }

        if (item.text != null) {
          item.text = item.text.toString();
        }

        if (item._resultId == null && item.id && this.container != null) {
          item._resultId = this.generateResultId(this.container, item);
        }

        return $.extend({}, defaults, item);
      };

      SelectAdapter.prototype.matches = function (params, data) {
        var matcher = this.options.get('matcher');
        return matcher(params, data);
      };

      return SelectAdapter;
    });
    S2.define('select2/data/array', ['./select', '../utils', 'jquery'], function (SelectAdapter, Utils, $) {
      function ArrayAdapter($element, options) {
        var data = options.get('data') || [];

        ArrayAdapter.__super__.constructor.call(this, $element, options);

        this.addOptions(this.convertToOptions(data));
      }

      Utils.Extend(ArrayAdapter, SelectAdapter);

      ArrayAdapter.prototype.select = function (data) {
        var $option = this.$element.find('option').filter(function (i, elm) {
          return elm.value == data.id.toString();
        });

        if ($option.length === 0) {
          $option = this.option(data);
          this.addOptions($option);
        }

        ArrayAdapter.__super__.select.call(this, data);
      };

      ArrayAdapter.prototype.convertToOptions = function (data) {
        var self = this;
        var $existing = this.$element.find('option');
        var existingIds = $existing.map(function () {
          return self.item($(this)).id;
        }).get();
        var $options = []; 

        function onlyItem(item) {
          return function () {
            return $(this).val() == item.id;
          };
        }

        for (var d = 0; d < data.length; d++) {
          var item = this._normalizeItem(data[d]); 


          if ($.inArray(item.id, existingIds) >= 0) {
            var $existingOption = $existing.filter(onlyItem(item));
            var existingData = this.item($existingOption);
            var newData = $.extend(true, {}, item, existingData);
            var $newOption = this.option(newData);
            $existingOption.replaceWith($newOption);
            continue;
          }

          var $option = this.option(item);

          if (item.children) {
            var $children = this.convertToOptions(item.children);
            Utils.appendMany($option, $children);
          }

          $options.push($option);
        }

        return $options;
      };

      return ArrayAdapter;
    });
    S2.define('select2/data/ajax', ['./array', '../utils', 'jquery'], function (ArrayAdapter, Utils, $) {
      function AjaxAdapter($element, options) {
        this.ajaxOptions = this._applyDefaults(options.get('ajax'));

        if (this.ajaxOptions.processResults != null) {
          this.processResults = this.ajaxOptions.processResults;
        }

        AjaxAdapter.__super__.constructor.call(this, $element, options);
      }

      Utils.Extend(AjaxAdapter, ArrayAdapter);

      AjaxAdapter.prototype._applyDefaults = function (options) {
        var defaults = {
          data: function data(params) {
            return $.extend({}, params, {
              q: params.term
            });
          },
          transport: function transport(params, success, failure) {
            var $request = $.ajax(params);
            $request.then(success);
            $request.fail(failure);
            return $request;
          }
        };
        return $.extend({}, defaults, options, true);
      };

      AjaxAdapter.prototype.processResults = function (results) {
        return results;
      };

      AjaxAdapter.prototype.query = function (params, callback) {
        var matches = [];
        var self = this;

        if (this._request != null) {
          if ($.isFunction(this._request.abort)) {
            this._request.abort();
          }

          this._request = null;
        }

        var options = $.extend({
          type: 'GET'
        }, this.ajaxOptions);

        if (typeof options.url === 'function') {
          options.url = options.url.call(this.$element, params);
        }

        if (typeof options.data === 'function') {
          options.data = options.data.call(this.$element, params);
        }

        function request() {
          var $request = options.transport(options, function (data) {
            var results = self.processResults(data, params);

            if (self.options.get('debug') && window.console && console.error) {
              if (!results || !results.results || !$.isArray(results.results)) {
                void 0;
              }
            }

            callback(results);
          }, function () {
            if ('status' in $request && ($request.status === 0 || $request.status === '0')) {
              return;
            }

            self.trigger('results:message', {
              message: 'errorLoading'
            });
          });
          self._request = $request;
        }

        if (this.ajaxOptions.delay && params.term != null) {
          if (this._queryTimeout) {
            window.clearTimeout(this._queryTimeout);
          }

          this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
        } else {
          request();
        }
      };

      return AjaxAdapter;
    });
    S2.define('select2/data/tags', ['jquery'], function ($) {
      function Tags(decorated, $element, options) {
        var tags = options.get('tags');
        var createTag = options.get('createTag');

        if (createTag !== undefined) {
          this.createTag = createTag;
        }

        var insertTag = options.get('insertTag');

        if (insertTag !== undefined) {
          this.insertTag = insertTag;
        }

        decorated.call(this, $element, options);

        if ($.isArray(tags)) {
          for (var t = 0; t < tags.length; t++) {
            var tag = tags[t];

            var item = this._normalizeItem(tag);

            var $option = this.option(item);
            this.$element.append($option);
          }
        }
      }

      Tags.prototype.query = function (decorated, params, callback) {
        var self = this;

        this._removeOldTags();

        if (params.term == null || params.page != null) {
          decorated.call(this, params, callback);
          return;
        }

        function wrapper(obj, child) {
          var data = obj.results;

          for (var i = 0; i < data.length; i++) {
            var option = data[i];
            var checkChildren = option.children != null && !wrapper({
              results: option.children
            }, true);
            var optionText = (option.text || '').toUpperCase();
            var paramsTerm = (params.term || '').toUpperCase();
            var checkText = optionText === paramsTerm;

            if (checkText || checkChildren) {
              if (child) {
                return false;
              }

              obj.data = data;
              callback(obj);
              return;
            }
          }

          if (child) {
            return true;
          }

          var tag = self.createTag(params);

          if (tag != null) {
            var $option = self.option(tag);
            $option.attr('data-select2-tag', true);
            self.addOptions([$option]);
            self.insertTag(data, tag);
          }

          obj.results = data;
          callback(obj);
        }

        decorated.call(this, params, wrapper);
      };

      Tags.prototype.createTag = function (decorated, params) {
        var term = $.trim(params.term);

        if (term === '') {
          return null;
        }

        return {
          id: term,
          text: term
        };
      };

      Tags.prototype.insertTag = function (_, data, tag) {
        data.unshift(tag);
      };

      Tags.prototype._removeOldTags = function (_) {
        var tag = this._lastTag;
        var $options = this.$element.find('option[data-select2-tag]');
        $options.each(function () {
          if (this.selected) {
            return;
          }

          $(this).remove();
        });
      };

      return Tags;
    });
    S2.define('select2/data/tokenizer', ['jquery'], function ($) {
      function Tokenizer(decorated, $element, options) {
        var tokenizer = options.get('tokenizer');

        if (tokenizer !== undefined) {
          this.tokenizer = tokenizer;
        }

        decorated.call(this, $element, options);
      }

      Tokenizer.prototype.bind = function (decorated, container, $container) {
        decorated.call(this, container, $container);
        this.$search = container.dropdown.$search || container.selection.$search || $container.find('.select2-search__field');
      };

      Tokenizer.prototype.query = function (decorated, params, callback) {
        var self = this;

        function createAndSelect(data) {
          var item = self._normalizeItem(data); 


          var $existingOptions = self.$element.find('option').filter(function () {
            return $(this).val() === item.id;
          }); 

          if (!$existingOptions.length) {
            var $option = self.option(item);
            $option.attr('data-select2-tag', true);

            self._removeOldTags();

            self.addOptions([$option]);
          } 


          select(item);
        }

        function select(data) {
          self.trigger('select', {
            data: data
          });
        }

        params.term = params.term || '';
        var tokenData = this.tokenizer(params, this.options, createAndSelect);

        if (tokenData.term !== params.term) {
          if (this.$search.length) {
            this.$search.val(tokenData.term);
            this.$search.focus();
          }

          params.term = tokenData.term;
        }

        decorated.call(this, params, callback);
      };

      Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
        var separators = options.get('tokenSeparators') || [];
        var term = params.term;
        var i = 0;

        var createTag = this.createTag || function (params) {
          return {
            id: params.term,
            text: params.term
          };
        };

        while (i < term.length) {
          var termChar = term[i];

          if ($.inArray(termChar, separators) === -1) {
            i++;
            continue;
          }

          var part = term.substr(0, i);
          var partParams = $.extend({}, params, {
            term: part
          });
          var data = createTag(partParams);

          if (data == null) {
            i++;
            continue;
          }

          callback(data); 

          term = term.substr(i + 1) || '';
          i = 0;
        }

        return {
          term: term
        };
      };

      return Tokenizer;
    });
    S2.define('select2/data/minimumInputLength', [], function () {
      function MinimumInputLength(decorated, $e, options) {
        this.minimumInputLength = options.get('minimumInputLength');
        decorated.call(this, $e, options);
      }

      MinimumInputLength.prototype.query = function (decorated, params, callback) {
        params.term = params.term || '';

        if (params.term.length < this.minimumInputLength) {
          this.trigger('results:message', {
            message: 'inputTooShort',
            args: {
              minimum: this.minimumInputLength,
              input: params.term,
              params: params
            }
          });
          return;
        }

        decorated.call(this, params, callback);
      };

      return MinimumInputLength;
    });
    S2.define('select2/data/maximumInputLength', [], function () {
      function MaximumInputLength(decorated, $e, options) {
        this.maximumInputLength = options.get('maximumInputLength');
        decorated.call(this, $e, options);
      }

      MaximumInputLength.prototype.query = function (decorated, params, callback) {
        params.term = params.term || '';

        if (this.maximumInputLength > 0 && params.term.length > this.maximumInputLength) {
          this.trigger('results:message', {
            message: 'inputTooLong',
            args: {
              maximum: this.maximumInputLength,
              input: params.term,
              params: params
            }
          });
          return;
        }

        decorated.call(this, params, callback);
      };

      return MaximumInputLength;
    });
    S2.define('select2/data/maximumSelectionLength', [], function () {
      function MaximumSelectionLength(decorated, $e, options) {
        this.maximumSelectionLength = options.get('maximumSelectionLength');
        decorated.call(this, $e, options);
      }

      MaximumSelectionLength.prototype.query = function (decorated, params, callback) {
        var self = this;
        this.current(function (currentData) {
          var count = currentData != null ? currentData.length : 0;

          if (self.maximumSelectionLength > 0 && count >= self.maximumSelectionLength) {
            self.trigger('results:message', {
              message: 'maximumSelected',
              args: {
                maximum: self.maximumSelectionLength
              }
            });
            return;
          }

          decorated.call(self, params, callback);
        });
      };

      return MaximumSelectionLength;
    });
    S2.define('select2/dropdown', ['jquery', './utils'], function ($, Utils) {
      function Dropdown($element, options) {
        this.$element = $element;
        this.options = options;

        Dropdown.__super__.constructor.call(this);
      }

      Utils.Extend(Dropdown, Utils.Observable);

      Dropdown.prototype.render = function () {
        var $dropdown = $('<span class="select2-dropdown">' + '<span class="select2-results"></span>' + '</span>');
        $dropdown.attr('dir', this.options.get('dir'));
        this.$dropdown = $dropdown;
        return $dropdown;
      };

      Dropdown.prototype.bind = function () {
      };

      Dropdown.prototype.position = function ($dropdown, $container) {
      };

      Dropdown.prototype.destroy = function () {
        this.$dropdown.remove();
      };

      return Dropdown;
    });
    S2.define('select2/dropdown/search', ['jquery', '../utils'], function ($, Utils) {
      function Search() {}

      Search.prototype.render = function (decorated) {
        var $rendered = decorated.call(this);
        var $search = $('<span class="select2-search select2-search--dropdown">' + '<input class="select2-search__field" type="search" tabindex="-1"' + ' autocomplete="off" autocorrect="off" autocapitalize="none"' + ' spellcheck="false" role="textbox" />' + '</span>');
        this.$searchContainer = $search;
        this.$search = $search.find('input');
        $rendered.prepend($search);
        return $rendered;
      };

      Search.prototype.bind = function (decorated, container, $container) {
        var self = this;
        decorated.call(this, container, $container);
        this.$search.on('keydown', function (evt) {
          self.trigger('keypress', evt);
          self._keyUpPrevented = evt.isDefaultPrevented();
        }); 

        this.$search.on('input', function (evt) {
          $(this).off('keyup');
        });
        this.$search.on('keyup input', function (evt) {
          self.handleSearch(evt);
        });
        container.on('open', function () {
          self.$search.attr('tabindex', 0);
          self.$search.focus();
          window.setTimeout(function () {
            self.$search.focus();
          }, 0);
        });
        container.on('close', function () {
          self.$search.attr('tabindex', -1);
          self.$search.val('');
          self.$search.blur();
        });
        container.on('focus', function () {
          if (!container.isOpen()) {
            self.$search.focus();
          }
        });
        container.on('results:all', function (params) {
          if (params.query.term == null || params.query.term === '') {
            var showSearch = self.showSearch(params);

            if (showSearch) {
              self.$searchContainer.removeClass('select2-search--hide');
            } else {
              self.$searchContainer.addClass('select2-search--hide');
            }
          }
        });
      };

      Search.prototype.handleSearch = function (evt) {
        if (!this._keyUpPrevented) {
          var input = this.$search.val();
          this.trigger('query', {
            term: input
          });
        }

        this._keyUpPrevented = false;
      };

      Search.prototype.showSearch = function (_, params) {
        return true;
      };

      return Search;
    });
    S2.define('select2/dropdown/hidePlaceholder', [], function () {
      function HidePlaceholder(decorated, $element, options, dataAdapter) {
        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));
        decorated.call(this, $element, options, dataAdapter);
      }

      HidePlaceholder.prototype.append = function (decorated, data) {
        data.results = this.removePlaceholder(data.results);
        decorated.call(this, data);
      };

      HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
        if (typeof placeholder === 'string') {
          placeholder = {
            id: '',
            text: placeholder
          };
        }

        return placeholder;
      };

      HidePlaceholder.prototype.removePlaceholder = function (_, data) {
        var modifiedData = data.slice(0);

        for (var d = data.length - 1; d >= 0; d--) {
          var item = data[d];

          if (this.placeholder.id === item.id) {
            modifiedData.splice(d, 1);
          }
        }

        return modifiedData;
      };

      return HidePlaceholder;
    });
    S2.define('select2/dropdown/infiniteScroll', ['jquery'], function ($) {
      function InfiniteScroll(decorated, $element, options, dataAdapter) {
        this.lastParams = {};
        decorated.call(this, $element, options, dataAdapter);
        this.$loadingMore = this.createLoadingMore();
        this.loading = false;
      }

      InfiniteScroll.prototype.append = function (decorated, data) {
        this.$loadingMore.remove();
        this.loading = false;
        decorated.call(this, data);

        if (this.showLoadingMore(data)) {
          this.$results.append(this.$loadingMore);
        }
      };

      InfiniteScroll.prototype.bind = function (decorated, container, $container) {
        var self = this;
        decorated.call(this, container, $container);
        container.on('query', function (params) {
          self.lastParams = params;
          self.loading = true;
        });
        container.on('query:append', function (params) {
          self.lastParams = params;
          self.loading = true;
        });
        this.$results.on('scroll', function () {
          var isLoadMoreVisible = $.contains(document.documentElement, self.$loadingMore[0]);

          if (self.loading || !isLoadMoreVisible) {
            return;
          }

          var currentOffset = self.$results.offset().top + self.$results.outerHeight(false);
          var loadingMoreOffset = self.$loadingMore.offset().top + self.$loadingMore.outerHeight(false);

          if (currentOffset + 50 >= loadingMoreOffset) {
            self.loadMore();
          }
        });
      };

      InfiniteScroll.prototype.loadMore = function () {
        this.loading = true;
        var params = $.extend({}, {
          page: 1
        }, this.lastParams);
        params.page++;
        this.trigger('query:append', params);
      };

      InfiniteScroll.prototype.showLoadingMore = function (_, data) {
        return data.pagination && data.pagination.more;
      };

      InfiniteScroll.prototype.createLoadingMore = function () {
        var $option = $('<li ' + 'class="select2-results__option select2-results__option--load-more"' + 'role="treeitem" aria-disabled="true"></li>');
        var message = this.options.get('translations').get('loadingMore');
        $option.html(message(this.lastParams));
        return $option;
      };

      return InfiniteScroll;
    });
    S2.define('select2/dropdown/attachBody', ['jquery', '../utils'], function ($, Utils) {
      function AttachBody(decorated, $element, options) {
        this.$dropdownParent = options.get('dropdownParent') || $(document.body);
        decorated.call(this, $element, options);
      }

      AttachBody.prototype.bind = function (decorated, container, $container) {
        var self = this;
        var setupResultsEvents = false;
        decorated.call(this, container, $container);
        container.on('open', function () {
          self._showDropdown();

          self._attachPositioningHandler(container);

          if (!setupResultsEvents) {
            setupResultsEvents = true;
            container.on('results:all', function () {
              self._positionDropdown();

              self._resizeDropdown();
            });
            container.on('results:append', function () {
              self._positionDropdown();

              self._resizeDropdown();
            });
          }
        });
        container.on('close', function () {
          self._hideDropdown();

          self._detachPositioningHandler(container);
        });
        this.$dropdownContainer.on('mousedown', function (evt) {
          evt.stopPropagation();
        });
      };

      AttachBody.prototype.destroy = function (decorated) {
        decorated.call(this);
        this.$dropdownContainer.remove();
      };

      AttachBody.prototype.position = function (decorated, $dropdown, $container) {
        $dropdown.attr('class', $container.attr('class'));
        $dropdown.removeClass('select2');
        $dropdown.addClass('select2-container--open');
        $dropdown.css({
          position: 'absolute',
          top: -999999
        });
        this.$container = $container;
      };

      AttachBody.prototype.render = function (decorated) {
        var $container = $('<span></span>');
        var $dropdown = decorated.call(this);
        $container.append($dropdown);
        this.$dropdownContainer = $container;
        return $container;
      };

      AttachBody.prototype._hideDropdown = function (decorated) {
        this.$dropdownContainer.detach();
      };

      AttachBody.prototype._attachPositioningHandler = function (decorated, container) {
        var self = this;
        var scrollEvent = 'scroll.select2.' + container.id;
        var resizeEvent = 'resize.select2.' + container.id;
        var orientationEvent = 'orientationchange.select2.' + container.id;
        var $watchers = this.$container.parents().filter(Utils.hasScroll);
        $watchers.each(function () {
          Utils.StoreData(this, 'select2-scroll-position', {
            x: $(this).scrollLeft(),
            y: $(this).scrollTop()
          });
        });
        $watchers.on(scrollEvent, function (ev) {
          var position = Utils.GetData(this, 'select2-scroll-position');
          $(this).scrollTop(position.y);
        });
        $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent, function (e) {
          self._positionDropdown();

          self._resizeDropdown();
        });
      };

      AttachBody.prototype._detachPositioningHandler = function (decorated, container) {
        var scrollEvent = 'scroll.select2.' + container.id;
        var resizeEvent = 'resize.select2.' + container.id;
        var orientationEvent = 'orientationchange.select2.' + container.id;
        var $watchers = this.$container.parents().filter(Utils.hasScroll);
        $watchers.off(scrollEvent);
        $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
      };

      AttachBody.prototype._positionDropdown = function () {
        var $window = $(window);
        var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
        var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');
        var newDirection = null;
        var offset = this.$container.offset();
        offset.bottom = offset.top + this.$container.outerHeight(false);
        var container = {
          height: this.$container.outerHeight(false)
        };
        container.top = offset.top;
        container.bottom = offset.top + container.height;
        var dropdown = {
          height: this.$dropdown.outerHeight(false)
        };
        var viewport = {
          top: $window.scrollTop(),
          bottom: $window.scrollTop() + $window.height()
        };
        var enoughRoomAbove = viewport.top < offset.top - dropdown.height;
        var enoughRoomBelow = viewport.bottom > offset.bottom + dropdown.height;
        var css = {
          left: offset.left,
          top: container.bottom
        }; 

        var $offsetParent = this.$dropdownParent; 

        if ($offsetParent.css('position') === 'static') {
          $offsetParent = $offsetParent.offsetParent();
        }

        var parentOffset = $offsetParent.offset();
        css.top -= parentOffset.top;
        css.left -= parentOffset.left;

        if (!isCurrentlyAbove && !isCurrentlyBelow) {
          newDirection = 'below';
        }

        if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
          newDirection = 'above';
        } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
          newDirection = 'below';
        }

        if (newDirection == 'above' || isCurrentlyAbove && newDirection !== 'below') {
          css.top = container.top - parentOffset.top - dropdown.height;
        }

        if (newDirection != null) {
          this.$dropdown.removeClass('select2-dropdown--below select2-dropdown--above').addClass('select2-dropdown--' + newDirection);
          this.$container.removeClass('select2-container--below select2-container--above').addClass('select2-container--' + newDirection);
        }

        this.$dropdownContainer.css(css);
      };

      AttachBody.prototype._resizeDropdown = function () {
        var css = {
          width: this.$container.outerWidth(false) + 'px'
        };

        if (this.options.get('dropdownAutoWidth')) {
          css.minWidth = css.width;
          css.position = 'relative';
          css.width = 'auto';
        }

        this.$dropdown.css(css);
      };

      AttachBody.prototype._showDropdown = function (decorated) {
        this.$dropdownContainer.appendTo(this.$dropdownParent);

        this._positionDropdown();

        this._resizeDropdown();
      };

      return AttachBody;
    });
    S2.define('select2/dropdown/minimumResultsForSearch', [], function () {
      function countResults(data) {
        var count = 0;

        for (var d = 0; d < data.length; d++) {
          var item = data[d];

          if (item.children) {
            count += countResults(item.children);
          } else {
            count++;
          }
        }

        return count;
      }

      function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {
        this.minimumResultsForSearch = options.get('minimumResultsForSearch');

        if (this.minimumResultsForSearch < 0) {
          this.minimumResultsForSearch = Infinity;
        }

        decorated.call(this, $element, options, dataAdapter);
      }

      MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
        if (countResults(params.data.results) < this.minimumResultsForSearch) {
          return false;
        }

        return decorated.call(this, params);
      };

      return MinimumResultsForSearch;
    });
    S2.define('select2/dropdown/selectOnClose', ['../utils'], function (Utils) {
      function SelectOnClose() {}

      SelectOnClose.prototype.bind = function (decorated, container, $container) {
        var self = this;
        decorated.call(this, container, $container);
        container.on('close', function (params) {
          self._handleSelectOnClose(params);
        });
      };

      SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
        if (params && params.originalSelect2Event != null) {
          var event = params.originalSelect2Event; 

          if (event._type === 'select' || event._type === 'unselect') {
            return;
          }
        }

        var $highlightedResults = this.getHighlightedResults(); 

        if ($highlightedResults.length < 1) {
          return;
        }

        var data = Utils.GetData($highlightedResults[0], 'data'); 

        if (data.element != null && data.element.selected || data.element == null && data.selected) {
          return;
        }

        this.trigger('select', {
          data: data
        });
      };

      return SelectOnClose;
    });
    S2.define('select2/dropdown/closeOnSelect', [], function () {
      function CloseOnSelect() {}

      CloseOnSelect.prototype.bind = function (decorated, container, $container) {
        var self = this;
        decorated.call(this, container, $container);
        container.on('select', function (evt) {
          self._selectTriggered(evt);
        });
        container.on('unselect', function (evt) {
          self._selectTriggered(evt);
        });
      };

      CloseOnSelect.prototype._selectTriggered = function (_, evt) {
        var originalEvent = evt.originalEvent; 

        if (originalEvent && originalEvent.ctrlKey) {
          return;
        }

        this.trigger('close', {
          originalEvent: originalEvent,
          originalSelect2Event: evt
        });
      };

      return CloseOnSelect;
    });
    S2.define('select2/i18n/en', [], function () {
      return {
        errorLoading: function errorLoading() {
          return 'The results could not be loaded.';
        },
        inputTooLong: function inputTooLong(args) {
          var overChars = args.input.length - args.maximum;
          var message = 'Please delete ' + overChars + ' character';

          if (overChars != 1) {
            message += 's';
          }

          return message;
        },
        inputTooShort: function inputTooShort(args) {
          var remainingChars = args.minimum - args.input.length;
          var message = 'Please enter ' + remainingChars + ' or more characters';
          return message;
        },
        loadingMore: function loadingMore() {
          return 'Loading more results…';
        },
        maximumSelected: function maximumSelected(args) {
          var message = 'You can only select ' + args.maximum + ' item';

          if (args.maximum != 1) {
            message += 's';
          }

          return message;
        },
        noResults: function noResults() {
          return 'No results found';
        },
        searching: function searching() {
          return 'Searching…';
        }
      };
    });
    S2.define('select2/defaults', ['jquery', 'require', './results', './selection/single', './selection/multiple', './selection/placeholder', './selection/allowClear', './selection/search', './selection/eventRelay', './utils', './translation', './diacritics', './data/select', './data/array', './data/ajax', './data/tags', './data/tokenizer', './data/minimumInputLength', './data/maximumInputLength', './data/maximumSelectionLength', './dropdown', './dropdown/search', './dropdown/hidePlaceholder', './dropdown/infiniteScroll', './dropdown/attachBody', './dropdown/minimumResultsForSearch', './dropdown/selectOnClose', './dropdown/closeOnSelect', './i18n/en'], function ($, require, ResultsList, SingleSelection, MultipleSelection, Placeholder, AllowClear, SelectionSearch, EventRelay, Utils, Translation, DIACRITICS, SelectData, ArrayData, AjaxData, Tags, Tokenizer, MinimumInputLength, MaximumInputLength, MaximumSelectionLength, Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll, AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect, EnglishTranslation) {
      function Defaults() {
        this.reset();
      }

      Defaults.prototype.apply = function (options) {
        options = $.extend(true, {}, this.defaults, options);

        if (options.dataAdapter == null) {
          if (options.ajax != null) {
            options.dataAdapter = AjaxData;
          } else if (options.data != null) {
            options.dataAdapter = ArrayData;
          } else {
            options.dataAdapter = SelectData;
          }

          if (options.minimumInputLength > 0) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, MinimumInputLength);
          }

          if (options.maximumInputLength > 0) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumInputLength);
          }

          if (options.maximumSelectionLength > 0) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumSelectionLength);
          }

          if (options.tags) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
          }

          if (options.tokenSeparators != null || options.tokenizer != null) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tokenizer);
          }

          if (options.query != null) {
            var Query = require(options.amdBase + 'compat/query');

            options.dataAdapter = Utils.Decorate(options.dataAdapter, Query);
          }

          if (options.initSelection != null) {
            var InitSelection = require(options.amdBase + 'compat/initSelection');

            options.dataAdapter = Utils.Decorate(options.dataAdapter, InitSelection);
          }
        }

        if (options.resultsAdapter == null) {
          options.resultsAdapter = ResultsList;

          if (options.ajax != null) {
            options.resultsAdapter = Utils.Decorate(options.resultsAdapter, InfiniteScroll);
          }

          if (options.placeholder != null) {
            options.resultsAdapter = Utils.Decorate(options.resultsAdapter, HidePlaceholder);
          }

          if (options.selectOnClose) {
            options.resultsAdapter = Utils.Decorate(options.resultsAdapter, SelectOnClose);
          }
        }

        if (options.dropdownAdapter == null) {
          if (options.multiple) {
            options.dropdownAdapter = Dropdown;
          } else {
            var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);
            options.dropdownAdapter = SearchableDropdown;
          }

          if (options.minimumResultsForSearch !== 0) {
            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, MinimumResultsForSearch);
          }

          if (options.closeOnSelect) {
            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, CloseOnSelect);
          }

          if (options.dropdownCssClass != null || options.dropdownCss != null || options.adaptDropdownCssClass != null) {
            var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, DropdownCSS);
          }

          options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, AttachBody);
        }

        if (options.selectionAdapter == null) {
          if (options.multiple) {
            options.selectionAdapter = MultipleSelection;
          } else {
            options.selectionAdapter = SingleSelection;
          } 


          if (options.placeholder != null) {
            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, Placeholder);
          }

          if (options.allowClear) {
            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, AllowClear);
          }

          if (options.multiple) {
            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, SelectionSearch);
          }

          if (options.containerCssClass != null || options.containerCss != null || options.adaptContainerCssClass != null) {
            var ContainerCSS = require(options.amdBase + 'compat/containerCss');

            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, ContainerCSS);
          }

          options.selectionAdapter = Utils.Decorate(options.selectionAdapter, EventRelay);
        }

        if (typeof options.language === 'string') {
          if (options.language.indexOf('-') > 0) {
            var languageParts = options.language.split('-');
            var baseLanguage = languageParts[0];
            options.language = [options.language, baseLanguage];
          } else {
            options.language = [options.language];
          }
        }

        if ($.isArray(options.language)) {
          var languages = new Translation();
          options.language.push('en');
          var languageNames = options.language;

          for (var l = 0; l < languageNames.length; l++) {
            var name = languageNames[l];
            var language = {};

            try {
              language = Translation.loadPath(name);
            } catch (e) {
              try {
                name = this.defaults.amdLanguageBase + name;
                language = Translation.loadPath(name);
              } catch (ex) {
                if (options.debug && window.console && console.warn) {
                  void 0;
                }

                continue;
              }
            }

            languages.extend(language);
          }

          options.translations = languages;
        } else {
          var baseTranslation = Translation.loadPath(this.defaults.amdLanguageBase + 'en');
          var customTranslation = new Translation(options.language);
          customTranslation.extend(baseTranslation);
          options.translations = customTranslation;
        }

        return options;
      };

      Defaults.prototype.reset = function () {
        function stripDiacritics(text) {
          function match(a) {
            return DIACRITICS[a] || a;
          }

          return text.replace(/[^\u0000-\u007E]/g, match);
        }

        function matcher(params, data) {
          if ($.trim(params.term) === '') {
            return data;
          } 


          if (data.children && data.children.length > 0) {
            var match = $.extend(true, {}, data); 

            for (var c = data.children.length - 1; c >= 0; c--) {
              var child = data.children[c];
              var matches = matcher(params, child); 

              if (matches == null) {
                match.children.splice(c, 1);
              }
            } 


            if (match.children.length > 0) {
              return match;
            } 


            return matcher(params, match);
          }

          var original = stripDiacritics(data.text).toUpperCase();
          var term = stripDiacritics(params.term).toUpperCase(); 

          if (original.indexOf(term) > -1) {
            return data;
          } 


          return null;
        }

        this.defaults = {
          amdBase: './',
          amdLanguageBase: './i18n/',
          closeOnSelect: true,
          debug: false,
          dropdownAutoWidth: false,
          escapeMarkup: Utils.escapeMarkup,
          language: EnglishTranslation,
          matcher: matcher,
          minimumInputLength: 0,
          maximumInputLength: 0,
          maximumSelectionLength: 0,
          minimumResultsForSearch: 0,
          selectOnClose: false,
          sorter: function sorter(data) {
            return data;
          },
          templateResult: function templateResult(result) {
            return result.text;
          },
          templateSelection: function templateSelection(selection) {
            return selection.text;
          },
          theme: 'default',
          width: 'resolve'
        };
      };

      Defaults.prototype.set = function (key, value) {
        var camelKey = $.camelCase(key);
        var data = {};
        data[camelKey] = value;

        var convertedData = Utils._convertData(data);

        $.extend(true, this.defaults, convertedData);
      };

      var defaults = new Defaults();
      return defaults;
    });
    S2.define('select2/options', ['require', 'jquery', './defaults', './utils'], function (require, $, Defaults, Utils) {
      function Options(options, $element) {
        this.options = options;

        if ($element != null) {
          this.fromElement($element);
        }

        this.options = Defaults.apply(this.options);

        if ($element && $element.is('input')) {
          var InputCompat = require(this.get('amdBase') + 'compat/inputData');

          this.options.dataAdapter = Utils.Decorate(this.options.dataAdapter, InputCompat);
        }
      }

      Options.prototype.fromElement = function ($e) {
        var excludedData = ['select2'];

        if (this.options.multiple == null) {
          this.options.multiple = $e.prop('multiple');
        }

        if (this.options.disabled == null) {
          this.options.disabled = $e.prop('disabled');
        }

        if (this.options.language == null) {
          if ($e.prop('lang')) {
            this.options.language = $e.prop('lang').toLowerCase();
          } else if ($e.closest('[lang]').prop('lang')) {
            this.options.language = $e.closest('[lang]').prop('lang');
          }
        }

        if (this.options.dir == null) {
          if ($e.prop('dir')) {
            this.options.dir = $e.prop('dir');
          } else if ($e.closest('[dir]').prop('dir')) {
            this.options.dir = $e.closest('[dir]').prop('dir');
          } else {
            this.options.dir = 'ltr';
          }
        }

        $e.prop('disabled', this.options.disabled);
        $e.prop('multiple', this.options.multiple);

        if (Utils.GetData($e[0], 'select2Tags')) {
          if (this.options.debug && window.console && console.warn) {
            void 0;
          }

          Utils.StoreData($e[0], 'data', Utils.GetData($e[0], 'select2Tags'));
          Utils.StoreData($e[0], 'tags', true);
        }

        if (Utils.GetData($e[0], 'ajaxUrl')) {
          if (this.options.debug && window.console && console.warn) {
            void 0;
          }

          $e.attr('ajax--url', Utils.GetData($e[0], 'ajaxUrl'));
          Utils.StoreData($e[0], 'ajax-Url', Utils.GetData($e[0], 'ajaxUrl'));
        }

        var dataset = {}; 

        if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
          dataset = $.extend(true, {}, $e[0].dataset, Utils.GetData($e[0]));
        } else {
          dataset = Utils.GetData($e[0]);
        }

        var data = $.extend(true, {}, dataset);
        data = Utils._convertData(data);

        for (var key in data) {
          if ($.inArray(key, excludedData) > -1) {
            continue;
          }

          if ($.isPlainObject(this.options[key])) {
            $.extend(this.options[key], data[key]);
          } else {
            this.options[key] = data[key];
          }
        }

        return this;
      };

      Options.prototype.get = function (key) {
        return this.options[key];
      };

      Options.prototype.set = function (key, val) {
        this.options[key] = val;
      };

      return Options;
    });
    S2.define('select2/core', ['jquery', './options', './utils', './keys'], function ($, Options, Utils, KEYS) {
      var Select2 = function Select2($element, options) {
        if (Utils.GetData($element[0], 'select2') != null) {
          Utils.GetData($element[0], 'select2').destroy();
        }

        this.$element = $element;
        this.id = this._generateId($element);
        options = options || {};
        this.options = new Options(options, $element);

        Select2.__super__.constructor.call(this); 


        var tabindex = $element.attr('tabindex') || 0;
        Utils.StoreData($element[0], 'old-tabindex', tabindex);
        $element.attr('tabindex', '-1'); 

        var DataAdapter = this.options.get('dataAdapter');
        this.dataAdapter = new DataAdapter($element, this.options);
        var $container = this.render();

        this._placeContainer($container);

        var SelectionAdapter = this.options.get('selectionAdapter');
        this.selection = new SelectionAdapter($element, this.options);
        this.$selection = this.selection.render();
        this.selection.position(this.$selection, $container);
        var DropdownAdapter = this.options.get('dropdownAdapter');
        this.dropdown = new DropdownAdapter($element, this.options);
        this.$dropdown = this.dropdown.render();
        this.dropdown.position(this.$dropdown, $container);
        var ResultsAdapter = this.options.get('resultsAdapter');
        this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
        this.$results = this.results.render();
        this.results.position(this.$results, this.$dropdown); 

        var self = this; 

        this._bindAdapters(); 


        this._registerDomEvents(); 


        this._registerDataEvents();

        this._registerSelectionEvents();

        this._registerDropdownEvents();

        this._registerResultsEvents();

        this._registerEvents(); 


        this.dataAdapter.current(function (initialData) {
          self.trigger('selection:update', {
            data: initialData
          });
        }); 

        $element.addClass('select2-hidden-accessible');
        $element.attr('aria-hidden', 'true'); 

        this._syncAttributes();

        Utils.StoreData($element[0], 'select2', this); 

        $element.data('select2', this);
      };

      Utils.Extend(Select2, Utils.Observable);

      Select2.prototype._generateId = function ($element) {
        var id = '';

        if ($element.attr('id') != null) {
          id = $element.attr('id');
        } else if ($element.attr('name') != null) {
          id = $element.attr('name') + '-' + Utils.generateChars(2);
        } else {
          id = Utils.generateChars(4);
        }

        id = id.replace(/(:|\.|\[|\]|,)/g, '');
        id = 'select2-' + id;
        return id;
      };

      Select2.prototype._placeContainer = function ($container) {
        $container.insertAfter(this.$element);

        var width = this._resolveWidth(this.$element, this.options.get('width'));

        if (width != null) {
          $container.css('width', width);
        }
      };

      Select2.prototype._resolveWidth = function ($element, method) {
        var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

        if (method == 'resolve') {
          var styleWidth = this._resolveWidth($element, 'style');

          if (styleWidth != null) {
            return styleWidth;
          }

          return this._resolveWidth($element, 'element');
        }

        if (method == 'element') {
          var elementWidth = $element.outerWidth(false);

          if (elementWidth <= 0) {
            return 'auto';
          }

          return elementWidth + 'px';
        }

        if (method == 'style') {
          var style = $element.attr('style');

          if (typeof style !== 'string') {
            return null;
          }

          var attrs = style.split(';');

          for (var i = 0, l = attrs.length; i < l; i = i + 1) {
            var attr = attrs[i].replace(/\s/g, '');
            var matches = attr.match(WIDTH);

            if (matches !== null && matches.length >= 1) {
              return matches[1];
            }
          }

          return null;
        }

        return method;
      };

      Select2.prototype._bindAdapters = function () {
        this.dataAdapter.bind(this, this.$container);
        this.selection.bind(this, this.$container);
        this.dropdown.bind(this, this.$container);
        this.results.bind(this, this.$container);
      };

      Select2.prototype._registerDomEvents = function () {
        var self = this;
        this.$element.on('change.select2', function () {
          self.dataAdapter.current(function (data) {
            self.trigger('selection:update', {
              data: data
            });
          });
        });
        this.$element.on('focus.select2', function (evt) {
          self.trigger('focus', evt);
        });
        this._syncA = Utils.bind(this._syncAttributes, this);
        this._syncS = Utils.bind(this._syncSubtree, this);

        if (this.$element[0].attachEvent) {
          this.$element[0].attachEvent('onpropertychange', this._syncA);
        }

        var observer = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;

        if (observer != null) {
          this._observer = new observer(function (mutations) {
            $.each(mutations, self._syncA);
            $.each(mutations, self._syncS);
          });

          this._observer.observe(this.$element[0], {
            attributes: true,
            childList: true,
            subtree: false
          });
        } else if (this.$element[0].addEventListener) {
          this.$element[0].addEventListener('DOMAttrModified', self._syncA, false);
          this.$element[0].addEventListener('DOMNodeInserted', self._syncS, false);
          this.$element[0].addEventListener('DOMNodeRemoved', self._syncS, false);
        }
      };

      Select2.prototype._registerDataEvents = function () {
        var self = this;
        this.dataAdapter.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };

      Select2.prototype._registerSelectionEvents = function () {
        var self = this;
        var nonRelayEvents = ['toggle', 'focus'];
        this.selection.on('toggle', function () {
          self.toggleDropdown();
        });
        this.selection.on('focus', function (params) {
          self.focus(params);
        });
        this.selection.on('*', function (name, params) {
          if ($.inArray(name, nonRelayEvents) !== -1) {
            return;
          }

          self.trigger(name, params);
        });
      };

      Select2.prototype._registerDropdownEvents = function () {
        var self = this;
        this.dropdown.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };

      Select2.prototype._registerResultsEvents = function () {
        var self = this;
        this.results.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };

      Select2.prototype._registerEvents = function () {
        var self = this;
        this.on('open', function () {
          self.$container.addClass('select2-container--open');
        });
        this.on('close', function () {
          self.$container.removeClass('select2-container--open');
        });
        this.on('enable', function () {
          self.$container.removeClass('select2-container--disabled');
        });
        this.on('disable', function () {
          self.$container.addClass('select2-container--disabled');
        });
        this.on('blur', function () {
          self.$container.removeClass('select2-container--focus');
        });
        this.on('query', function (params) {
          if (!self.isOpen()) {
            self.trigger('open', {});
          }

          this.dataAdapter.query(params, function (data) {
            self.trigger('results:all', {
              data: data,
              query: params
            });
          });
        });
        this.on('query:append', function (params) {
          this.dataAdapter.query(params, function (data) {
            self.trigger('results:append', {
              data: data,
              query: params
            });
          });
        });
        this.on('keypress', function (evt) {
          var key = evt.which;

          if (self.isOpen()) {
            if (key === KEYS.ESC || key === KEYS.TAB || key === KEYS.UP && evt.altKey) {
              self.close();
              evt.preventDefault();
            } else if (key === KEYS.ENTER) {
              self.trigger('results:select', {});
              evt.preventDefault();
            } else if (key === KEYS.SPACE && evt.ctrlKey) {
              self.trigger('results:toggle', {});
              evt.preventDefault();
            } else if (key === KEYS.UP) {
              self.trigger('results:previous', {});
              evt.preventDefault();
            } else if (key === KEYS.DOWN) {
              self.trigger('results:next', {});
              evt.preventDefault();
            }
          } else {
            if (key === KEYS.ENTER || key === KEYS.SPACE || key === KEYS.DOWN && evt.altKey) {
              self.open();
              evt.preventDefault();
            }
          }
        });
      };

      Select2.prototype._syncAttributes = function () {
        this.options.set('disabled', this.$element.prop('disabled'));

        if (this.options.get('disabled')) {
          if (this.isOpen()) {
            this.close();
          }

          this.trigger('disable', {});
        } else {
          this.trigger('enable', {});
        }
      };

      Select2.prototype._syncSubtree = function (evt, mutations) {
        var changed = false;
        var self = this; 

        if (evt && evt.target && evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP') {
          return;
        }

        if (!mutations) {
          changed = true;
        } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
          for (var n = 0; n < mutations.addedNodes.length; n++) {
            var node = mutations.addedNodes[n];

            if (node.selected) {
              changed = true;
            }
          }
        } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
          changed = true;
        } 


        if (changed) {
          this.dataAdapter.current(function (currentData) {
            self.trigger('selection:update', {
              data: currentData
            });
          });
        }
      };


      Select2.prototype.trigger = function (name, args) {
        var actualTrigger = Select2.__super__.trigger;
        var preTriggerMap = {
          'open': 'opening',
          'close': 'closing',
          'select': 'selecting',
          'unselect': 'unselecting',
          'clear': 'clearing'
        };

        if (args === undefined) {
          args = {};
        }

        if (name in preTriggerMap) {
          var preTriggerName = preTriggerMap[name];
          var preTriggerArgs = {
            prevented: false,
            name: name,
            args: args
          };
          actualTrigger.call(this, preTriggerName, preTriggerArgs);

          if (preTriggerArgs.prevented) {
            args.prevented = true;
            return;
          }
        }

        actualTrigger.call(this, name, args);
      };

      Select2.prototype.toggleDropdown = function () {
        if (this.options.get('disabled')) {
          return;
        }

        if (this.isOpen()) {
          this.close();
        } else {
          this.open();
        }
      };

      Select2.prototype.open = function () {
        if (this.isOpen()) {
          return;
        }

        this.trigger('query', {});
      };

      Select2.prototype.close = function () {
        if (!this.isOpen()) {
          return;
        }

        this.trigger('close', {});
      };

      Select2.prototype.isOpen = function () {
        return this.$container.hasClass('select2-container--open');
      };

      Select2.prototype.hasFocus = function () {
        return this.$container.hasClass('select2-container--focus');
      };

      Select2.prototype.focus = function (data) {
        if (this.hasFocus()) {
          return;
        }

        this.$container.addClass('select2-container--focus');
        this.trigger('focus', {});
      };

      Select2.prototype.enable = function (args) {
        if (this.options.get('debug') && window.console && console.warn) {
          void 0;
        }

        if (args == null || args.length === 0) {
          args = [true];
        }

        var disabled = !args[0];
        this.$element.prop('disabled', disabled);
      };

      Select2.prototype.data = function () {
        if (this.options.get('debug') && arguments.length > 0 && window.console && console.warn) {
          void 0;
        }

        var data = [];
        this.dataAdapter.current(function (currentData) {
          data = currentData;
        });
        return data;
      };

      Select2.prototype.val = function (args) {
        if (this.options.get('debug') && window.console && console.warn) {
          void 0;
        }

        if (args == null || args.length === 0) {
          return this.$element.val();
        }

        var newVal = args[0];

        if ($.isArray(newVal)) {
          newVal = $.map(newVal, function (obj) {
            return obj.toString();
          });
        }

        this.$element.val(newVal).trigger('change');
      };

      Select2.prototype.destroy = function () {
        this.$container.remove();

        if (this.$element[0].detachEvent) {
          this.$element[0].detachEvent('onpropertychange', this._syncA);
        }

        if (this._observer != null) {
          this._observer.disconnect();

          this._observer = null;
        } else if (this.$element[0].removeEventListener) {
          this.$element[0].removeEventListener('DOMAttrModified', this._syncA, false);
          this.$element[0].removeEventListener('DOMNodeInserted', this._syncS, false);
          this.$element[0].removeEventListener('DOMNodeRemoved', this._syncS, false);
        }

        this._syncA = null;
        this._syncS = null;
        this.$element.off('.select2');
        this.$element.attr('tabindex', Utils.GetData(this.$element[0], 'old-tabindex'));
        this.$element.removeClass('select2-hidden-accessible');
        this.$element.attr('aria-hidden', 'false');
        Utils.RemoveData(this.$element[0]);
        this.$element.removeData('select2');
        this.dataAdapter.destroy();
        this.selection.destroy();
        this.dropdown.destroy();
        this.results.destroy();
        this.dataAdapter = null;
        this.selection = null;
        this.dropdown = null;
        this.results = null;
      };

      Select2.prototype.render = function () {
        var $container = $('<span class="select2 select2-container">' + '<span class="selection"></span>' + '<span class="dropdown-wrapper" aria-hidden="true"></span>' + '</span>');
        $container.attr('dir', this.options.get('dir'));
        this.$container = $container;
        this.$container.addClass('select2-container--' + this.options.get('theme'));
        Utils.StoreData($container[0], 'element', this.$element);
        return $container;
      };

      return Select2;
    });
    S2.define('jquery-mousewheel', ['jquery'], function ($) {
      return $;
    });
    S2.define('jquery.select2', ['jquery', 'jquery-mousewheel', './select2/core', './select2/defaults', './select2/utils'], function ($, _, Select2, Defaults, Utils) {
      if ($.fn.select2 == null) {
        var thisMethods = ['open', 'close', 'destroy'];

        $.fn.select2 = function (options) {
          options = options || {};

          if (_typeof(options) === 'object') {
            this.each(function () {
              var instanceOptions = $.extend(true, {}, options);
              var instance = new Select2($(this), instanceOptions);
            });
            return this;
          } else if (typeof options === 'string') {
            var ret;
            var args = Array.prototype.slice.call(arguments, 1);
            this.each(function () {
              var instance = Utils.GetData(this, 'select2');

              if (instance == null && window.console && console.error) {
                void 0;
              }

              ret = instance[options].apply(instance, args);
            }); 

            if ($.inArray(options, thisMethods) > -1) {
              return this;
            }

            return ret;
          } else {
            throw new Error('Invalid arguments for Select2: ' + options);
          }
        };
      }

      if ($.fn.select2.defaults == null) {
        $.fn.select2.defaults = Defaults;
      }

      return Select2;
    }); 

    return {
      define: S2.define,
      require: S2.require
    };
  }(); 


  var select2 = S2.require('jquery.select2'); 


  jQuery.fn.select2.amd = S2; 

  return select2;
});
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
    module.exports = factory();
  } else {
    window.noUiSlider = factory();
  }
})(function () {
  "use strict";

  var VERSION = "13.1.1"; 

  function isValidFormatter(entry) {
    return _typeof(entry) === "object" && typeof entry.to === "function" && typeof entry.from === "function";
  }

  function removeElement(el) {
    el.parentElement.removeChild(el);
  }

  function isSet(value) {
    return value !== null && value !== undefined;
  } 


  function preventDefault(e) {
    e.preventDefault();
  } 


  function unique(array) {
    return array.filter(function (a) {
      return !this[a] ? this[a] = true : false;
    }, {});
  } 


  function closest(value, to) {
    return Math.round(value / to) * to;
  } 


  function offset(elem, orientation) {
    var rect = elem.getBoundingClientRect();
    var doc = elem.ownerDocument;
    var docElem = doc.documentElement;
    var pageOffset = getPageOffset(doc); 

    if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {
      pageOffset.x = 0;
    }

    return orientation ? rect.top + pageOffset.y - docElem.clientTop : rect.left + pageOffset.x - docElem.clientLeft;
  } 


  function isNumeric(a) {
    return typeof a === "number" && !isNaN(a) && isFinite(a);
  } 


  function addClassFor(element, className, duration) {
    if (duration > 0) {
      addClass(element, className);
      setTimeout(function () {
        removeClass(element, className);
      }, duration);
    }
  } 


  function limit(a) {
    return Math.max(Math.min(a, 100), 0);
  } 


  function asArray(a) {
    return Array.isArray(a) ? a : [a];
  } 


  function countDecimals(numStr) {
    numStr = String(numStr);
    var pieces = numStr.split(".");
    return pieces.length > 1 ? pieces[1].length : 0;
  } 


  function addClass(el, className) {
    if (el.classList) {
      el.classList.add(className);
    } else {
      el.className += " " + className;
    }
  } 


  function removeClass(el, className) {
    if (el.classList) {
      el.classList.remove(className);
    } else {
      el.className = el.className.replace(new RegExp("(^|\\b)" + className.split(" ").join("|") + "(\\b|$)", "gi"), " ");
    }
  } 


  function hasClass(el, className) {
    return el.classList ? el.classList.contains(className) : new RegExp("\\b" + className + "\\b").test(el.className);
  } 


  function getPageOffset(doc) {
    var supportPageOffset = window.pageXOffset !== undefined;
    var isCSS1Compat = (doc.compatMode || "") === "CSS1Compat";
    var x = supportPageOffset ? window.pageXOffset : isCSS1Compat ? doc.documentElement.scrollLeft : doc.body.scrollLeft;
    var y = supportPageOffset ? window.pageYOffset : isCSS1Compat ? doc.documentElement.scrollTop : doc.body.scrollTop;
    return {
      x: x,
      y: y
    };
  } 


  function getActions() {
    return window.navigator.pointerEnabled ? {
      start: "pointerdown",
      move: "pointermove",
      end: "pointerup"
    } : window.navigator.msPointerEnabled ? {
      start: "MSPointerDown",
      move: "MSPointerMove",
      end: "MSPointerUp"
    } : {
      start: "mousedown touchstart",
      move: "mousemove touchmove",
      end: "mouseup touchend"
    };
  } 


  function getSupportsPassive() {
    var supportsPassive = false;

    try {
      var opts = Object.defineProperty({}, "passive", {
        get: function get() {
          supportsPassive = true;
        }
      });
      window.addEventListener("test", null, opts);
    } catch (e) {}


    return supportsPassive;
  }

  function getSupportsTouchActionNone() {
    return window.CSS && CSS.supports && CSS.supports("touch-action", "none");
  } 


  function subRangeRatio(pa, pb) {
    return 100 / (pb - pa);
  } 


  function fromPercentage(range, value) {
    return value * 100 / (range[1] - range[0]);
  } 


  function toPercentage(range, value) {
    return fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0]);
  } 


  function isPercentage(range, value) {
    return value * (range[1] - range[0]) / 100 + range[0];
  }

  function getJ(value, arr) {
    var j = 1;

    while (value >= arr[j]) {
      j += 1;
    }

    return j;
  } 


  function toStepping(xVal, xPct, value) {
    if (value >= xVal.slice(-1)[0]) {
      return 100;
    }

    var j = getJ(value, xVal);
    var va = xVal[j - 1];
    var vb = xVal[j];
    var pa = xPct[j - 1];
    var pb = xPct[j];
    return pa + toPercentage([va, vb], value) / subRangeRatio(pa, pb);
  } 


  function fromStepping(xVal, xPct, value) {
    if (value >= 100) {
      return xVal.slice(-1)[0];
    }

    var j = getJ(value, xPct);
    var va = xVal[j - 1];
    var vb = xVal[j];
    var pa = xPct[j - 1];
    var pb = xPct[j];
    return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));
  } 


  function getStep(xPct, xSteps, snap, value) {
    if (value === 100) {
      return value;
    }

    var j = getJ(value, xPct);
    var a = xPct[j - 1];
    var b = xPct[j]; 

    if (snap) {
      if (value - a > (b - a) / 2) {
        return b;
      }

      return a;
    }

    if (!xSteps[j - 1]) {
      return value;
    }

    return xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1]);
  }

  function handleEntryPoint(index, value, that) {
    var percentage; 

    if (typeof value === "number") {
      value = [value];
    } 


    if (!Array.isArray(value)) {
      throw new Error("noUiSlider (" + VERSION + "): 'range' contains invalid value.");
    } 


    if (index === "min") {
      percentage = 0;
    } else if (index === "max") {
      percentage = 100;
    } else {
      percentage = parseFloat(index);
    } 


    if (!isNumeric(percentage) || !isNumeric(value[0])) {
      throw new Error("noUiSlider (" + VERSION + "): 'range' value isn't numeric.");
    } 


    that.xPct.push(percentage);
    that.xVal.push(value[0]); 

    if (!percentage) {
      if (!isNaN(value[1])) {
        that.xSteps[0] = value[1];
      }
    } else {
      that.xSteps.push(isNaN(value[1]) ? false : value[1]);
    }

    that.xHighestCompleteStep.push(0);
  }

  function handleStepPoint(i, n, that) {
    if (!n) {
      return;
    } 


    if (that.xVal[i] === that.xVal[i + 1]) {
      that.xSteps[i] = that.xHighestCompleteStep[i] = that.xVal[i];
      return;
    } 


    that.xSteps[i] = fromPercentage([that.xVal[i], that.xVal[i + 1]], n) / subRangeRatio(that.xPct[i], that.xPct[i + 1]);
    var totalSteps = (that.xVal[i + 1] - that.xVal[i]) / that.xNumSteps[i];
    var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);
    var step = that.xVal[i] + that.xNumSteps[i] * highestStep;
    that.xHighestCompleteStep[i] = step;
  } 


  function Spectrum(entry, snap, singleStep) {
    this.xPct = [];
    this.xVal = [];
    this.xSteps = [singleStep || false];
    this.xNumSteps = [false];
    this.xHighestCompleteStep = [];
    this.snap = snap;
    var index;
    var ordered = []; 

    for (index in entry) {
      if (entry.hasOwnProperty(index)) {
        ordered.push([entry[index], index]);
      }
    } 


    if (ordered.length && _typeof(ordered[0][0]) === "object") {
      ordered.sort(function (a, b) {
        return a[0][0] - b[0][0];
      });
    } else {
      ordered.sort(function (a, b) {
        return a[0] - b[0];
      });
    } 


    for (index = 0; index < ordered.length; index++) {
      handleEntryPoint(ordered[index][1], ordered[index][0], this);
    } 


    this.xNumSteps = this.xSteps.slice(0); 

    for (index = 0; index < this.xNumSteps.length; index++) {
      handleStepPoint(index, this.xNumSteps[index], this);
    }
  }

  Spectrum.prototype.getMargin = function (value) {
    var step = this.xNumSteps[0];

    if (step && value / step % 1 !== 0) {
      throw new Error("noUiSlider (" + VERSION + "): 'limit', 'margin' and 'padding' must be divisible by step.");
    }

    return this.xPct.length === 2 ? fromPercentage(this.xVal, value) : false;
  };

  Spectrum.prototype.toStepping = function (value) {
    value = toStepping(this.xVal, this.xPct, value);
    return value;
  };

  Spectrum.prototype.fromStepping = function (value) {
    return fromStepping(this.xVal, this.xPct, value);
  };

  Spectrum.prototype.getStep = function (value) {
    value = getStep(this.xPct, this.xSteps, this.snap, value);
    return value;
  };

  Spectrum.prototype.getDefaultStep = function (value, isDown, size) {
    var j = getJ(value, this.xPct); 

    if (value === 100 || isDown && value === this.xPct[j - 1]) {
      j = Math.max(j - 1, 1);
    }

    return (this.xVal[j] - this.xVal[j - 1]) / size;
  };

  Spectrum.prototype.getNearbySteps = function (value) {
    var j = getJ(value, this.xPct);
    return {
      stepBefore: {
        startValue: this.xVal[j - 2],
        step: this.xNumSteps[j - 2],
        highestStep: this.xHighestCompleteStep[j - 2]
      },
      thisStep: {
        startValue: this.xVal[j - 1],
        step: this.xNumSteps[j - 1],
        highestStep: this.xHighestCompleteStep[j - 1]
      },
      stepAfter: {
        startValue: this.xVal[j],
        step: this.xNumSteps[j],
        highestStep: this.xHighestCompleteStep[j]
      }
    };
  };

  Spectrum.prototype.countStepDecimals = function () {
    var stepDecimals = this.xNumSteps.map(countDecimals);
    return Math.max.apply(null, stepDecimals);
  }; 


  Spectrum.prototype.convert = function (value) {
    return this.getStep(this.toStepping(value));
  }; 



  var defaultFormatter = {
    to: function to(value) {
      return value !== undefined && value.toFixed(2);
    },
    from: Number
  };

  function validateFormat(entry) {
    if (isValidFormatter(entry)) {
      return true;
    }

    throw new Error("noUiSlider (" + VERSION + "): 'format' requires 'to' and 'from' methods.");
  }

  function testStep(parsed, entry) {
    if (!isNumeric(entry)) {
      throw new Error("noUiSlider (" + VERSION + "): 'step' is not numeric.");
    } 


    parsed.singleStep = entry;
  }

  function testRange(parsed, entry) {
    if (_typeof(entry) !== "object" || Array.isArray(entry)) {
      throw new Error("noUiSlider (" + VERSION + "): 'range' is not an object.");
    } 


    if (entry.min === undefined || entry.max === undefined) {
      throw new Error("noUiSlider (" + VERSION + "): Missing 'min' or 'max' in 'range'.");
    } 


    if (entry.min === entry.max) {
      throw new Error("noUiSlider (" + VERSION + "): 'range' 'min' and 'max' cannot be equal.");
    }

    parsed.spectrum = new Spectrum(entry, parsed.snap, parsed.singleStep);
  }

  function testStart(parsed, entry) {
    entry = asArray(entry); 

    if (!Array.isArray(entry) || !entry.length) {
      throw new Error("noUiSlider (" + VERSION + "): 'start' option is incorrect.");
    } 


    parsed.handles = entry.length; 

    parsed.start = entry;
  }

  function testSnap(parsed, entry) {
    parsed.snap = entry;

    if (typeof entry !== "boolean") {
      throw new Error("noUiSlider (" + VERSION + "): 'snap' option must be a boolean.");
    }
  }

  function testAnimate(parsed, entry) {
    parsed.animate = entry;

    if (typeof entry !== "boolean") {
      throw new Error("noUiSlider (" + VERSION + "): 'animate' option must be a boolean.");
    }
  }

  function testAnimationDuration(parsed, entry) {
    parsed.animationDuration = entry;

    if (typeof entry !== "number") {
      throw new Error("noUiSlider (" + VERSION + "): 'animationDuration' option must be a number.");
    }
  }

  function testConnect(parsed, entry) {
    var connect = [false];
    var i; 

    if (entry === "lower") {
      entry = [true, false];
    } else if (entry === "upper") {
      entry = [false, true];
    } 


    if (entry === true || entry === false) {
      for (i = 1; i < parsed.handles; i++) {
        connect.push(entry);
      }

      connect.push(false);
    } 
    else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {
        throw new Error("noUiSlider (" + VERSION + "): 'connect' option doesn't match handle count.");
      } else {
        connect = entry;
      }

    parsed.connect = connect;
  }

  function testOrientation(parsed, entry) {
    switch (entry) {
      case "horizontal":
        parsed.ort = 0;
        break;

      case "vertical":
        parsed.ort = 1;
        break;

      default:
        throw new Error("noUiSlider (" + VERSION + "): 'orientation' option is invalid.");
    }
  }

  function testMargin(parsed, entry) {
    if (!isNumeric(entry)) {
      throw new Error("noUiSlider (" + VERSION + "): 'margin' option must be numeric.");
    } 


    if (entry === 0) {
      return;
    }

    parsed.margin = parsed.spectrum.getMargin(entry);

    if (!parsed.margin) {
      throw new Error("noUiSlider (" + VERSION + "): 'margin' option is only supported on linear sliders.");
    }
  }

  function testLimit(parsed, entry) {
    if (!isNumeric(entry)) {
      throw new Error("noUiSlider (" + VERSION + "): 'limit' option must be numeric.");
    }

    parsed.limit = parsed.spectrum.getMargin(entry);

    if (!parsed.limit || parsed.handles < 2) {
      throw new Error("noUiSlider (" + VERSION + "): 'limit' option is only supported on linear sliders with 2 or more handles.");
    }
  }

  function testPadding(parsed, entry) {
    if (!isNumeric(entry) && !Array.isArray(entry)) {
      throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be numeric or array of exactly 2 numbers.");
    }

    if (Array.isArray(entry) && !(entry.length === 2 || isNumeric(entry[0]) || isNumeric(entry[1]))) {
      throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be numeric or array of exactly 2 numbers.");
    }

    if (entry === 0) {
      return;
    }

    if (!Array.isArray(entry)) {
      entry = [entry, entry];
    } 


    parsed.padding = [parsed.spectrum.getMargin(entry[0]), parsed.spectrum.getMargin(entry[1])];

    if (parsed.padding[0] === false || parsed.padding[1] === false) {
      throw new Error("noUiSlider (" + VERSION + "): 'padding' option is only supported on linear sliders.");
    }

    if (parsed.padding[0] < 0 || parsed.padding[1] < 0) {
      throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be a positive number(s).");
    }

    if (parsed.padding[0] + parsed.padding[1] >= 100) {
      throw new Error("noUiSlider (" + VERSION + "): 'padding' option must not exceed 100% of the range.");
    }
  }

  function testDirection(parsed, entry) {
    switch (entry) {
      case "ltr":
        parsed.dir = 0;
        break;

      case "rtl":
        parsed.dir = 1;
        break;

      default:
        throw new Error("noUiSlider (" + VERSION + "): 'direction' option was not recognized.");
    }
  }

  function testBehaviour(parsed, entry) {
    if (typeof entry !== "string") {
      throw new Error("noUiSlider (" + VERSION + "): 'behaviour' must be a string containing options.");
    } 


    var tap = entry.indexOf("tap") >= 0;
    var drag = entry.indexOf("drag") >= 0;
    var fixed = entry.indexOf("fixed") >= 0;
    var snap = entry.indexOf("snap") >= 0;
    var hover = entry.indexOf("hover") >= 0;
    var unconstrained = entry.indexOf("unconstrained") >= 0;

    if (fixed) {
      if (parsed.handles !== 2) {
        throw new Error("noUiSlider (" + VERSION + "): 'fixed' behaviour must be used with 2 handles");
      } 


      testMargin(parsed, parsed.start[1] - parsed.start[0]);
    }

    if (unconstrained && (parsed.margin || parsed.limit)) {
      throw new Error("noUiSlider (" + VERSION + "): 'unconstrained' behaviour cannot be used with margin or limit");
    }

    parsed.events = {
      tap: tap || snap,
      drag: drag,
      fixed: fixed,
      snap: snap,
      hover: hover,
      unconstrained: unconstrained
    };
  }

  function testTooltips(parsed, entry) {
    if (entry === false) {
      return;
    }

    if (entry === true) {
      parsed.tooltips = [];

      for (var i = 0; i < parsed.handles; i++) {
        parsed.tooltips.push(true);
      }
    } else {
      parsed.tooltips = asArray(entry);

      if (parsed.tooltips.length !== parsed.handles) {
        throw new Error("noUiSlider (" + VERSION + "): must pass a formatter for all handles.");
      }

      parsed.tooltips.forEach(function (formatter) {
        if (typeof formatter !== "boolean" && (_typeof(formatter) !== "object" || typeof formatter.to !== "function")) {
          throw new Error("noUiSlider (" + VERSION + "): 'tooltips' must be passed a formatter or 'false'.");
        }
      });
    }
  }

  function testAriaFormat(parsed, entry) {
    parsed.ariaFormat = entry;
    validateFormat(entry);
  }

  function testFormat(parsed, entry) {
    parsed.format = entry;
    validateFormat(entry);
  }

  function testKeyboardSupport(parsed, entry) {
    parsed.keyboardSupport = entry;

    if (typeof entry !== "boolean") {
      throw new Error("noUiSlider (" + VERSION + "): 'keyboardSupport' option must be a boolean.");
    }
  }

  function testDocumentElement(parsed, entry) {
    parsed.documentElement = entry;
  }

  function testCssPrefix(parsed, entry) {
    if (typeof entry !== "string" && entry !== false) {
      throw new Error("noUiSlider (" + VERSION + "): 'cssPrefix' must be a string or `false`.");
    }

    parsed.cssPrefix = entry;
  }

  function testCssClasses(parsed, entry) {
    if (_typeof(entry) !== "object") {
      throw new Error("noUiSlider (" + VERSION + "): 'cssClasses' must be an object.");
    }

    if (typeof parsed.cssPrefix === "string") {
      parsed.cssClasses = {};

      for (var key in entry) {
        if (!entry.hasOwnProperty(key)) {
          continue;
        }

        parsed.cssClasses[key] = parsed.cssPrefix + entry[key];
      }
    } else {
      parsed.cssClasses = entry;
    }
  } 


  function testOptions(options) {
    var parsed = {
      margin: 0,
      limit: 0,
      padding: 0,
      animate: true,
      animationDuration: 300,
      ariaFormat: defaultFormatter,
      format: defaultFormatter
    }; 

    var tests = {
      step: {
        r: false,
        t: testStep
      },
      start: {
        r: true,
        t: testStart
      },
      connect: {
        r: true,
        t: testConnect
      },
      direction: {
        r: true,
        t: testDirection
      },
      snap: {
        r: false,
        t: testSnap
      },
      animate: {
        r: false,
        t: testAnimate
      },
      animationDuration: {
        r: false,
        t: testAnimationDuration
      },
      range: {
        r: true,
        t: testRange
      },
      orientation: {
        r: false,
        t: testOrientation
      },
      margin: {
        r: false,
        t: testMargin
      },
      limit: {
        r: false,
        t: testLimit
      },
      padding: {
        r: false,
        t: testPadding
      },
      behaviour: {
        r: true,
        t: testBehaviour
      },
      ariaFormat: {
        r: false,
        t: testAriaFormat
      },
      format: {
        r: false,
        t: testFormat
      },
      tooltips: {
        r: false,
        t: testTooltips
      },
      keyboardSupport: {
        r: true,
        t: testKeyboardSupport
      },
      documentElement: {
        r: false,
        t: testDocumentElement
      },
      cssPrefix: {
        r: true,
        t: testCssPrefix
      },
      cssClasses: {
        r: true,
        t: testCssClasses
      }
    };
    var defaults = {
      connect: false,
      direction: "ltr",
      behaviour: "tap",
      orientation: "horizontal",
      keyboardSupport: true,
      cssPrefix: "noUi-",
      cssClasses: {
        target: "target",
        base: "base",
        origin: "origin",
        handle: "handle",
        handleLower: "handle-lower",
        handleUpper: "handle-upper",
        touchArea: "touch-area",
        horizontal: "horizontal",
        vertical: "vertical",
        background: "background",
        connect: "connect",
        connects: "connects",
        ltr: "ltr",
        rtl: "rtl",
        draggable: "draggable",
        drag: "state-drag",
        tap: "state-tap",
        active: "active",
        tooltip: "tooltip",
        pips: "pips",
        pipsHorizontal: "pips-horizontal",
        pipsVertical: "pips-vertical",
        marker: "marker",
        markerHorizontal: "marker-horizontal",
        markerVertical: "marker-vertical",
        markerNormal: "marker-normal",
        markerLarge: "marker-large",
        markerSub: "marker-sub",
        value: "value",
        valueHorizontal: "value-horizontal",
        valueVertical: "value-vertical",
        valueNormal: "value-normal",
        valueLarge: "value-large",
        valueSub: "value-sub"
      }
    }; 

    if (options.format && !options.ariaFormat) {
      options.ariaFormat = options.format;
    } 


    Object.keys(tests).forEach(function (name) {
      if (!isSet(options[name]) && defaults[name] === undefined) {
        if (tests[name].r) {
          throw new Error("noUiSlider (" + VERSION + "): '" + name + "' is required.");
        }

        return true;
      }

      tests[name].t(parsed, !isSet(options[name]) ? defaults[name] : options[name]);
    }); 

    parsed.pips = options.pips; 

    var d = document.createElement("div");
    var msPrefix = d.style.msTransform !== undefined;
    var noPrefix = d.style.transform !== undefined;
    parsed.transformRule = noPrefix ? "transform" : msPrefix ? "msTransform" : "webkitTransform"; 

    var styles = [["left", "top"], ["right", "bottom"]];
    parsed.style = styles[parsed.dir][parsed.ort];
    return parsed;
  } 


  function scope(target, options, originalOptions) {
    var actions = getActions();
    var supportsTouchActionNone = getSupportsTouchActionNone();
    var supportsPassive = supportsTouchActionNone && getSupportsPassive(); 

    var scope_Target = target;
    var scope_Base;
    var scope_Handles;
    var scope_Connects;
    var scope_Pips;
    var scope_Tooltips; 

    var scope_ShouldAnimate = true; 

    var scope_Spectrum = options.spectrum;
    var scope_Values = [];
    var scope_Locations = [];
    var scope_HandleNumbers = [];
    var scope_ActiveHandlesCount = 0;
    var scope_Events = {}; 

    var scope_Self; 

    var scope_Document = target.ownerDocument;
    var scope_DocumentElement = options.documentElement || scope_Document.documentElement;
    var scope_Body = scope_Document.body; 

    var PIPS_NONE = -1;
    var PIPS_NO_VALUE = 0;
    var PIPS_LARGE_VALUE = 1;
    var PIPS_SMALL_VALUE = 2; 

    var scope_DirOffset = scope_Document.dir === "rtl" || options.ort === 1 ? 0 : 100; 

    function addNodeTo(addTarget, className) {
      var div = scope_Document.createElement("div");

      if (className) {
        addClass(div, className);
      }

      addTarget.appendChild(div);
      return div;
    } 


    function addOrigin(base, handleNumber) {
      var origin = addNodeTo(base, options.cssClasses.origin);
      var handle = addNodeTo(origin, options.cssClasses.handle);
      addNodeTo(handle, options.cssClasses.touchArea);
      handle.setAttribute("data-handle", handleNumber);

      if (options.keyboardSupport) {
        handle.setAttribute("tabindex", "0");
        handle.addEventListener("keydown", function (event) {
          return eventKeydown(event, handleNumber);
        });
      }

      handle.setAttribute("role", "slider");
      handle.setAttribute("aria-orientation", options.ort ? "vertical" : "horizontal");

      if (handleNumber === 0) {
        addClass(handle, options.cssClasses.handleLower);
      } else if (handleNumber === options.handles - 1) {
        addClass(handle, options.cssClasses.handleUpper);
      }

      return origin;
    } 


    function addConnect(base, add) {
      if (!add) {
        return false;
      }

      return addNodeTo(base, options.cssClasses.connect);
    } 


    function addElements(connectOptions, base) {
      var connectBase = addNodeTo(base, options.cssClasses.connects);
      scope_Handles = [];
      scope_Connects = [];
      scope_Connects.push(addConnect(connectBase, connectOptions[0])); 

      for (var i = 0; i < options.handles; i++) {
        scope_Handles.push(addOrigin(base, i));
        scope_HandleNumbers[i] = i;
        scope_Connects.push(addConnect(connectBase, connectOptions[i + 1]));
      }
    } 


    function addSlider(addTarget) {
      addClass(addTarget, options.cssClasses.target);

      if (options.dir === 0) {
        addClass(addTarget, options.cssClasses.ltr);
      } else {
        addClass(addTarget, options.cssClasses.rtl);
      }

      if (options.ort === 0) {
        addClass(addTarget, options.cssClasses.horizontal);
      } else {
        addClass(addTarget, options.cssClasses.vertical);
      }

      return addNodeTo(addTarget, options.cssClasses.base);
    }

    function addTooltip(handle, handleNumber) {
      if (!options.tooltips[handleNumber]) {
        return false;
      }

      return addNodeTo(handle.firstChild, options.cssClasses.tooltip);
    } 


    function isHandleDisabled(handleNumber) {
      var handleOrigin = scope_Handles[handleNumber];
      return handleOrigin.hasAttribute("disabled");
    }

    function removeTooltips() {
      if (scope_Tooltips) {
        removeEvent("update.tooltips");
        scope_Tooltips.forEach(function (tooltip) {
          if (tooltip) {
            removeElement(tooltip);
          }
        });
        scope_Tooltips = null;
      }
    } 


    function tooltips() {
      removeTooltips(); 

      scope_Tooltips = scope_Handles.map(addTooltip);
      bindEvent("update.tooltips", function (values, handleNumber, unencoded) {
        if (!scope_Tooltips[handleNumber]) {
          return;
        }

        var formattedValue = values[handleNumber];

        if (options.tooltips[handleNumber] !== true) {
          formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);
        }

        scope_Tooltips[handleNumber].innerHTML = formattedValue;
      });
    }

    function aria() {
      bindEvent("update", function (values, handleNumber, unencoded, tap, positions) {
        scope_HandleNumbers.forEach(function (index) {
          var handle = scope_Handles[index];
          var min = checkHandlePosition(scope_Locations, index, 0, true, true, true);
          var max = checkHandlePosition(scope_Locations, index, 100, true, true, true);
          var now = positions[index]; 

          var text = options.ariaFormat.to(unencoded[index]); 

          min = scope_Spectrum.fromStepping(min); 

          max = scope_Spectrum.fromStepping(max); 

          now = scope_Spectrum.fromStepping(now); 

          handle.children[0].setAttribute("aria-valuemin", min);
          handle.children[0].setAttribute("aria-valuemax", max);
          handle.children[0].setAttribute("aria-valuenow", now);
          handle.children[0].setAttribute("aria-valuetext", text);
        });
      });
    }

    function getGroup(mode, values, stepped) {
      if (mode === "range" || mode === "steps") {
        return scope_Spectrum.xVal;
      }

      if (mode === "count") {
        if (values < 2) {
          throw new Error("noUiSlider (" + VERSION + "): 'values' (>= 2) required for mode 'count'.");
        } 


        var interval = values - 1;
        var spread = 100 / interval;
        values = []; 

        while (interval--) {
          values[interval] = interval * spread;
        }

        values.push(100);
        mode = "positions";
      }

      if (mode === "positions") {
        return values.map(function (value) {
          return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);
        });
      }

      if (mode === "values") {
        if (stepped) {
          return values.map(function (value) {
            return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));
          });
        } 


        return values;
      }
    }

    function generateSpread(density, mode, group) {
      function safeIncrement(value, increment) {
        return (value + increment).toFixed(7) / 1;
      }

      var indexes = {};
      var firstInRange = scope_Spectrum.xVal[0];
      var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];
      var ignoreFirst = false;
      var ignoreLast = false;
      var prevPct = 0; 

      group = unique(group.slice().sort(function (a, b) {
        return a - b;
      })); 

      if (group[0] !== firstInRange) {
        group.unshift(firstInRange);
        ignoreFirst = true;
      } 


      if (group[group.length - 1] !== lastInRange) {
        group.push(lastInRange);
        ignoreLast = true;
      }

      group.forEach(function (current, index) {
        var step;
        var i;
        var q;
        var low = current;
        var high = group[index + 1];
        var newPct;
        var pctDifference;
        var pctPos;
        var type;
        var steps;
        var realSteps;
        var stepSize;
        var isSteps = mode === "steps"; 

        if (isSteps) {
          step = scope_Spectrum.xNumSteps[index];
        } 


        if (!step) {
          step = high - low;
        } 


        if (low === false || high === undefined) {
          return;
        } 


        step = Math.max(step, 0.0000001); 

        for (i = low; i <= high; i = safeIncrement(i, step)) {
          newPct = scope_Spectrum.toStepping(i);
          pctDifference = newPct - prevPct;
          steps = pctDifference / density;
          realSteps = Math.round(steps); 

          stepSize = pctDifference / realSteps; 

          for (q = 1; q <= realSteps; q += 1) {
            pctPos = prevPct + q * stepSize;
            indexes[pctPos.toFixed(5)] = [scope_Spectrum.fromStepping(pctPos), 0];
          } 


          type = group.indexOf(i) > -1 ? PIPS_LARGE_VALUE : isSteps ? PIPS_SMALL_VALUE : PIPS_NO_VALUE; 

          if (!index && ignoreFirst) {
            type = 0;
          }

          if (!(i === high && ignoreLast)) {
            indexes[newPct.toFixed(5)] = [i, type];
          } 


          prevPct = newPct;
        }
      });
      return indexes;
    }

    function addMarking(spread, filterFunc, formatter) {
      var element = scope_Document.createElement("div");
      var valueSizeClasses = [];
      valueSizeClasses[PIPS_NO_VALUE] = options.cssClasses.valueNormal;
      valueSizeClasses[PIPS_LARGE_VALUE] = options.cssClasses.valueLarge;
      valueSizeClasses[PIPS_SMALL_VALUE] = options.cssClasses.valueSub;
      var markerSizeClasses = [];
      markerSizeClasses[PIPS_NO_VALUE] = options.cssClasses.markerNormal;
      markerSizeClasses[PIPS_LARGE_VALUE] = options.cssClasses.markerLarge;
      markerSizeClasses[PIPS_SMALL_VALUE] = options.cssClasses.markerSub;
      var valueOrientationClasses = [options.cssClasses.valueHorizontal, options.cssClasses.valueVertical];
      var markerOrientationClasses = [options.cssClasses.markerHorizontal, options.cssClasses.markerVertical];
      addClass(element, options.cssClasses.pips);
      addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);

      function getClasses(type, source) {
        var a = source === options.cssClasses.value;
        var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;
        var sizeClasses = a ? valueSizeClasses : markerSizeClasses;
        return source + " " + orientationClasses[options.ort] + " " + sizeClasses[type];
      }

      function addSpread(offset, value, type) {
        type = filterFunc ? filterFunc(value, type) : type;

        if (type === PIPS_NONE) {
          return;
        } 


        var node = addNodeTo(element, false);
        node.className = getClasses(type, options.cssClasses.marker);
        node.style[options.style] = offset + "%"; 

        if (type > PIPS_NO_VALUE) {
          node = addNodeTo(element, false);
          node.className = getClasses(type, options.cssClasses.value);
          node.setAttribute("data-value", value);
          node.style[options.style] = offset + "%";
          node.innerHTML = formatter.to(value);
        }
      } 


      Object.keys(spread).forEach(function (offset) {
        addSpread(offset, spread[offset][0], spread[offset][1]);
      });
      return element;
    }

    function removePips() {
      if (scope_Pips) {
        removeElement(scope_Pips);
        scope_Pips = null;
      }
    }

    function pips(grid) {
      removePips();
      var mode = grid.mode;
      var density = grid.density || 1;
      var filter = grid.filter || false;
      var values = grid.values || false;
      var stepped = grid.stepped || false;
      var group = getGroup(mode, values, stepped);
      var spread = generateSpread(density, mode, group);
      var format = grid.format || {
        to: Math.round
      };
      scope_Pips = scope_Target.appendChild(addMarking(spread, filter, format));
      return scope_Pips;
    } 


    function baseSize() {
      var rect = scope_Base.getBoundingClientRect();
      var alt = "offset" + ["Width", "Height"][options.ort];
      return options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];
    } 


    function attachEvent(events, element, callback, data) {
      var method = function method(e) {
        e = fixEvent(e, data.pageOffset, data.target || element); 

        if (!e) {
          return false;
        } 


        if (scope_Target.hasAttribute("disabled") && !data.doNotReject) {
          return false;
        } 


        if (hasClass(scope_Target, options.cssClasses.tap) && !data.doNotReject) {
          return false;
        } 


        if (events === actions.start && e.buttons !== undefined && e.buttons > 1) {
          return false;
        } 


        if (data.hover && e.buttons) {
          return false;
        } 


        if (!supportsPassive) {
          e.preventDefault();
        }

        e.calcPoint = e.points[options.ort]; 

        callback(e, data);
      };

      var methods = []; 

      events.split(" ").forEach(function (eventName) {
        element.addEventListener(eventName, method, supportsPassive ? {
          passive: true
        } : false);
        methods.push([eventName, method]);
      });
      return methods;
    } 


    function fixEvent(e, pageOffset, eventTarget) {
      var touch = e.type.indexOf("touch") === 0;
      var mouse = e.type.indexOf("mouse") === 0;
      var pointer = e.type.indexOf("pointer") === 0;
      var x;
      var y; 

      if (e.type.indexOf("MSPointer") === 0) {
        pointer = true;
      } 


      if (touch) {
        var isTouchOnTarget = function isTouchOnTarget(checkTouch) {
          return checkTouch.target === eventTarget || eventTarget.contains(checkTouch.target);
        }; 


        if (e.type === "touchstart") {
          var targetTouches = Array.prototype.filter.call(e.touches, isTouchOnTarget); 

          if (targetTouches.length > 1) {
            return false;
          }

          x = targetTouches[0].pageX;
          y = targetTouches[0].pageY;
        } else {
          var targetTouch = Array.prototype.find.call(e.changedTouches, isTouchOnTarget); 

          if (!targetTouch) {
            return false;
          }

          x = targetTouch.pageX;
          y = targetTouch.pageY;
        }
      }

      pageOffset = pageOffset || getPageOffset(scope_Document);

      if (mouse || pointer) {
        x = e.clientX + pageOffset.x;
        y = e.clientY + pageOffset.y;
      }

      e.pageOffset = pageOffset;
      e.points = [x, y];
      e.cursor = mouse || pointer; 

      return e;
    } 


    function calcPointToPercentage(calcPoint) {
      var location = calcPoint - offset(scope_Base, options.ort);
      var proposal = location * 100 / baseSize(); 

      proposal = limit(proposal);
      return options.dir ? 100 - proposal : proposal;
    } 


    function getClosestHandle(proposal) {
      var closest = 100;
      var handleNumber = false;
      scope_Handles.forEach(function (handle, index) {
        if (isHandleDisabled(index)) {
          return;
        }

        var pos = Math.abs(scope_Locations[index] - proposal);

        if (pos < closest || pos === 100 && closest === 100) {
          handleNumber = index;
          closest = pos;
        }
      });
      return handleNumber;
    } 


    function documentLeave(event, data) {
      if (event.type === "mouseout" && event.target.nodeName === "HTML" && event.relatedTarget === null) {
        eventEnd(event, data);
      }
    } 


    function eventMove(event, data) {
      if (navigator.appVersion.indexOf("MSIE 9") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {
        return eventEnd(event, data);
      } 


      var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint); 

      var proposal = movement * 100 / data.baseSize;
      moveHandles(movement > 0, proposal, data.locations, data.handleNumbers);
    } 


    function eventEnd(event, data) {
      if (data.handle) {
        removeClass(data.handle, options.cssClasses.active);
        scope_ActiveHandlesCount -= 1;
      } 


      data.listeners.forEach(function (c) {
        scope_DocumentElement.removeEventListener(c[0], c[1]);
      });

      if (scope_ActiveHandlesCount === 0) {
        removeClass(scope_Target, options.cssClasses.drag);
        setZindex(); 

        if (event.cursor) {
          scope_Body.style.cursor = "";
          scope_Body.removeEventListener("selectstart", preventDefault);
        }
      }

      data.handleNumbers.forEach(function (handleNumber) {
        fireEvent("change", handleNumber);
        fireEvent("set", handleNumber);
        fireEvent("end", handleNumber);
      });
    } 


    function eventStart(event, data) {
      if (data.handleNumbers.some(isHandleDisabled)) {
        return false;
      }

      var handle;

      if (data.handleNumbers.length === 1) {
        var handleOrigin = scope_Handles[data.handleNumbers[0]];
        handle = handleOrigin.children[0];
        scope_ActiveHandlesCount += 1; 

        addClass(handle, options.cssClasses.active);
      } 


      event.stopPropagation(); 

      var listeners = []; 

      var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {
        target: event.target,
        handle: handle,
        listeners: listeners,
        startCalcPoint: event.calcPoint,
        baseSize: baseSize(),
        pageOffset: event.pageOffset,
        handleNumbers: data.handleNumbers,
        buttonsProperty: event.buttons,
        locations: scope_Locations.slice()
      });
      var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {
        target: event.target,
        handle: handle,
        listeners: listeners,
        doNotReject: true,
        handleNumbers: data.handleNumbers
      });
      var outEvent = attachEvent("mouseout", scope_DocumentElement, documentLeave, {
        target: event.target,
        handle: handle,
        listeners: listeners,
        doNotReject: true,
        handleNumbers: data.handleNumbers
      }); 

      listeners.push.apply(listeners, moveEvent.concat(endEvent, outEvent)); 

      if (event.cursor) {
        scope_Body.style.cursor = getComputedStyle(event.target).cursor; 

        if (scope_Handles.length > 1) {
          addClass(scope_Target, options.cssClasses.drag);
        } 


        scope_Body.addEventListener("selectstart", preventDefault, false);
      }

      data.handleNumbers.forEach(function (handleNumber) {
        fireEvent("start", handleNumber);
      });
    } 


    function eventTap(event) {
      event.stopPropagation();
      var proposal = calcPointToPercentage(event.calcPoint);
      var handleNumber = getClosestHandle(proposal); 

      if (handleNumber === false) {
        return false;
      } 


      if (!options.events.snap) {
        addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
      }

      setHandle(handleNumber, proposal, true, true);
      setZindex();
      fireEvent("slide", handleNumber, true);
      fireEvent("update", handleNumber, true);
      fireEvent("change", handleNumber, true);
      fireEvent("set", handleNumber, true);

      if (options.events.snap) {
        eventStart(event, {
          handleNumbers: [handleNumber]
        });
      }
    } 


    function eventHover(event) {
      var proposal = calcPointToPercentage(event.calcPoint);
      var to = scope_Spectrum.getStep(proposal);
      var value = scope_Spectrum.fromStepping(to);
      Object.keys(scope_Events).forEach(function (targetEvent) {
        if ("hover" === targetEvent.split(".")[0]) {
          scope_Events[targetEvent].forEach(function (callback) {
            callback.call(scope_Self, value);
          });
        }
      });
    } 


    function eventKeydown(event, handleNumber) {
      if (isHandleDisabled(handleNumber)) {
        return false;
      }

      var horizontalKeys = ["Left", "Right"];
      var verticalKeys = ["Down", "Up"];

      if (options.dir && !options.ort) {
        horizontalKeys.reverse();
      } else if (options.ort && !options.dir) {
        verticalKeys.reverse();
      } 


      var key = event.key.replace("Arrow", "");
      var isDown = key === verticalKeys[0] || key === horizontalKeys[0];
      var isUp = key === verticalKeys[1] || key === horizontalKeys[1];

      if (!isDown && !isUp) {
        return true;
      }

      event.preventDefault();
      var direction = isDown ? 0 : 1;
      var steps = getNextStepsForHandle(handleNumber);
      var step = steps[direction]; 

      if (step === null) {
        return false;
      } 


      if (step === false) {
        step = scope_Spectrum.getDefaultStep(scope_Locations[handleNumber], isDown, 10);
      } 


      step = Math.max(step, 0.0000001); 

      step = (isDown ? -1 : 1) * step;
      scope_ShouldAnimate = false;
      valueSetHandle(handleNumber, scope_Values[handleNumber] + step, true);
      scope_ShouldAnimate = true;
      return false;
    } 


    function bindSliderEvents(behaviour) {
      if (!behaviour.fixed) {
        scope_Handles.forEach(function (handle, index) {
          attachEvent(actions.start, handle.children[0], eventStart, {
            handleNumbers: [index]
          });
        });
      } 


      if (behaviour.tap) {
        attachEvent(actions.start, scope_Base, eventTap, {});
      } 


      if (behaviour.hover) {
        attachEvent(actions.move, scope_Base, eventHover, {
          hover: true
        });
      } 


      if (behaviour.drag) {
        scope_Connects.forEach(function (connect, index) {
          if (connect === false || index === 0 || index === scope_Connects.length - 1) {
            return;
          }

          var handleBefore = scope_Handles[index - 1];
          var handleAfter = scope_Handles[index];
          var eventHolders = [connect];
          addClass(connect, options.cssClasses.draggable); 

          if (behaviour.fixed) {
            eventHolders.push(handleBefore.children[0]);
            eventHolders.push(handleAfter.children[0]);
          }

          eventHolders.forEach(function (eventHolder) {
            attachEvent(actions.start, eventHolder, eventStart, {
              handles: [handleBefore, handleAfter],
              handleNumbers: [index - 1, index]
            });
          });
        });
      }
    } 


    function bindEvent(namespacedEvent, callback) {
      scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];
      scope_Events[namespacedEvent].push(callback); 

      if (namespacedEvent.split(".")[0] === "update") {
        scope_Handles.forEach(function (a, index) {
          fireEvent("update", index);
        });
      }
    } 


    function removeEvent(namespacedEvent) {
      var event = namespacedEvent && namespacedEvent.split(".")[0];
      var namespace = event && namespacedEvent.substring(event.length);
      Object.keys(scope_Events).forEach(function (bind) {
        var tEvent = bind.split(".")[0];
        var tNamespace = bind.substring(tEvent.length);

        if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {
          delete scope_Events[bind];
        }
      });
    } 


    function fireEvent(eventName, handleNumber, tap) {
      Object.keys(scope_Events).forEach(function (targetEvent) {
        var eventType = targetEvent.split(".")[0];

        if (eventName === eventType) {
          scope_Events[targetEvent].forEach(function (callback) {
            callback.call( 
            scope_Self, 
            scope_Values.map(options.format.to), 
            handleNumber, 
            scope_Values.slice(), 
            tap || false, 
            scope_Locations.slice());
          });
        }
      });
    } 


    function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward, getValue) {
      if (scope_Handles.length > 1 && !options.events.unconstrained) {
        if (lookBackward && handleNumber > 0) {
          to = Math.max(to, reference[handleNumber - 1] + options.margin);
        }

        if (lookForward && handleNumber < scope_Handles.length - 1) {
          to = Math.min(to, reference[handleNumber + 1] - options.margin);
        }
      } 


      if (scope_Handles.length > 1 && options.limit) {
        if (lookBackward && handleNumber > 0) {
          to = Math.min(to, reference[handleNumber - 1] + options.limit);
        }

        if (lookForward && handleNumber < scope_Handles.length - 1) {
          to = Math.max(to, reference[handleNumber + 1] - options.limit);
        }
      } 


      if (options.padding) {
        if (handleNumber === 0) {
          to = Math.max(to, options.padding[0]);
        }

        if (handleNumber === scope_Handles.length - 1) {
          to = Math.min(to, 100 - options.padding[1]);
        }
      }

      to = scope_Spectrum.getStep(to); 

      to = limit(to); 

      if (to === reference[handleNumber] && !getValue) {
        return false;
      }

      return to;
    } 


    function inRuleOrder(v, a) {
      var o = options.ort;
      return (o ? a : v) + ", " + (o ? v : a);
    } 


    function moveHandles(upward, proposal, locations, handleNumbers) {
      var proposals = locations.slice();
      var b = [!upward, upward];
      var f = [upward, !upward]; 

      handleNumbers = handleNumbers.slice(); 

      if (upward) {
        handleNumbers.reverse();
      } 


      if (handleNumbers.length > 1) {
        handleNumbers.forEach(function (handleNumber, o) {
          var to = checkHandlePosition(proposals, handleNumber, proposals[handleNumber] + proposal, b[o], f[o], false); 

          if (to === false) {
            proposal = 0;
          } else {
            proposal = to - proposals[handleNumber];
            proposals[handleNumber] = to;
          }
        });
      } 
      else {
          b = f = [true];
        }

      var state = false; 

      handleNumbers.forEach(function (handleNumber, o) {
        state = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o]) || state;
      }); 

      if (state) {
        handleNumbers.forEach(function (handleNumber) {
          fireEvent("update", handleNumber);
          fireEvent("slide", handleNumber);
        });
      }
    } 


    function transformDirection(a, b) {
      return options.dir ? 100 - a - b : a;
    } 


    function updateHandlePosition(handleNumber, to) {
      scope_Locations[handleNumber] = to; 

      scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);
      var rule = "translate(" + inRuleOrder(transformDirection(to, 0) - scope_DirOffset + "%", "0") + ")";
      scope_Handles[handleNumber].style[options.transformRule] = rule;
      updateConnect(handleNumber);
      updateConnect(handleNumber + 1);
    } 


    function setZindex() {
      scope_HandleNumbers.forEach(function (handleNumber) {
        var dir = scope_Locations[handleNumber] > 50 ? -1 : 1;
        var zIndex = 3 + (scope_Handles.length + dir * handleNumber);
        scope_Handles[handleNumber].style.zIndex = zIndex;
      });
    } 


    function setHandle(handleNumber, to, lookBackward, lookForward) {
      to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false);

      if (to === false) {
        return false;
      }

      updateHandlePosition(handleNumber, to);
      return true;
    } 


    function updateConnect(index) {
      if (!scope_Connects[index]) {
        return;
      }

      var l = 0;
      var h = 100;

      if (index !== 0) {
        l = scope_Locations[index - 1];
      }

      if (index !== scope_Connects.length - 1) {
        h = scope_Locations[index];
      } 


      var connectWidth = h - l;
      var translateRule = "translate(" + inRuleOrder(transformDirection(l, connectWidth) + "%", "0") + ")";
      var scaleRule = "scale(" + inRuleOrder(connectWidth / 100, "1") + ")";
      scope_Connects[index].style[options.transformRule] = translateRule + " " + scaleRule;
    } 


    function resolveToValue(to, handleNumber) {
      if (to === null || to === false || to === undefined) {
        return scope_Locations[handleNumber];
      } 


      if (typeof to === "number") {
        to = String(to);
      }

      to = options.format.from(to); 

      if (to === false || isNaN(to)) {
        return scope_Locations[handleNumber];
      }

      return to;
    } 


    function valueSet(input, fireSetEvent) {
      var values = asArray(input);
      var isInit = scope_Locations[0] === undefined; 

      fireSetEvent = fireSetEvent === undefined ? true : !!fireSetEvent; 

      if (options.animate && !isInit && scope_ShouldAnimate) {
        addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
      } 


      scope_HandleNumbers.forEach(function (handleNumber) {
        setHandle(handleNumber, resolveToValue(values[handleNumber], handleNumber), true, false);
      }); 

      scope_HandleNumbers.forEach(function (handleNumber) {
        setHandle(handleNumber, scope_Locations[handleNumber], true, true);
      });
      setZindex();
      scope_HandleNumbers.forEach(function (handleNumber) {
        fireEvent("update", handleNumber); 

        if (values[handleNumber] !== null && fireSetEvent) {
          fireEvent("set", handleNumber);
        }
      });
    } 


    function valueReset(fireSetEvent) {
      valueSet(options.start, fireSetEvent);
    } 


    function valueSetHandle(handleNumber, value, fireSetEvent) {
      var values = []; 

      handleNumber = Number(handleNumber);

      if (!(handleNumber >= 0 && handleNumber < scope_HandleNumbers.length)) {
        throw new Error("noUiSlider (" + VERSION + "): invalid handle number, got: " + handleNumber);
      }

      for (var i = 0; i < scope_HandleNumbers.length; i++) {
        values[i] = null;
      }

      values[handleNumber] = value;
      valueSet(values, fireSetEvent);
    } 


    function valueGet() {
      var values = scope_Values.map(options.format.to); 

      if (values.length === 1) {
        return values[0];
      }

      return values;
    } 


    function destroy() {
      for (var key in options.cssClasses) {
        if (!options.cssClasses.hasOwnProperty(key)) {
          continue;
        }

        removeClass(scope_Target, options.cssClasses[key]);
      }

      while (scope_Target.firstChild) {
        scope_Target.removeChild(scope_Target.firstChild);
      }

      delete scope_Target.noUiSlider;
    }

    function getNextStepsForHandle(handleNumber) {
      var location = scope_Locations[handleNumber];
      var nearbySteps = scope_Spectrum.getNearbySteps(location);
      var value = scope_Values[handleNumber];
      var increment = nearbySteps.thisStep.step;
      var decrement = null; 

      if (increment !== false) {
        if (value + increment > nearbySteps.stepAfter.startValue) {
          increment = nearbySteps.stepAfter.startValue - value;
        }
      } 


      if (value > nearbySteps.thisStep.startValue) {
        decrement = nearbySteps.thisStep.step;
      } else if (nearbySteps.stepBefore.step === false) {
        decrement = false;
      } 
      else {
          decrement = value - nearbySteps.stepBefore.highestStep;
        } 


      if (location === 100) {
        increment = null;
      } else if (location === 0) {
        decrement = null;
      } 


      var stepDecimals = scope_Spectrum.countStepDecimals(); 

      if (increment !== null && increment !== false) {
        increment = Number(increment.toFixed(stepDecimals));
      }

      if (decrement !== null && decrement !== false) {
        decrement = Number(decrement.toFixed(stepDecimals));
      }

      return [decrement, increment];
    } 


    function getNextSteps() {
      return scope_HandleNumbers.map(getNextStepsForHandle);
    } 


    function updateOptions(optionsToUpdate, fireSetEvent) {
      var v = valueGet();
      var updateAble = ["margin", "limit", "padding", "range", "animate", "snap", "step", "format", "pips", "tooltips"]; 

      updateAble.forEach(function (name) {
        if (optionsToUpdate[name] !== undefined) {
          originalOptions[name] = optionsToUpdate[name];
        }
      });
      var newOptions = testOptions(originalOptions); 

      updateAble.forEach(function (name) {
        if (optionsToUpdate[name] !== undefined) {
          options[name] = newOptions[name];
        }
      });
      scope_Spectrum = newOptions.spectrum; 

      options.margin = newOptions.margin;
      options.limit = newOptions.limit;
      options.padding = newOptions.padding; 

      if (options.pips) {
        pips(options.pips);
      } else {
        removePips();
      } 


      if (options.tooltips) {
        tooltips();
      } else {
        removeTooltips();
      } 


      scope_Locations = [];
      valueSet(optionsToUpdate.start || v, fireSetEvent);
    } 


    function setupSlider() {
      scope_Base = addSlider(scope_Target);
      addElements(options.connect, scope_Base); 

      bindSliderEvents(options.events); 

      valueSet(options.start);

      if (options.pips) {
        pips(options.pips);
      }

      if (options.tooltips) {
        tooltips();
      }

      aria();
    }

    setupSlider(); 

    scope_Self = {
      destroy: destroy,
      steps: getNextSteps,
      on: bindEvent,
      off: removeEvent,
      get: valueGet,
      set: valueSet,
      setHandle: valueSetHandle,
      reset: valueReset,
      __moveHandles: function __moveHandles(a, b, c) {
        moveHandles(a, b, scope_Locations, c);
      },
      options: originalOptions,
      updateOptions: updateOptions,
      target: scope_Target,
      removePips: removePips,
      removeTooltips: removeTooltips,
      pips: pips 

    };
    return scope_Self;
  } 


  function initialize(target, originalOptions) {
    if (!target || !target.nodeName) {
      throw new Error("noUiSlider (" + VERSION + "): create requires a single element, got: " + target);
    } 


    if (target.noUiSlider) {
      throw new Error("noUiSlider (" + VERSION + "): Slider was already initialized.");
    } 


    var options = testOptions(originalOptions, target);
    var api = scope(target, options, originalOptions);
    target.noUiSlider = api;
    return api;
  } 


  return {
    __spectrum: Spectrum,
    version: VERSION,
    create: initialize
  };
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function ($) {
  var $window = $(window);

  $.imageModal = function (target, options) {
    var calcScale = function calcScale(width, height, textHeight, spaceX, spaceY) {
      var x = options.max_width;
      var y = options.max_height;

      if ($window.width() < x) {
        x = $window.width();
      }

      if ($window.height() < y) {
        y = $window.height();
      }

      if (x < options.min_width) {
        x = options.min_width;
      }

      if (y < options.min_height) {
        y = options.min_height;
      }

      x = x - spaceX;
      y = y - spaceY - textHeight;
      var sw = x / width;
      var sh = y / height;
      return sw < sh ? sw : sh;
    }; 


    var generateHtml = function generateHtml($target) {
      var width = $target.width();
      var height = $target.height();
      var scale = calcScale(width, height, 0, 0, 0);
      width *= scale;
      height *= scale;
      return $('<div>').addClass('imagemodal__outer').append($('<div>').addClass('imagemodal').append($('<div>').addClass('imagemodal__close').append($('<div>').addClass('imagemodal__close__inner'))).append($('<div>').addClass('imagemodal__inner').append($('<figure>').append($('<img>').attr({
        'src': $target.attr('src'),
        'alt': $target.attr('alt')
      }) 
      ).append(function () {
        var caption = $target.data('caption');

        if (caption) {
          return $('<figcaption>') 
          .append(caption);
        }
      }))));
    };

    var $target = $(target);
    var $modal = generateHtml($target);
    var $modalInner = $modal.find('.imagemodal__inner');
    var $closeButton = $modal.find('.imagemodal__close__inner');
    var $contentContainer = $modal.find('.imagemodal');
    var $image = $modal.find('figure img');
    var $caption = $modal.find('figcaption');
    var spaceX = 0;
    var spaceY = 0;
    var methods = {
      show: function show() {
        $modal.one('click', methods.hide); 

        $closeButton.one('click', methods.hide); 

        $contentContainer.on('click', function (event) {
          var $container = $(this);
          var offset = {
            l: $container.offset().left,
            t: $container.offset().top,
            r: $container.offset().left + $container.outerWidth(),
            b: $container.offset().top + $container.outerHeight()
          };

          if (offset.l <= event.pageX && event.pageX <= offset.r && offset.t <= event.pageY && event.pageY <= offset.b) {
            event.stopPropagation();
          }
        });
        $('body').append($modal);
        $modal.focus();
        methods.resize();
        $window.on('resize', methods.resize);
        $modal.addClass('imagemodal__outer--show');
      },

      hide: function hide() {
        $modal.one('webkitTransitionEnd mozTransitionEnd oTransitionEnd transitionend', function () {
          $modal.remove();
        });
        $modal.removeClass('imagemodal__outer--show');
      },

      resize: function resize() {
        spaceX = parseInt($modal.css('padding-left')) + parseInt($modal.css('padding-right')) + parseInt($modalInner.css('padding-left')) + parseInt($modalInner.css('padding-right'));
        spaceY = parseInt($modal.css('padding-top')) + parseInt($modal.css('padding-bottom')) + parseInt($modalInner.css('padding-top')) + parseInt($modalInner.css('padding-bottom'));
        var width = $target.width();
        var height = $target.height();
        var captionHeight = $caption.length > 0 ? $caption.outerHeight(true) : 0;
        var scale = calcScale(width, height, captionHeight, spaceX, spaceY);
        width *= scale;
        height *= scale; 
      }
    }; 

    $target.on('click', function () {
      methods.show();
    });
    $target.css('cursor', 'zoom-in');
    $target.data('imageModal', this);
  };

  $.fn.imageModal = function (options) {
    var defaults = {
      max_width: 1110,
      max_height: 1110,
      min_width: 375,
      min_height: 375
    };

    if (typeof options === 'undefined') {
      options = {};
    }

    if (_typeof(options) === 'object') {
      options = $.extend({}, options, defaults);
      return this.each(function () {
        if (typeof $(this).data('imageModal') === 'undefined') {
          if ($(this).closest('a').length > 0) {
            return;
          }

          new $.imageModal(this, options);
        }
      });
    }

    $.error('Method ' + options + ' does not exist on jQuery.imageModal');
  };
})(jQuery);
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }





(function (factory) {
  "use strict";

  if (typeof define === 'function' && define.amd) {
    define(['jquery'], function ($) {
      return factory($, window, document);
    });
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
    module.exports = function (root, $) {
      if (!root) {
        root = window;
      }

      if (!$) {
        $ = typeof window !== 'undefined' ?
          require('jquery') : require('jquery')(root);
      }

      return factory($, root, root.document);
    };
  } else {
    factory(jQuery, window, document);
  }
})(function ($, window, document, undefined) {
  "use strict";

  var DataTable = function DataTable(options) {
    this.$ = function (sSelector, oOpts) {
      return this.api(true).$(sSelector, oOpts);
    };


    this._ = function (sSelector, oOpts) {
      return this.api(true).rows(sSelector, oOpts).data();
    };


    this.api = function (traditional) {
      return traditional ? new _Api2(_fnSettingsFromNode(this[_ext.iApiIndex])) : new _Api2(this);
    };


    this.fnAddData = function (data, redraw) {
      var api = this.api(true);

      var rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);

      if (redraw === undefined || redraw) {
        api.draw();
      }

      return rows.flatten().toArray();
    };


    this.fnAdjustColumnSizing = function (bRedraw) {
      var api = this.api(true).columns.adjust();
      var settings = api.settings()[0];
      var scroll = settings.oScroll;

      if (bRedraw === undefined || bRedraw) {
        api.draw(false);
      } else if (scroll.sX !== "" || scroll.sY !== "") {
        _fnScrollDraw(settings);
      }
    };


    this.fnClearTable = function (bRedraw) {
      var api = this.api(true).clear();

      if (bRedraw === undefined || bRedraw) {
        api.draw();
      }
    };


    this.fnClose = function (nTr) {
      this.api(true).row(nTr).child.hide();
    };


    this.fnDeleteRow = function (target, callback, redraw) {
      var api = this.api(true);
      var rows = api.rows(target);
      var settings = rows.settings()[0];
      var data = settings.aoData[rows[0][0]];
      rows.remove();

      if (callback) {
        callback.call(this, settings, data);
      }

      if (redraw === undefined || redraw) {
        api.draw();
      }

      return data;
    };


    this.fnDestroy = function (remove) {
      this.api(true).destroy(remove);
    };


    this.fnDraw = function (complete) {
      this.api(true).draw(complete);
    };


    this.fnFilter = function (sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {
      var api = this.api(true);

      if (iColumn === null || iColumn === undefined) {
        api.search(sInput, bRegex, bSmart, bCaseInsensitive);
      } else {
        api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);
      }

      api.draw();
    };


    this.fnGetData = function (src, col) {
      var api = this.api(true);

      if (src !== undefined) {
        var type = src.nodeName ? src.nodeName.toLowerCase() : '';
        return col !== undefined || type == 'td' || type == 'th' ? api.cell(src, col).data() : api.row(src).data() || null;
      }

      return api.data().toArray();
    };


    this.fnGetNodes = function (iRow) {
      var api = this.api(true);
      return iRow !== undefined ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();
    };


    this.fnGetPosition = function (node) {
      var api = this.api(true);
      var nodeName = node.nodeName.toUpperCase();

      if (nodeName == 'TR') {
        return api.row(node).index();
      } else if (nodeName == 'TD' || nodeName == 'TH') {
        var cell = api.cell(node).index();
        return [cell.row, cell.columnVisible, cell.column];
      }

      return null;
    };


    this.fnIsOpen = function (nTr) {
      return this.api(true).row(nTr).child.isShown();
    };


    this.fnOpen = function (nTr, mHtml, sClass) {
      return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];
    };


    this.fnPageChange = function (mAction, bRedraw) {
      var api = this.api(true).page(mAction);

      if (bRedraw === undefined || bRedraw) {
        api.draw(false);
      }
    };


    this.fnSetColumnVis = function (iCol, bShow, bRedraw) {
      var api = this.api(true).column(iCol).visible(bShow);

      if (bRedraw === undefined || bRedraw) {
        api.columns.adjust().draw();
      }
    };


    this.fnSettings = function () {
      return _fnSettingsFromNode(this[_ext.iApiIndex]);
    };


    this.fnSort = function (aaSort) {
      this.api(true).order(aaSort).draw();
    };


    this.fnSortListener = function (nNode, iColumn, fnCallback) {
      this.api(true).order.listener(nNode, iColumn, fnCallback);
    };


    this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {
      var api = this.api(true);

      if (iColumn === undefined || iColumn === null) {
        api.row(mRow).data(mData);
      } else {
        api.cell(mRow, iColumn).data(mData);
      }

      if (bAction === undefined || bAction) {
        api.columns.adjust();
      }

      if (bRedraw === undefined || bRedraw) {
        api.draw();
      }

      return 0;
    };


    this.fnVersionCheck = _ext.fnVersionCheck;

    var _that = this;

    var emptyInit = options === undefined;
    var len = this.length;

    if (emptyInit) {
      options = {};
    }

    this.oApi = this.internal = _ext.internal;

    for (var fn in DataTable.ext.internal) {
      if (fn) {
        this[fn] = _fnExternApiFunc(fn);
      }
    }

    this.each(function () {
      var o = {};
      var oInit = len > 1 ?
        _fnExtend(o, options, true) : options;

      var i = 0,
        iLen,
        j,
        jLen,
        k,
        kLen;
      var sId = this.getAttribute('id');
      var bInitHandedOff = false;
      var defaults = DataTable.defaults;
      var $this = $(this);

      if (this.nodeName.toLowerCase() != 'table') {
        _fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);

        return;
      }


      _fnCompatOpts(defaults);

      _fnCompatCols(defaults.column);


      _fnCamelToHungarian(defaults, defaults, true);

      _fnCamelToHungarian(defaults.column, defaults.column, true);


      _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));


      var allSettings = DataTable.settings;

      for (i = 0, iLen = allSettings.length; i < iLen; i++) {
        var s = allSettings[i];

        if (s.nTable == this || s.nTHead && s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {
          var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
          var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;

          if (emptyInit || bRetrieve) {
            return s.oInstance;
          } else if (bDestroy) {
            s.oInstance.fnDestroy();
            break;
          } else {
            _fnLog(s, 0, 'Cannot reinitialise DataTable', 3);

            return;
          }
        }


        if (s.sTableId == this.id) {
          allSettings.splice(i, 1);
          break;
        }
      }


      if (sId === null || sId === "") {
        sId = "DataTables_Table_" + DataTable.ext._unique++;
        this.id = sId;
      }


      var oSettings = $.extend(true, {}, DataTable.models.oSettings, {
        "sDestroyWidth": $this[0].style.width,
        "sInstance": sId,
        "sTableId": sId
      });
      oSettings.nTable = this;
      oSettings.oApi = _that.internal;
      oSettings.oInit = oInit;
      allSettings.push(oSettings);

      oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable();

      _fnCompatOpts(oInit);

      _fnLanguageCompat(oInit.oLanguage);


      if (oInit.aLengthMenu && !oInit.iDisplayLength) {
        oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
      }


      oInit = _fnExtend($.extend(true, {}, defaults), oInit);

      _fnMap(oSettings.oFeatures, oInit, ["bPaginate", "bLengthChange", "bFilter", "bSort", "bSortMulti", "bInfo", "bProcessing", "bAutoWidth", "bSortClasses", "bServerSide", "bDeferRender"]);

      _fnMap(oSettings, oInit, ["asStripeClasses", "ajax", "fnServerData", "fnFormatNumber", "sServerMethod", "aaSorting", "aaSortingFixed", "aLengthMenu", "sPaginationType", "sAjaxSource", "sAjaxDataProp", "iStateDuration", "sDom", "bSortCellsTop", "iTabIndex", "fnStateLoadCallback", "fnStateSaveCallback", "renderer", "searchDelay", "rowId", ["iCookieDuration", "iStateDuration"],
        ["oSearch", "oPreviousSearch"], ["aoSearchCols", "aoPreSearchCols"], ["iDisplayLength", "_iDisplayLength"]]);

      _fnMap(oSettings.oScroll, oInit, [["sScrollX", "sX"], ["sScrollXInner", "sXInner"], ["sScrollY", "sY"], ["bScrollCollapse", "bCollapse"]]);

      _fnMap(oSettings.oLanguage, oInit, "fnInfoCallback");


      _fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');

      _fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');

      _fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');

      _fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');

      _fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');

      _fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');

      _fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');

      _fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');

      _fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');

      _fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');

      _fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');

      oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);

      _fnBrowserDetect(oSettings);

      var oClasses = oSettings.oClasses;
      $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);
      $this.addClass(oClasses.sTable);

      if (oSettings.iInitDisplayStart === undefined) {
        oSettings.iInitDisplayStart = oInit.iDisplayStart;
        oSettings._iDisplayStart = oInit.iDisplayStart;
      }

      if (oInit.iDeferLoading !== null) {
        oSettings.bDeferLoading = true;
        var tmp = $.isArray(oInit.iDeferLoading);
        oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
        oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
      }


      var oLanguage = oSettings.oLanguage;
      $.extend(true, oLanguage, oInit.oLanguage);

      if (oLanguage.sUrl) {
        $.ajax({
          dataType: 'json',
          url: oLanguage.sUrl,
          success: function success(json) {
            _fnLanguageCompat(json);

            _fnCamelToHungarian(defaults.oLanguage, json);

            $.extend(true, oLanguage, json);

            _fnInitialise(oSettings);
          },
          error: function error() {
            _fnInitialise(oSettings);
          }
        });
        bInitHandedOff = true;
      }


      if (oInit.asStripeClasses === null) {
        oSettings.asStripeClasses = [oClasses.sStripeOdd, oClasses.sStripeEven];
      }


      var stripeClasses = oSettings.asStripeClasses;
      var rowOne = $this.children('tbody').find('tr').eq(0);

      if ($.inArray(true, $.map(stripeClasses, function (el, i) {
        return rowOne.hasClass(el);
      })) !== -1) {
        $('tbody tr', this).removeClass(stripeClasses.join(' '));
        oSettings.asDestroyStripes = stripeClasses.slice();
      }


      var anThs = [];
      var aoColumnsInit;
      var nThead = this.getElementsByTagName('thead');

      if (nThead.length !== 0) {
        _fnDetectHeader(oSettings.aoHeader, nThead[0]);

        anThs = _fnGetUniqueThs(oSettings);
      }


      if (oInit.aoColumns === null) {
        aoColumnsInit = [];

        for (i = 0, iLen = anThs.length; i < iLen; i++) {
          aoColumnsInit.push(null);
        }
      } else {
        aoColumnsInit = oInit.aoColumns;
      }


      for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {
        _fnAddColumn(oSettings, anThs ? anThs[i] : null);
      }


      _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
        _fnColumnOptions(oSettings, iCol, oDef);
      });


      if (rowOne.length) {
        var a = function a(cell, name) {
          return cell.getAttribute('data-' + name) !== null ? name : null;
        };

        $(rowOne[0]).children('th, td').each(function (i, cell) {
          var col = oSettings.aoColumns[i];

          if (col.mData === i) {
            var sort = a(cell, 'sort') || a(cell, 'order');
            var filter = a(cell, 'filter') || a(cell, 'search');

            if (sort !== null || filter !== null) {
              col.mData = {
                _: i + '.display',
                sort: sort !== null ? i + '.@data-' + sort : undefined,
                type: sort !== null ? i + '.@data-' + sort : undefined,
                filter: filter !== null ? i + '.@data-' + filter : undefined
              };

              _fnColumnOptions(oSettings, i);
            }
          }
        });
      }

      var features = oSettings.oFeatures;

      var loadedInit = function loadedInit() {
        if (oInit.aaSorting === undefined) {
          var sorting = oSettings.aaSorting;

          for (i = 0, iLen = sorting.length; i < iLen; i++) {
            sorting[i][1] = oSettings.aoColumns[i].asSorting[0];
          }
        }


        _fnSortingClasses(oSettings);

        if (features.bSort) {
          _fnCallbackReg(oSettings, 'aoDrawCallback', function () {
            if (oSettings.bSorted) {
              var aSort = _fnSortFlatten(oSettings);

              var sortedColumns = {};
              $.each(aSort, function (i, val) {
                sortedColumns[val.src] = val.dir;
              });

              _fnCallbackFire(oSettings, null, 'order', [oSettings, aSort, sortedColumns]);

              _fnSortAria(oSettings);
            }
          });
        }

        _fnCallbackReg(oSettings, 'aoDrawCallback', function () {
          if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {
            _fnSortingClasses(oSettings);
          }
        }, 'sc');


        var captions = $this.children('caption').each(function () {
          this._captionSide = $(this).css('caption-side');
        });
        var thead = $this.children('thead');

        if (thead.length === 0) {
          thead = $('<thead/>').appendTo($this);
        }

        oSettings.nTHead = thead[0];
        var tbody = $this.children('tbody');

        if (tbody.length === 0) {
          tbody = $('<tbody/>').appendTo($this);
        }

        oSettings.nTBody = tbody[0];
        var tfoot = $this.children('tfoot');

        if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "")) {
          tfoot = $('<tfoot/>').appendTo($this);
        }

        if (tfoot.length === 0 || tfoot.children().length === 0) {
          $this.addClass(oClasses.sNoFooter);
        } else if (tfoot.length > 0) {
          oSettings.nTFoot = tfoot[0];

          _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);
        }


        if (oInit.aaData) {
          for (i = 0; i < oInit.aaData.length; i++) {
            _fnAddData(oSettings, oInit.aaData[i]);
          }
        } else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {
          _fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));
        }


        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

        oSettings.bInitialised = true;

        if (bInitHandedOff === false) {
          _fnInitialise(oSettings);
        }
      };


      if (oInit.bStateSave) {
        features.bStateSave = true;

        _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');

        _fnLoadState(oSettings, oInit, loadedInit);
      } else {
        loadedInit();
      }
    });
    _that = null;
    return this;
  };


  var _ext;


  var _Api2;


  var _api_register;


  var _api_registerPlural;


  var _re_dic = {};
  var _re_new_lines = /[\r\n]/g;
  var _re_html = /<.*?>/g;

  var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;

  var _re_escape_regex = new RegExp('(\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-'].join('|\\') + ')', 'g');


  var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi;

  var _empty = function _empty(d) {
    return !d || d === true || d === '-' ? true : false;
  };

  var _intVal = function _intVal(s) {
    var integer = parseInt(s, 10);
    return !isNaN(integer) && isFinite(s) ? integer : null;
  };


  var _numToDecimal = function _numToDecimal(num, decimalPoint) {
    if (!_re_dic[decimalPoint]) {
      _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');
    }

    return typeof num === 'string' && decimalPoint !== '.' ? num.replace(/\./g, '').replace(_re_dic[decimalPoint], '.') : num;
  };

  var _isNumber = function _isNumber(d, decimalPoint, formatted) {
    var strType = typeof d === 'string';

    if (_empty(d)) {
      return true;
    }

    if (decimalPoint && strType) {
      d = _numToDecimal(d, decimalPoint);
    }

    if (formatted && strType) {
      d = d.replace(_re_formatted_numeric, '');
    }

    return !isNaN(parseFloat(d)) && isFinite(d);
  };


  var _isHtml = function _isHtml(d) {
    return _empty(d) || typeof d === 'string';
  };

  var _htmlNumeric = function _htmlNumeric(d, decimalPoint, formatted) {
    if (_empty(d)) {
      return true;
    }

    var html = _isHtml(d);

    return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted) ? true : null;
  };

  var _pluck = function _pluck(a, prop, prop2) {
    var out = [];
    var i = 0,
      ien = a.length;

    if (prop2 !== undefined) {
      for (; i < ien; i++) {
        if (a[i] && a[i][prop]) {
          out.push(a[i][prop][prop2]);
        }
      }
    } else {
      for (; i < ien; i++) {
        if (a[i]) {
          out.push(a[i][prop]);
        }
      }
    }

    return out;
  };


  var _pluck_order = function _pluck_order(a, order, prop, prop2) {
    var out = [];
    var i = 0,
      ien = order.length;

    if (prop2 !== undefined) {
      for (; i < ien; i++) {
        if (a[order[i]][prop]) {
          out.push(a[order[i]][prop][prop2]);
        }
      }
    } else {
      for (; i < ien; i++) {
        out.push(a[order[i]][prop]);
      }
    }

    return out;
  };

  var _range = function _range(len, start) {
    var out = [];
    var end;

    if (start === undefined) {
      start = 0;
      end = len;
    } else {
      end = start;
      start = len;
    }

    for (var i = start; i < end; i++) {
      out.push(i);
    }

    return out;
  };

  var _removeEmpty = function _removeEmpty(a) {
    var out = [];

    for (var i = 0, ien = a.length; i < ien; i++) {
      if (a[i]) {
        out.push(a[i]);
      }
    }

    return out;
  };

  var _stripHtml = function _stripHtml(d) {
    return d.replace(_re_html, '');
  };


  var _areAllUnique = function _areAllUnique(src) {
    if (src.length < 2) {
      return true;
    }

    var sorted = src.slice().sort();
    var last = sorted[0];

    for (var i = 1, ien = sorted.length; i < ien; i++) {
      if (sorted[i] === last) {
        return false;
      }

      last = sorted[i];
    }

    return true;
  };


  var _unique = function _unique(src) {
    if (_areAllUnique(src)) {
      return src.slice();
    }


    var out = [],
      val,
      i,
      ien = src.length,
      j,
      k = 0;

    again: for (i = 0; i < ien; i++) {
      val = src[i];

      for (j = 0; j < k; j++) {
        if (out[j] === val) {
          continue again;
        }
      }

      out.push(val);
      k++;
    }

    return out;
  };


  DataTable.util = {
    throttle: function throttle(fn, freq) {
      var frequency = freq !== undefined ? freq : 200,
        last,
        timer;
      return function () {
        var that = this,
          now = +new Date(),
          args = arguments;

        if (last && now < last + frequency) {
          clearTimeout(timer);
          timer = setTimeout(function () {
            last = undefined;
            fn.apply(that, args);
          }, frequency);
        } else {
          last = now;
          fn.apply(that, args);
        }
      };
    },

    escapeRegex: function escapeRegex(val) {
      return val.replace(_re_escape_regex, '\\$1');
    }
  };

  function _fnHungarianMap(o) {
    var hungarian = 'a aa ai ao as b fn i m o s ',
      match,
      newKey,
      map = {};
    $.each(o, function (key, val) {
      match = key.match(/^([^A-Z]+?)([A-Z])/);

      if (match && hungarian.indexOf(match[1] + ' ') !== -1) {
        newKey = key.replace(match[0], match[2].toLowerCase());
        map[newKey] = key;

        if (match[1] === 'o') {
          _fnHungarianMap(o[key]);
        }
      }
    });
    o._hungarianMap = map;
  }


  function _fnCamelToHungarian(src, user, force) {
    if (!src._hungarianMap) {
      _fnHungarianMap(src);
    }

    var hungarianKey;
    $.each(user, function (key, val) {
      hungarianKey = src._hungarianMap[key];

      if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {
        if (hungarianKey.charAt(0) === 'o') {
          if (!user[hungarianKey]) {
            user[hungarianKey] = {};
          }

          $.extend(true, user[hungarianKey], user[key]);

          _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);
        } else {
          user[hungarianKey] = user[key];
        }
      }
    });
  }


  function _fnLanguageCompat(lang) {
    var defaults = DataTable.defaults.oLanguage;

    var defaultDecimal = defaults.sDecimal;

    if (defaultDecimal) {
      _addNumericSort(defaultDecimal);
    }

    if (lang) {
      var zeroRecords = lang.sZeroRecords;

      if (!lang.sEmptyTable && zeroRecords && defaults.sEmptyTable === "No data available in table") {
        _fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');
      }


      if (!lang.sLoadingRecords && zeroRecords && defaults.sLoadingRecords === "Loading...") {
        _fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');
      }


      if (lang.sInfoThousands) {
        lang.sThousands = lang.sInfoThousands;
      }

      var decimal = lang.sDecimal;

      if (decimal && defaultDecimal !== decimal) {
        _addNumericSort(decimal);
      }
    }
  }


  var _fnCompatMap = function _fnCompatMap(o, knew, old) {
    if (o[knew] !== undefined) {
      o[old] = o[knew];
    }
  };


  function _fnCompatOpts(init) {
    _fnCompatMap(init, 'ordering', 'bSort');

    _fnCompatMap(init, 'orderMulti', 'bSortMulti');

    _fnCompatMap(init, 'orderClasses', 'bSortClasses');

    _fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');

    _fnCompatMap(init, 'order', 'aaSorting');

    _fnCompatMap(init, 'orderFixed', 'aaSortingFixed');

    _fnCompatMap(init, 'paging', 'bPaginate');

    _fnCompatMap(init, 'pagingType', 'sPaginationType');

    _fnCompatMap(init, 'pageLength', 'iDisplayLength');

    _fnCompatMap(init, 'searching', 'bFilter');


    if (typeof init.sScrollX === 'boolean') {
      init.sScrollX = init.sScrollX ? '100%' : '';
    }

    if (typeof init.scrollX === 'boolean') {
      init.scrollX = init.scrollX ? '100%' : '';
    }


    var searchCols = init.aoSearchCols;

    if (searchCols) {
      for (var i = 0, ien = searchCols.length; i < ien; i++) {
        if (searchCols[i]) {
          _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);
        }
      }
    }
  }


  function _fnCompatCols(init) {
    _fnCompatMap(init, 'orderable', 'bSortable');

    _fnCompatMap(init, 'orderData', 'aDataSort');

    _fnCompatMap(init, 'orderSequence', 'asSorting');

    _fnCompatMap(init, 'orderDataType', 'sortDataType');


    var dataSort = init.aDataSort;

    if (typeof dataSort === 'number' && !$.isArray(dataSort)) {
      init.aDataSort = [dataSort];
    }
  }


  function _fnBrowserDetect(settings) {
    if (!DataTable.__browser) {
      var browser = {};
      DataTable.__browser = browser;

      var n = $('<div/>').css({
        position: 'fixed',
        top: 0,
        left: $(window).scrollLeft() * -1,
        height: 1,
        width: 1,
        overflow: 'hidden'
      }).append($('<div/>').css({
        position: 'absolute',
        top: 1,
        left: 1,
        width: 100,
        overflow: 'scroll'
      }).append($('<div/>').css({
        width: '100%',
        height: 10
      }))).appendTo('body');
      var outer = n.children();
      var inner = outer.children();

      browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;

      browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;

      browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1;

      browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
      n.remove();
    }

    $.extend(settings.oBrowser, DataTable.__browser);
    settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
  }


  function _fnReduce(that, fn, init, start, end, inc) {
    var i = start,
      value,
      isSet = false;

    if (init !== undefined) {
      value = init;
      isSet = true;
    }

    while (i !== end) {
      if (!that.hasOwnProperty(i)) {
        continue;
      }

      value = isSet ? fn(value, that[i], i, that) : that[i];
      isSet = true;
      i += inc;
    }

    return value;
  }


  function _fnAddColumn(oSettings, nTh) {
    var oDefaults = DataTable.defaults.column;
    var iCol = oSettings.aoColumns.length;
    var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {
      "nTh": nTh ? nTh : document.createElement('th'),
      "sTitle": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',
      "aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
      "mData": oDefaults.mData ? oDefaults.mData : iCol,
      idx: iCol
    });
    oSettings.aoColumns.push(oCol);

    var searchCols = oSettings.aoPreSearchCols;
    searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]);

    _fnColumnOptions(oSettings, iCol, $(nTh).data());
  }


  function _fnColumnOptions(oSettings, iCol, oOptions) {
    var oCol = oSettings.aoColumns[iCol];
    var oClasses = oSettings.oClasses;
    var th = $(oCol.nTh);

    if (!oCol.sWidthOrig) {
      oCol.sWidthOrig = th.attr('width') || null;

      var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);

      if (t) {
        oCol.sWidthOrig = t[1];
      }
    }


    if (oOptions !== undefined && oOptions !== null) {
      _fnCompatCols(oOptions);


      _fnCamelToHungarian(DataTable.defaults.column, oOptions);


      if (oOptions.mDataProp !== undefined && !oOptions.mData) {
        oOptions.mData = oOptions.mDataProp;
      }

      if (oOptions.sType) {
        oCol._sManualType = oOptions.sType;
      }


      if (oOptions.className && !oOptions.sClass) {
        oOptions.sClass = oOptions.className;
      }

      if (oOptions.sClass) {
        th.addClass(oOptions.sClass);
      }

      $.extend(oCol, oOptions);

      _fnMap(oCol, oOptions, "sWidth", "sWidthOrig");


      if (oOptions.iDataSort !== undefined) {
        oCol.aDataSort = [oOptions.iDataSort];
      }

      _fnMap(oCol, oOptions, "aDataSort");
    }


    var mDataSrc = oCol.mData;

    var mData = _fnGetObjectDataFn(mDataSrc);

    var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;

    var attrTest = function attrTest(src) {
      return typeof src === 'string' && src.indexOf('@') !== -1;
    };

    oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));
    oCol._setter = null;

    oCol.fnGetData = function (rowData, type, meta) {
      var innerData = mData(rowData, type, undefined, meta);
      return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;
    };

    oCol.fnSetData = function (rowData, val, meta) {
      return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
    };


    if (typeof mDataSrc !== 'number') {
      oSettings._rowReadObject = true;
    }


    if (!oSettings.oFeatures.bSort) {
      oCol.bSortable = false;
      th.addClass(oClasses.sSortableNone);
    }


    var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
    var bDesc = $.inArray('desc', oCol.asSorting) !== -1;

    if (!oCol.bSortable || !bAsc && !bDesc) {
      oCol.sSortingClass = oClasses.sSortableNone;
      oCol.sSortingClassJUI = "";
    } else if (bAsc && !bDesc) {
      oCol.sSortingClass = oClasses.sSortableAsc;
      oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
    } else if (!bAsc && bDesc) {
      oCol.sSortingClass = oClasses.sSortableDesc;
      oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
    } else {
      oCol.sSortingClass = oClasses.sSortable;
      oCol.sSortingClassJUI = oClasses.sSortJUI;
    }
  }


  function _fnAdjustColumnSizing(settings) {
    if (settings.oFeatures.bAutoWidth !== false) {
      var columns = settings.aoColumns;

      _fnCalculateColumnWidths(settings);

      for (var i = 0, iLen = columns.length; i < iLen; i++) {
        columns[i].nTh.style.width = columns[i].sWidth;
      }
    }

    var scroll = settings.oScroll;

    if (scroll.sY !== '' || scroll.sX !== '') {
      _fnScrollDraw(settings);
    }

    _fnCallbackFire(settings, null, 'column-sizing', [settings]);
  }


  function _fnVisibleToColumnIndex(oSettings, iMatch) {
    var aiVis = _fnGetColumns(oSettings, 'bVisible');

    return typeof aiVis[iMatch] === 'number' ? aiVis[iMatch] : null;
  }


  function _fnColumnIndexToVisible(oSettings, iMatch) {
    var aiVis = _fnGetColumns(oSettings, 'bVisible');

    var iPos = $.inArray(iMatch, aiVis);
    return iPos !== -1 ? iPos : null;
  }


  function _fnVisbleColumns(oSettings) {
    var vis = 0;

    $.each(oSettings.aoColumns, function (i, col) {
      if (col.bVisible && $(col.nTh).css('display') !== 'none') {
        vis++;
      }
    });
    return vis;
  }


  function _fnGetColumns(oSettings, sParam) {
    var a = [];
    $.map(oSettings.aoColumns, function (val, i) {
      if (val[sParam]) {
        a.push(i);
      }
    });
    return a;
  }


  function _fnColumnTypes(settings) {
    var columns = settings.aoColumns;
    var data = settings.aoData;
    var types = DataTable.ext.type.detect;
    var i, ien, j, jen, k, ken;
    var col, cell, detectedType, cache;

    for (i = 0, ien = columns.length; i < ien; i++) {
      col = columns[i];
      cache = [];

      if (!col.sType && col._sManualType) {
        col.sType = col._sManualType;
      } else if (!col.sType) {
        for (j = 0, jen = types.length; j < jen; j++) {
          for (k = 0, ken = data.length; k < ken; k++) {
            if (cache[k] === undefined) {
              cache[k] = _fnGetCellData(settings, k, i, 'type');
            }

            detectedType = types[j](cache[k], settings);

            if (!detectedType && j !== types.length - 1) {
              break;
            }


            if (detectedType === 'html') {
              break;
            }
          }


          if (detectedType) {
            col.sType = detectedType;
            break;
          }
        }


        if (!col.sType) {
          col.sType = 'string';
        }
      }
    }
  }


  function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {
    var i, iLen, j, jLen, k, kLen, def;
    var columns = oSettings.aoColumns;

    if (aoColDefs) {
      for (i = aoColDefs.length - 1; i >= 0; i--) {
        def = aoColDefs[i];

        var aTargets = def.targets !== undefined ? def.targets : def.aTargets;

        if (!$.isArray(aTargets)) {
          aTargets = [aTargets];
        }

        for (j = 0, jLen = aTargets.length; j < jLen; j++) {
          if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {
            while (columns.length <= aTargets[j]) {
              _fnAddColumn(oSettings);
            }


            fn(aTargets[j], def);
          } else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {
            fn(columns.length + aTargets[j], def);
          } else if (typeof aTargets[j] === 'string') {
            for (k = 0, kLen = columns.length; k < kLen; k++) {
              if (aTargets[j] == "_all" || $(columns[k].nTh).hasClass(aTargets[j])) {
                fn(k, def);
              }
            }
          }
        }
      }
    }


    if (aoCols) {
      for (i = 0, iLen = aoCols.length; i < iLen; i++) {
        fn(i, aoCols[i]);
      }
    }
  }


  function _fnAddData(oSettings, aDataIn, nTr, anTds) {
    var iRow = oSettings.aoData.length;
    var oData = $.extend(true, {}, DataTable.models.oRow, {
      src: nTr ? 'dom' : 'data',
      idx: iRow
    });
    oData._aData = aDataIn;
    oSettings.aoData.push(oData);

    var nTd, sThisType;
    var columns = oSettings.aoColumns;

    for (var i = 0, iLen = columns.length; i < iLen; i++) {
      columns[i].sType = null;
    }


    oSettings.aiDisplayMaster.push(iRow);
    var id = oSettings.rowIdFn(aDataIn);

    if (id !== undefined) {
      oSettings.aIds[id] = oData;
    }


    if (nTr || !oSettings.oFeatures.bDeferRender) {
      _fnCreateTr(oSettings, iRow, nTr, anTds);
    }

    return iRow;
  }


  function _fnAddTr(settings, trs) {
    var row;

    if (!(trs instanceof $)) {
      trs = $(trs);
    }

    return trs.map(function (i, el) {
      row = _fnGetRowElements(settings, el);
      return _fnAddData(settings, row.data, el, row.cells);
    });
  }


  function _fnNodeToDataIndex(oSettings, n) {
    return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;
  }


  function _fnNodeToColumnIndex(oSettings, iRow, n) {
    return $.inArray(n, oSettings.aoData[iRow].anCells);
  }


  function _fnGetCellData(settings, rowIdx, colIdx, type) {
    var draw = settings.iDraw;
    var col = settings.aoColumns[colIdx];
    var rowData = settings.aoData[rowIdx]._aData;
    var defaultContent = col.sDefaultContent;
    var cellData = col.fnGetData(rowData, type, {
      settings: settings,
      row: rowIdx,
      col: colIdx
    });

    if (cellData === undefined) {
      if (settings.iDrawError != draw && defaultContent === null) {
        _fnLog(settings, 0, "Requested unknown parameter " + (typeof col.mData == 'function' ? '{function}' : "'" + col.mData + "'") + " for row " + rowIdx + ", column " + colIdx, 4);

        settings.iDrawError = draw;
      }

      return defaultContent;
    }


    if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined) {
      cellData = defaultContent;
    } else if (typeof cellData === 'function') {
      return cellData.call(rowData);
    }

    if (cellData === null && type == 'display') {
      return '';
    }

    return cellData;
  }


  function _fnSetCellData(settings, rowIdx, colIdx, val) {
    var col = settings.aoColumns[colIdx];
    var rowData = settings.aoData[rowIdx]._aData;
    col.fnSetData(rowData, val, {
      settings: settings,
      row: rowIdx,
      col: colIdx
    });
  }


  var __reArray = /\[.*?\]$/;
  var __reFn = /\(\)$/;

  function _fnSplitObjNotation(str) {
    return $.map(str.match(/(\\.|[^\.])+/g) || [''], function (s) {
      return s.replace(/\\\./g, '.');
    });
  }


  function _fnGetObjectDataFn(mSource) {
    if ($.isPlainObject(mSource)) {
      var o = {};
      $.each(mSource, function (key, val) {
        if (val) {
          o[key] = _fnGetObjectDataFn(val);
        }
      });
      return function (data, type, row, meta) {
        var t = o[type] || o._;
        return t !== undefined ? t(data, type, row, meta) : data;
      };
    } else if (mSource === null) {
      return function (data) {
        return data;
      };
    } else if (typeof mSource === 'function') {
      return function (data, type, row, meta) {
        return mSource(data, type, row, meta);
      };
    } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
      var fetchData = function fetchData(data, type, src) {
        var arrayNotation, funcNotation, out, innerSrc;

        if (src !== "") {
          var a = _fnSplitObjNotation(src);

          for (var i = 0, iLen = a.length; i < iLen; i++) {
            arrayNotation = a[i].match(__reArray);
            funcNotation = a[i].match(__reFn);

            if (arrayNotation) {
              a[i] = a[i].replace(__reArray, '');

              if (a[i] !== "") {
                data = data[a[i]];
              }

              out = [];

              a.splice(0, i + 1);
              innerSrc = a.join('.');

              if ($.isArray(data)) {
                for (var j = 0, jLen = data.length; j < jLen; j++) {
                  out.push(fetchData(data[j], type, innerSrc));
                }
              }


              var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);
              data = join === "" ? out : out.join(join);

              break;
            } else if (funcNotation) {
              a[i] = a[i].replace(__reFn, '');
              data = data[a[i]]();
              continue;
            }

            if (data === null || data[a[i]] === undefined) {
              return undefined;
            }

            data = data[a[i]];
          }
        }

        return data;
      };

      return function (data, type) {
        return fetchData(data, type, mSource);
      };
    } else {
      return function (data, type) {
        return data[mSource];
      };
    }
  }


  function _fnSetObjectDataFn(mSource) {
    if ($.isPlainObject(mSource)) {
      return _fnSetObjectDataFn(mSource._);
    } else if (mSource === null) {
      return function () { };
    } else if (typeof mSource === 'function') {
      return function (data, val, meta) {
        mSource(data, 'set', val, meta);
      };
    } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
      var setData = function setData(data, val, src) {
        var a = _fnSplitObjNotation(src),
          b;

        var aLast = a[a.length - 1];
        var arrayNotation, funcNotation, o, innerSrc;

        for (var i = 0, iLen = a.length - 1; i < iLen; i++) {
          arrayNotation = a[i].match(__reArray);
          funcNotation = a[i].match(__reFn);

          if (arrayNotation) {
            a[i] = a[i].replace(__reArray, '');
            data[a[i]] = [];

            b = a.slice();
            b.splice(0, i + 1);
            innerSrc = b.join('.');

            if ($.isArray(val)) {
              for (var j = 0, jLen = val.length; j < jLen; j++) {
                o = {};
                setData(o, val[j], innerSrc);
                data[a[i]].push(o);
              }
            } else {
              data[a[i]] = val;
            }


            return;
          } else if (funcNotation) {
            a[i] = a[i].replace(__reFn, '');
            data = data[a[i]](val);
          }


          if (data[a[i]] === null || data[a[i]] === undefined) {
            data[a[i]] = {};
          }

          data = data[a[i]];
        }


        if (aLast.match(__reFn)) {
          data = data[aLast.replace(__reFn, '')](val);
        } else {
          data[aLast.replace(__reArray, '')] = val;
        }
      };

      return function (data, val) {
        return setData(data, val, mSource);
      };
    } else {
      return function (data, val) {
        data[mSource] = val;
      };
    }
  }


  function _fnGetDataMaster(settings) {
    return _pluck(settings.aoData, '_aData');
  }


  function _fnClearTable(settings) {
    settings.aoData.length = 0;
    settings.aiDisplayMaster.length = 0;
    settings.aiDisplay.length = 0;
    settings.aIds = {};
  }


  function _fnDeleteIndex(a, iTarget, splice) {
    var iTargetIndex = -1;

    for (var i = 0, iLen = a.length; i < iLen; i++) {
      if (a[i] == iTarget) {
        iTargetIndex = i;
      } else if (a[i] > iTarget) {
        a[i]--;
      }
    }

    if (iTargetIndex != -1 && splice === undefined) {
      a.splice(iTargetIndex, 1);
    }
  }


  function _fnInvalidate(settings, rowIdx, src, colIdx) {
    var row = settings.aoData[rowIdx];
    var i, ien;

    var cellWrite = function cellWrite(cell, col) {
      while (cell.childNodes.length) {
        cell.removeChild(cell.firstChild);
      }

      cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');
    };


    if (src === 'dom' || (!src || src === 'auto') && row.src === 'dom') {
      row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;
    } else {
      var cells = row.anCells;

      if (cells) {
        if (colIdx !== undefined) {
          cellWrite(cells[colIdx], colIdx);
        } else {
          for (i = 0, ien = cells.length; i < ien; i++) {
            cellWrite(cells[i], i);
          }
        }
      }
    }


    row._aSortData = null;
    row._aFilterData = null;

    var cols = settings.aoColumns;

    if (colIdx !== undefined) {
      cols[colIdx].sType = null;
    } else {
      for (i = 0, ien = cols.length; i < ien; i++) {
        cols[i].sType = null;
      }


      _fnRowAttributes(settings, row);
    }
  }


  function _fnGetRowElements(settings, row, colIdx, d) {
    var tds = [],
      td = row.firstChild,
      name,
      col,
      o,
      i = 0,
      contents,
      columns = settings.aoColumns,
      objectRead = settings._rowReadObject;

    d = d !== undefined ? d : objectRead ? {} : [];

    var attr = function attr(str, td) {
      if (typeof str === 'string') {
        var idx = str.indexOf('@');

        if (idx !== -1) {
          var attr = str.substring(idx + 1);

          var setter = _fnSetObjectDataFn(str);

          setter(d, td.getAttribute(attr));
        }
      }
    };


    var cellProcess = function cellProcess(cell) {
      if (colIdx === undefined || colIdx === i) {
        col = columns[i];
        contents = $.trim(cell.innerHTML);

        if (col && col._bAttrSrc) {
          var setter = _fnSetObjectDataFn(col.mData._);

          setter(d, contents);
          attr(col.mData.sort, cell);
          attr(col.mData.type, cell);
          attr(col.mData.filter, cell);
        } else {
          if (objectRead) {
            if (!col._setter) {
              col._setter = _fnSetObjectDataFn(col.mData);
            }

            col._setter(d, contents);
          } else {
            d[i] = contents;
          }
        }
      }

      i++;
    };

    if (td) {
      while (td) {
        name = td.nodeName.toUpperCase();

        if (name == "TD" || name == "TH") {
          cellProcess(td);
          tds.push(td);
        }

        td = td.nextSibling;
      }
    } else {
      tds = row.anCells;

      for (var j = 0, jen = tds.length; j < jen; j++) {
        cellProcess(tds[j]);
      }
    }


    var rowNode = row.firstChild ? row : row.nTr;

    if (rowNode) {
      var id = rowNode.getAttribute('id');

      if (id) {
        _fnSetObjectDataFn(settings.rowId)(d, id);
      }
    }

    return {
      data: d,
      cells: tds
    };
  }


  function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
    var row = oSettings.aoData[iRow],
      rowData = row._aData,
      cells = [],
      nTr,
      nTd,
      oCol,
      i,
      iLen;

    if (row.nTr === null) {
      nTr = nTrIn || document.createElement('tr');
      row.nTr = nTr;
      row.anCells = cells;

      nTr._DT_RowIndex = iRow;

      _fnRowAttributes(oSettings, row);


      for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {
        oCol = oSettings.aoColumns[i];
        nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType);
        nTd._DT_CellIndex = {
          row: iRow,
          column: i
        };
        cells.push(nTd);

        if ((!nTrIn || oCol.mRender || oCol.mData !== i) && (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + '.display')) {
          nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');
        }


        if (oCol.sClass) {
          nTd.className += ' ' + oCol.sClass;
        }


        if (oCol.bVisible && !nTrIn) {
          nTr.appendChild(nTd);
        } else if (!oCol.bVisible && nTrIn) {
          nTd.parentNode.removeChild(nTd);
        }

        if (oCol.fnCreatedCell) {
          oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);
        }
      }

      _fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells]);
    }


    row.nTr.setAttribute('role', 'row');
  }


  function _fnRowAttributes(settings, row) {
    var tr = row.nTr;
    var data = row._aData;

    if (tr) {
      var id = settings.rowIdFn(data);

      if (id) {
        tr.id = id;
      }

      if (data.DT_RowClass) {
        var a = data.DT_RowClass.split(' ');
        row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;
        $(tr).removeClass(row.__rowc.join(' ')).addClass(data.DT_RowClass);
      }

      if (data.DT_RowAttr) {
        $(tr).attr(data.DT_RowAttr);
      }

      if (data.DT_RowData) {
        $(tr).data(data.DT_RowData);
      }
    }
  }


  function _fnBuildHead(oSettings) {
    var i, ien, cell, row, column;
    var thead = oSettings.nTHead;
    var tfoot = oSettings.nTFoot;
    var createHeader = $('th, td', thead).length === 0;
    var classes = oSettings.oClasses;
    var columns = oSettings.aoColumns;

    if (createHeader) {
      row = $('<tr/>').appendTo(thead);
    }

    for (i = 0, ien = columns.length; i < ien; i++) {
      column = columns[i];
      cell = $(column.nTh).addClass(column.sClass);

      if (createHeader) {
        cell.appendTo(row);
      }


      if (oSettings.oFeatures.bSort) {
        cell.addClass(column.sSortingClass);

        if (column.bSortable !== false) {
          cell.attr('tabindex', oSettings.iTabIndex).attr('aria-controls', oSettings.sTableId);

          _fnSortAttachListener(oSettings, column.nTh, i);
        }
      }

      if (column.sTitle != cell[0].innerHTML) {
        cell.html(column.sTitle);
      }

      _fnRenderer(oSettings, 'header')(oSettings, cell, column, classes);
    }

    if (createHeader) {
      _fnDetectHeader(oSettings.aoHeader, thead);
    }


    $(thead).find('>tr').attr('role', 'row');

    $(thead).find('>tr>th, >tr>td').addClass(classes.sHeaderTH);
    $(tfoot).find('>tr>th, >tr>td').addClass(classes.sFooterTH);

    if (tfoot !== null) {
      var cells = oSettings.aoFooter[0];

      for (i = 0, ien = cells.length; i < ien; i++) {
        column = columns[i];
        column.nTf = cells[i].cell;

        if (column.sClass) {
          $(column.nTf).addClass(column.sClass);
        }
      }
    }
  }


  function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
    var i, iLen, j, jLen, k, kLen, n, nLocalTr;
    var aoLocal = [];
    var aApplied = [];
    var iColumns = oSettings.aoColumns.length;
    var iRowspan, iColspan;

    if (!aoSource) {
      return;
    }

    if (bIncludeHidden === undefined) {
      bIncludeHidden = false;
    }


    for (i = 0, iLen = aoSource.length; i < iLen; i++) {
      aoLocal[i] = aoSource[i].slice();
      aoLocal[i].nTr = aoSource[i].nTr;

      for (j = iColumns - 1; j >= 0; j--) {
        if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {
          aoLocal[i].splice(j, 1);
        }
      }


      aApplied.push([]);
    }

    for (i = 0, iLen = aoLocal.length; i < iLen; i++) {
      nLocalTr = aoLocal[i].nTr;

      if (nLocalTr) {
        while (n = nLocalTr.firstChild) {
          nLocalTr.removeChild(n);
        }
      }

      for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {
        iRowspan = 1;
        iColspan = 1;

        if (aApplied[i][j] === undefined) {
          nLocalTr.appendChild(aoLocal[i][j].cell);
          aApplied[i][j] = 1;

          while (aoLocal[i + iRowspan] !== undefined && aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {
            aApplied[i + iRowspan][j] = 1;
            iRowspan++;
          }


          while (aoLocal[i][j + iColspan] !== undefined && aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {
            for (k = 0; k < iRowspan; k++) {
              aApplied[i + k][j + iColspan] = 1;
            }

            iColspan++;
          }


          $(aoLocal[i][j].cell).attr('rowspan', iRowspan).attr('colspan', iColspan);
        }
      }
    }
  }


  function _fnDraw(oSettings) {
    var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);

    if ($.inArray(false, aPreDraw) !== -1) {
      _fnProcessingDisplay(oSettings, false);

      return;
    }

    var i, iLen, n;
    var anRows = [];
    var iRowCount = 0;
    var asStripeClasses = oSettings.asStripeClasses;
    var iStripes = asStripeClasses.length;
    var iOpenRows = oSettings.aoOpenRows.length;
    var oLang = oSettings.oLanguage;
    var iInitDisplayStart = oSettings.iInitDisplayStart;
    var bServerSide = _fnDataSource(oSettings) == 'ssp';
    var aiDisplay = oSettings.aiDisplay;
    oSettings.bDrawing = true;

    if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {
      oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;
      oSettings.iInitDisplayStart = -1;
    }

    var iDisplayStart = oSettings._iDisplayStart;
    var iDisplayEnd = oSettings.fnDisplayEnd();

    if (oSettings.bDeferLoading) {
      oSettings.bDeferLoading = false;
      oSettings.iDraw++;

      _fnProcessingDisplay(oSettings, false);
    } else if (!bServerSide) {
      oSettings.iDraw++;
    } else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {
      return;
    }

    if (aiDisplay.length !== 0) {
      var iStart = bServerSide ? 0 : iDisplayStart;
      var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;

      for (var j = iStart; j < iEnd; j++) {
        var iDataIndex = aiDisplay[j];
        var aoData = oSettings.aoData[iDataIndex];

        if (aoData.nTr === null) {
          _fnCreateTr(oSettings, iDataIndex);
        }

        var nRow = aoData.nTr;

        if (iStripes !== 0) {
          var sStripe = asStripeClasses[iRowCount % iStripes];

          if (aoData._sRowStripe != sStripe) {
            $(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);
            aoData._sRowStripe = sStripe;
          }
        }


        _fnCallbackFire(oSettings, 'aoRowCallback', null, [nRow, aoData._aData, iRowCount, j, iDataIndex]);

        anRows.push(nRow);
        iRowCount++;
      }
    } else {
      var sZero = oLang.sZeroRecords;

      if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {
        sZero = oLang.sLoadingRecords;
      } else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {
        sZero = oLang.sEmptyTable;
      }

      anRows[0] = $('<tr/>', {
        'class': iStripes ? asStripeClasses[0] : ''
      }).append($('<td />', {
        'valign': 'top',
        'colSpan': _fnVisbleColumns(oSettings),
        'class': oSettings.oClasses.sRowEmpty
      }).html(sZero))[0];
    }


    _fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);

    _fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);

    var body = $(oSettings.nTBody);
    body.children().detach();
    body.append($(anRows));

    _fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);


    oSettings.bSorted = false;
    oSettings.bFiltered = false;
    oSettings.bDrawing = false;
  }


  function _fnReDraw(settings, holdPosition) {
    var features = settings.oFeatures,
      sort = features.bSort,
      filter = features.bFilter;

    if (sort) {
      _fnSort(settings);
    }

    if (filter) {
      _fnFilterComplete(settings, settings.oPreviousSearch);
    } else {
      settings.aiDisplay = settings.aiDisplayMaster.slice();
    }

    if (holdPosition !== true) {
      settings._iDisplayStart = 0;
    }


    settings._drawHold = holdPosition;

    _fnDraw(settings);

    settings._drawHold = false;
  }


  function _fnAddOptionsHtml(oSettings) {
    var classes = oSettings.oClasses;
    var table = $(oSettings.nTable);
    var holding = $('<div/>').insertBefore(table);

    var features = oSettings.oFeatures;

    var insert = $('<div/>', {
      id: oSettings.sTableId + '_wrapper',
      'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)
    });
    oSettings.nHolding = holding[0];
    oSettings.nTableWrapper = insert[0];
    oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;

    var aDom = oSettings.sDom.split('');
    var featureNode, cOption, nNewNode, cNext, sAttr, j;

    for (var i = 0; i < aDom.length; i++) {
      featureNode = null;
      cOption = aDom[i];

      if (cOption == '<') {
        nNewNode = $('<div/>')[0];

        cNext = aDom[i + 1];

        if (cNext == "'" || cNext == '"') {
          sAttr = "";
          j = 2;

          while (aDom[i + j] != cNext) {
            sAttr += aDom[i + j];
            j++;
          }


          if (sAttr == "H") {
            sAttr = classes.sJUIHeader;
          } else if (sAttr == "F") {
            sAttr = classes.sJUIFooter;
          }


          if (sAttr.indexOf('.') != -1) {
            var aSplit = sAttr.split('.');
            nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);
            nNewNode.className = aSplit[1];
          } else if (sAttr.charAt(0) == "#") {
            nNewNode.id = sAttr.substr(1, sAttr.length - 1);
          } else {
            nNewNode.className = sAttr;
          }

          i += j;
        }

        insert.append(nNewNode);
        insert = $(nNewNode);
      } else if (cOption == '>') {
        insert = insert.parent();
      }
      else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {
        featureNode = _fnFeatureHtmlLength(oSettings);
      } else if (cOption == 'f' && features.bFilter) {
        featureNode = _fnFeatureHtmlFilter(oSettings);
      } else if (cOption == 'r' && features.bProcessing) {
        featureNode = _fnFeatureHtmlProcessing(oSettings);
      } else if (cOption == 't') {
        featureNode = _fnFeatureHtmlTable(oSettings);
      } else if (cOption == 'i' && features.bInfo) {
        featureNode = _fnFeatureHtmlInfo(oSettings);
      } else if (cOption == 'p' && features.bPaginate) {
        featureNode = _fnFeatureHtmlPaginate(oSettings);
      } else if (DataTable.ext.feature.length !== 0) {
        var aoFeatures = DataTable.ext.feature;

        for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {
          if (cOption == aoFeatures[k].cFeature) {
            featureNode = aoFeatures[k].fnInit(oSettings);
            break;
          }
        }
      }


      if (featureNode) {
        var aanFeatures = oSettings.aanFeatures;

        if (!aanFeatures[cOption]) {
          aanFeatures[cOption] = [];
        }

        aanFeatures[cOption].push(featureNode);
        insert.append(featureNode);
      }
    }


    holding.replaceWith(insert);
    oSettings.nHolding = null;
  }


  function _fnDetectHeader(aLayout, nThead) {
    var nTrs = $(nThead).children('tr');
    var nTr, nCell;
    var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
    var bUnique;

    var fnShiftCol = function fnShiftCol(a, i, j) {
      var k = a[i];

      while (k[j]) {
        j++;
      }

      return j;
    };

    aLayout.splice(0, aLayout.length);

    for (i = 0, iLen = nTrs.length; i < iLen; i++) {
      aLayout.push([]);
    }


    for (i = 0, iLen = nTrs.length; i < iLen; i++) {
      nTr = nTrs[i];
      iColumn = 0;

      nCell = nTr.firstChild;

      while (nCell) {
        if (nCell.nodeName.toUpperCase() == "TD" || nCell.nodeName.toUpperCase() == "TH") {
          iColspan = nCell.getAttribute('colspan') * 1;
          iRowspan = nCell.getAttribute('rowspan') * 1;
          iColspan = !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;
          iRowspan = !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;

          iColShifted = fnShiftCol(aLayout, i, iColumn);

          bUnique = iColspan === 1 ? true : false;

          for (l = 0; l < iColspan; l++) {
            for (k = 0; k < iRowspan; k++) {
              aLayout[i + k][iColShifted + l] = {
                "cell": nCell,
                "unique": bUnique
              };
              aLayout[i + k].nTr = nTr;
            }
          }
        }

        nCell = nCell.nextSibling;
      }
    }
  }


  function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
    var aReturn = [];

    if (!aLayout) {
      aLayout = oSettings.aoHeader;

      if (nHeader) {
        aLayout = [];

        _fnDetectHeader(aLayout, nHeader);
      }
    }

    for (var i = 0, iLen = aLayout.length; i < iLen; i++) {
      for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {
        if (aLayout[i][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {
          aReturn[j] = aLayout[i][j].cell;
        }
      }
    }

    return aReturn;
  }


  function _fnBuildAjax(oSettings, data, fn) {
    _fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]);


    if (data && $.isArray(data)) {
      var tmp = {};
      var rbracket = /(.*?)\[\]$/;
      $.each(data, function (key, val) {
        var match = val.name.match(rbracket);

        if (match) {
          var name = match[0];

          if (!tmp[name]) {
            tmp[name] = [];
          }

          tmp[name].push(val.value);
        } else {
          tmp[val.name] = val.value;
        }
      });
      data = tmp;
    }

    var ajaxData;
    var ajax = oSettings.ajax;
    var instance = oSettings.oInstance;

    var callback = function callback(json) {
      _fnCallbackFire(oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR]);

      fn(json);
    };

    if ($.isPlainObject(ajax) && ajax.data) {
      ajaxData = ajax.data;
      var newData = typeof ajaxData === 'function' ? ajaxData(data, oSettings) :
        ajaxData;

      data = typeof ajaxData === 'function' && newData ? newData : $.extend(true, data, newData);

      delete ajax.data;
    }

    var baseAjax = {
      "data": data,
      "success": function success(json) {
        var error = json.error || json.sError;

        if (error) {
          _fnLog(oSettings, 0, error);
        }

        oSettings.json = json;
        callback(json);
      },
      "dataType": "json",
      "cache": false,
      "type": oSettings.sServerMethod,
      "error": function error(xhr, _error, thrown) {
        var ret = _fnCallbackFire(oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR]);

        if ($.inArray(true, ret) === -1) {
          if (_error == "parsererror") {
            _fnLog(oSettings, 0, 'Invalid JSON response', 1);
          } else if (xhr.readyState === 4) {
            _fnLog(oSettings, 0, 'Ajax error', 7);
          }
        }

        _fnProcessingDisplay(oSettings, false);
      }
    };

    oSettings.oAjaxData = data;

    _fnCallbackFire(oSettings, null, 'preXhr', [oSettings, data]);

    if (oSettings.fnServerData) {
      oSettings.fnServerData.call(instance, oSettings.sAjaxSource, $.map(data, function (val, key) {
        return {
          name: key,
          value: val
        };
      }), callback, oSettings);
    } else if (oSettings.sAjaxSource || typeof ajax === 'string') {
      oSettings.jqXHR = $.ajax($.extend(baseAjax, {
        url: ajax || oSettings.sAjaxSource
      }));
    } else if (typeof ajax === 'function') {
      oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);
    } else {
      oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax));

      ajax.data = ajaxData;
    }
  }


  function _fnAjaxUpdate(settings) {
    if (settings.bAjaxDataGet) {
      settings.iDraw++;

      _fnProcessingDisplay(settings, true);

      _fnBuildAjax(settings, _fnAjaxParameters(settings), function (json) {
        _fnAjaxUpdateDraw(settings, json);
      });

      return false;
    }

    return true;
  }


  function _fnAjaxParameters(settings) {
    var columns = settings.aoColumns,
      columnCount = columns.length,
      features = settings.oFeatures,
      preSearch = settings.oPreviousSearch,
      preColSearch = settings.aoPreSearchCols,
      i,
      data = [],
      dataProp,
      column,
      columnSearch,
      sort = _fnSortFlatten(settings),
      displayStart = settings._iDisplayStart,
      displayLength = features.bPaginate !== false ? settings._iDisplayLength : -1;

    var param = function param(name, value) {
      data.push({
        'name': name,
        'value': value
      });
    };


    param('sEcho', settings.iDraw);
    param('iColumns', columnCount);
    param('sColumns', _pluck(columns, 'sName').join(','));
    param('iDisplayStart', displayStart);
    param('iDisplayLength', displayLength);

    var d = {
      draw: settings.iDraw,
      columns: [],
      order: [],
      start: displayStart,
      length: displayLength,
      search: {
        value: preSearch.sSearch,
        regex: preSearch.bRegex
      }
    };

    for (i = 0; i < columnCount; i++) {
      column = columns[i];
      columnSearch = preColSearch[i];
      dataProp = typeof column.mData == "function" ? 'function' : column.mData;
      d.columns.push({
        data: dataProp,
        name: column.sName,
        searchable: column.bSearchable,
        orderable: column.bSortable,
        search: {
          value: columnSearch.sSearch,
          regex: columnSearch.bRegex
        }
      });
      param("mDataProp_" + i, dataProp);

      if (features.bFilter) {
        param('sSearch_' + i, columnSearch.sSearch);
        param('bRegex_' + i, columnSearch.bRegex);
        param('bSearchable_' + i, column.bSearchable);
      }

      if (features.bSort) {
        param('bSortable_' + i, column.bSortable);
      }
    }

    if (features.bFilter) {
      param('sSearch', preSearch.sSearch);
      param('bRegex', preSearch.bRegex);
    }

    if (features.bSort) {
      $.each(sort, function (i, val) {
        d.order.push({
          column: val.col,
          dir: val.dir
        });
        param('iSortCol_' + i, val.col);
        param('sSortDir_' + i, val.dir);
      });
      param('iSortingCols', sort.length);
    }


    var legacy = DataTable.ext.legacy.ajax;

    if (legacy === null) {
      return settings.sAjaxSource ? data : d;
    }


    return legacy ? data : d;
  }


  function _fnAjaxUpdateDraw(settings, json) {
    var compat = function compat(old, modern) {
      return json[old] !== undefined ? json[old] : json[modern];
    };

    var data = _fnAjaxDataSrc(settings, json);

    var draw = compat('sEcho', 'draw');
    var recordsTotal = compat('iTotalRecords', 'recordsTotal');
    var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');

    if (draw) {
      if (draw * 1 < settings.iDraw) {
        return;
      }

      settings.iDraw = draw * 1;
    }

    _fnClearTable(settings);

    settings._iRecordsTotal = parseInt(recordsTotal, 10);
    settings._iRecordsDisplay = parseInt(recordsFiltered, 10);

    for (var i = 0, ien = data.length; i < ien; i++) {
      _fnAddData(settings, data[i]);
    }

    settings.aiDisplay = settings.aiDisplayMaster.slice();
    settings.bAjaxDataGet = false;

    _fnDraw(settings);

    if (!settings._bInitComplete) {
      _fnInitComplete(settings, json);
    }

    settings.bAjaxDataGet = true;

    _fnProcessingDisplay(settings, false);
  }


  function _fnAjaxDataSrc(oSettings, json) {
    var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp;

    if (dataSrc === 'data') {
      return json.aaData || json[dataSrc];
    }

    return dataSrc !== "" ? _fnGetObjectDataFn(dataSrc)(json) : json;
  }


  function _fnFeatureHtmlFilter(settings) {
    var classes = settings.oClasses;
    var tableId = settings.sTableId;
    var language = settings.oLanguage;
    var previousSearch = settings.oPreviousSearch;
    var features = settings.aanFeatures;
    var input = '<input type="search" class="' + classes.sFilterInput + '"/>';
    var str = language.sSearch;
    str = str.match(/_INPUT_/) ? str.replace('_INPUT_', input) : str + input;
    var filter = $('<div/>', {
      'id': !features.f ? tableId + '_filter' : null,
      'class': classes.sFilter
    }).append($('<label/>').append(str));

    var searchFn = function searchFn() {
      var n = features.f;
      var val = !this.value ? "" : this.value;


      if (val != previousSearch.sSearch) {
        _fnFilterComplete(settings, {
          "sSearch": val,
          "bRegex": previousSearch.bRegex,
          "bSmart": previousSearch.bSmart,
          "bCaseInsensitive": previousSearch.bCaseInsensitive
        });


        settings._iDisplayStart = 0;

        _fnDraw(settings);
      }
    };

    var searchDelay = settings.searchDelay !== null ? settings.searchDelay : _fnDataSource(settings) === 'ssp' ? 400 : 0;
    var jqFilter = $('input', filter).val(previousSearch.sSearch).attr('placeholder', language.sSearchPlaceholder).on('keyup.DT search.DT input.DT paste.DT cut.DT', searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn).on('keypress.DT', function (e) {
      if (e.keyCode == 13) {
        return false;
      }
    }).attr('aria-controls', tableId);

    $(settings.nTable).on('search.dt.DT', function (ev, s) {
      if (settings === s) {
        try {
          if (jqFilter[0] !== document.activeElement) {
            jqFilter.val(previousSearch.sSearch);
          }
        } catch (e) { }
      }
    });
    return filter[0];
  }


  function _fnFilterComplete(oSettings, oInput, iForce) {
    var oPrevSearch = oSettings.oPreviousSearch;
    var aoPrevSearch = oSettings.aoPreSearchCols;

    var fnSaveFilter = function fnSaveFilter(oFilter) {
      oPrevSearch.sSearch = oFilter.sSearch;
      oPrevSearch.bRegex = oFilter.bRegex;
      oPrevSearch.bSmart = oFilter.bSmart;
      oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
    };

    var fnRegex = function fnRegex(o) {
      return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
    };


    _fnColumnTypes(oSettings);


    if (_fnDataSource(oSettings) != 'ssp') {
      _fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);

      fnSaveFilter(oInput);

      for (var i = 0; i < aoPrevSearch.length; i++) {
        _fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]), aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);
      }


      _fnFilterCustom(oSettings);
    } else {
      fnSaveFilter(oInput);
    }


    oSettings.bFiltered = true;

    _fnCallbackFire(oSettings, null, 'search', [oSettings]);
  }


  function _fnFilterCustom(settings) {
    var filters = DataTable.ext.search;
    var displayRows = settings.aiDisplay;
    var row, rowIdx;

    for (var i = 0, ien = filters.length; i < ien; i++) {
      var rows = [];

      for (var j = 0, jen = displayRows.length; j < jen; j++) {
        rowIdx = displayRows[j];
        row = settings.aoData[rowIdx];

        if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {
          rows.push(rowIdx);
        }
      }


      displayRows.length = 0;
      $.merge(displayRows, rows);
    }
  }


  function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {
    if (searchStr === '') {
      return;
    }

    var data;
    var out = [];
    var display = settings.aiDisplay;

    var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);

    for (var i = 0; i < display.length; i++) {
      data = settings.aoData[display[i]]._aFilterData[colIdx];

      if (rpSearch.test(data)) {
        out.push(display[i]);
      }
    }

    settings.aiDisplay = out;
  }


  function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {
    var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);

    var prevSearch = settings.oPreviousSearch.sSearch;
    var displayMaster = settings.aiDisplayMaster;
    var display, invalidated, i;
    var filtered = [];

    if (DataTable.ext.search.length !== 0) {
      force = true;
    }


    invalidated = _fnFilterData(settings);

    if (input.length <= 0) {
      settings.aiDisplay = displayMaster.slice();
    } else {
      if (invalidated || force || prevSearch.length > input.length || input.indexOf(prevSearch) !== 0 || settings.bSorted
      ) {
        settings.aiDisplay = displayMaster.slice();
      }


      display = settings.aiDisplay;

      for (i = 0; i < display.length; i++) {
        if (rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {
          filtered.push(display[i]);
        }
      }

      settings.aiDisplay = filtered;
    }
  }


  function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {
    search = regex ? search : _fnEscapeRegex(search);

    if (smart) {
      var a = $.map(search.match(/"[^"]+"|[^ ]+/g) || [''], function (word) {
        if (word.charAt(0) === '"') {
          var m = word.match(/^"(.*)"$/);
          word = m ? m[1] : word;
        }

        return word.replace('"', '');
      });
      search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';
    }

    return new RegExp(search, caseInsensitive ? 'i' : '');
  }


  var _fnEscapeRegex = DataTable.util.escapeRegex;
  var __filter_div = $('<div>')[0];

  var __filter_div_textContent = __filter_div.textContent !== undefined;


  function _fnFilterData(settings) {
    var columns = settings.aoColumns;
    var column;
    var i, j, ien, jen, filterData, cellData, row;
    var fomatters = DataTable.ext.type.search;
    var wasInvalidated = false;

    for (i = 0, ien = settings.aoData.length; i < ien; i++) {
      row = settings.aoData[i];

      if (!row._aFilterData) {
        filterData = [];

        for (j = 0, jen = columns.length; j < jen; j++) {
          column = columns[j];

          if (column.bSearchable) {
            cellData = _fnGetCellData(settings, i, j, 'filter');

            if (fomatters[column.sType]) {
              cellData = fomatters[column.sType](cellData);
            }


            if (cellData === null) {
              cellData = '';
            }

            if (typeof cellData !== 'string' && cellData.toString) {
              cellData = cellData.toString();
            }
          } else {
            cellData = '';
          }


          if (cellData.indexOf && cellData.indexOf('&') !== -1) {
            __filter_div.innerHTML = cellData;
            cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;
          }

          if (cellData.replace) {
            cellData = cellData.replace(/[\r\n]/g, '');
          }

          filterData.push(cellData);
        }

        row._aFilterData = filterData;
        row._sFilterRow = filterData.join('  ');
        wasInvalidated = true;
      }
    }

    return wasInvalidated;
  }


  function _fnSearchToCamel(obj) {
    return {
      search: obj.sSearch,
      smart: obj.bSmart,
      regex: obj.bRegex,
      caseInsensitive: obj.bCaseInsensitive
    };
  }


  function _fnSearchToHung(obj) {
    return {
      sSearch: obj.search,
      bSmart: obj.smart,
      bRegex: obj.regex,
      bCaseInsensitive: obj.caseInsensitive
    };
  }


  function _fnFeatureHtmlInfo(settings) {
    var tid = settings.sTableId,
      nodes = settings.aanFeatures.i,
      n = $('<div/>', {
        'class': settings.oClasses.sInfo,
        'id': !nodes ? tid + '_info' : null
      });

    if (!nodes) {
      settings.aoDrawCallback.push({
        "fn": _fnUpdateInfo,
        "sName": "information"
      });
      n.attr('role', 'status').attr('aria-live', 'polite');

      $(settings.nTable).attr('aria-describedby', tid + '_info');
    }

    return n[0];
  }


  function _fnUpdateInfo(settings) {
    var nodes = settings.aanFeatures.i;

    if (nodes.length === 0) {
      return;
    }

    var lang = settings.oLanguage,
      start = settings._iDisplayStart + 1,
      end = settings.fnDisplayEnd(),
      max = settings.fnRecordsTotal(),
      total = settings.fnRecordsDisplay(),
      out = total ? lang.sInfo : lang.sInfoEmpty;

    if (total !== max) {
      out += ' ' + lang.sInfoFiltered;
    }


    out += lang.sInfoPostFix;
    out = _fnInfoMacros(settings, out);
    var callback = lang.fnInfoCallback;

    if (callback !== null) {
      out = callback.call(settings.oInstance, settings, start, end, max, total, out);
    }

    $(nodes).html(out);
  }

  function _fnInfoMacros(settings, str) {
    var formatter = settings.fnFormatNumber,
      start = settings._iDisplayStart + 1,
      len = settings._iDisplayLength,
      vis = settings.fnRecordsDisplay(),
      all = len === -1;
    return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));
  }


  function _fnInitialise(settings) {
    var i,
      iLen,
      iAjaxStart = settings.iInitDisplayStart;
    var columns = settings.aoColumns,
      column;
    var features = settings.oFeatures;
    var deferLoading = settings.bDeferLoading;


    if (!settings.bInitialised) {
      setTimeout(function () {
        _fnInitialise(settings);
      }, 200);
      return;
    }


    _fnAddOptionsHtml(settings);


    _fnBuildHead(settings);

    _fnDrawHead(settings, settings.aoHeader);

    _fnDrawHead(settings, settings.aoFooter);


    _fnProcessingDisplay(settings, true);


    if (features.bAutoWidth) {
      _fnCalculateColumnWidths(settings);
    }

    for (i = 0, iLen = columns.length; i < iLen; i++) {
      column = columns[i];

      if (column.sWidth) {
        column.nTh.style.width = _fnStringToCss(column.sWidth);
      }
    }

    _fnCallbackFire(settings, null, 'preInit', [settings]);


    _fnReDraw(settings);


    var dataSrc = _fnDataSource(settings);

    if (dataSrc != 'ssp' || deferLoading) {
      if (dataSrc == 'ajax') {
        _fnBuildAjax(settings, [], function (json) {
          var aData = _fnAjaxDataSrc(settings, json);


          for (i = 0; i < aData.length; i++) {
            _fnAddData(settings, aData[i]);
          }


          settings.iInitDisplayStart = iAjaxStart;

          _fnReDraw(settings);

          _fnProcessingDisplay(settings, false);

          _fnInitComplete(settings, json);
        }, settings);
      } else {
        _fnProcessingDisplay(settings, false);

        _fnInitComplete(settings);
      }
    }
  }


  function _fnInitComplete(settings, json) {
    settings._bInitComplete = true;

    if (json || settings.oInit.aaData) {
      _fnAdjustColumnSizing(settings);
    }

    _fnCallbackFire(settings, null, 'plugin-init', [settings, json]);

    _fnCallbackFire(settings, 'aoInitComplete', 'init', [settings, json]);
  }

  function _fnLengthChange(settings, val) {
    var len = parseInt(val, 10);
    settings._iDisplayLength = len;

    _fnLengthOverflow(settings);


    _fnCallbackFire(settings, null, 'length', [settings, len]);
  }


  function _fnFeatureHtmlLength(settings) {
    var classes = settings.oClasses,
      tableId = settings.sTableId,
      menu = settings.aLengthMenu,
      d2 = $.isArray(menu[0]),
      lengths = d2 ? menu[0] : menu,
      language = d2 ? menu[1] : menu;
    var select = $('<select/>', {
      'name': tableId + '_length',
      'aria-controls': tableId,
      'class': classes.sLengthSelect
    });

    for (var i = 0, ien = lengths.length; i < ien; i++) {
      select[0][i] = new Option(typeof language[i] === 'number' ? settings.fnFormatNumber(language[i]) : language[i], lengths[i]);
    }

    var div = $('<div><label/></div>').addClass(classes.sLength);

    if (!settings.aanFeatures.l) {
      div[0].id = tableId + '_length';
    }

    div.children().append(settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML));

    $('select', div).val(settings._iDisplayLength).on('change.DT', function (e) {
      _fnLengthChange(settings, $(this).val());

      _fnDraw(settings);
    });

    $(settings.nTable).on('length.dt.DT', function (e, s, len) {
      if (settings === s) {
        $('select', div).val(len);
      }
    });
    return div[0];
  }



  function _fnFeatureHtmlPaginate(settings) {
    var type = settings.sPaginationType,
      plugin = DataTable.ext.pager[type],
      modern = typeof plugin === 'function',
      redraw = function redraw(settings) {
        _fnDraw(settings);
      },
      node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0],
      features = settings.aanFeatures;

    if (!modern) {
      plugin.fnInit(settings, node, redraw);
    }


    if (!features.p) {
      node.id = settings.sTableId + '_paginate';
      settings.aoDrawCallback.push({
        "fn": function fn(settings) {
          if (modern) {
            var start = settings._iDisplayStart,
              len = settings._iDisplayLength,
              visRecords = settings.fnRecordsDisplay(),
              all = len === -1,
              page = all ? 0 : Math.ceil(start / len),
              pages = all ? 1 : Math.ceil(visRecords / len),
              buttons = plugin(page, pages),
              i,
              ien;

            for (i = 0, ien = features.p.length; i < ien; i++) {
              _fnRenderer(settings, 'pageButton')(settings, features.p[i], i, buttons, page, pages);
            }
          } else {
            plugin.fnUpdate(settings, redraw);
          }
        },
        "sName": "pagination"
      });
    }

    return node;
  }


  function _fnPageChange(settings, action, redraw) {
    var start = settings._iDisplayStart,
      len = settings._iDisplayLength,
      records = settings.fnRecordsDisplay();

    if (records === 0 || len === -1) {
      start = 0;
    } else if (typeof action === "number") {
      start = action * len;

      if (start > records) {
        start = 0;
      }
    } else if (action == "first") {
      start = 0;
    } else if (action == "previous") {
      start = len >= 0 ? start - len : 0;

      if (start < 0) {
        start = 0;
      }
    } else if (action == "next") {
      if (start + len < records) {
        start += len;
      }
    } else if (action == "last") {
      start = Math.floor((records - 1) / len) * len;
    } else {
      _fnLog(settings, 0, "Unknown paging action: " + action, 5);
    }

    var changed = settings._iDisplayStart !== start;
    settings._iDisplayStart = start;

    if (changed) {
      _fnCallbackFire(settings, null, 'page', [settings]);

      if (redraw) {
        _fnDraw(settings);
      }
    }

    return changed;
  }


  function _fnFeatureHtmlProcessing(settings) {
    return $('<div/>', {
      'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,
      'class': settings.oClasses.sProcessing
    }).html(settings.oLanguage.sProcessing).insertBefore(settings.nTable)[0];
  }


  function _fnProcessingDisplay(settings, show) {
    if (settings.oFeatures.bProcessing) {
      $(settings.aanFeatures.r).css('display', show ? 'block' : 'none');
    }

    _fnCallbackFire(settings, null, 'processing', [settings, show]);
  }


  function _fnFeatureHtmlTable(settings) {
    var table = $(settings.nTable);

    table.attr('role', 'grid');

    var scroll = settings.oScroll;

    if (scroll.sX === '' && scroll.sY === '') {
      return settings.nTable;
    }

    var scrollX = scroll.sX;
    var scrollY = scroll.sY;
    var classes = settings.oClasses;
    var caption = table.children('caption');
    var captionSide = caption.length ? caption[0]._captionSide : null;
    var headerClone = $(table[0].cloneNode(false));
    var footerClone = $(table[0].cloneNode(false));
    var footer = table.children('tfoot');
    var _div = '<div/>';

    var size = function size(s) {
      return !s ? null : _fnStringToCss(s);
    };

    if (!footer.length) {
      footer = null;
    }


    var scroller = $(_div, {
      'class': classes.sScrollWrapper
    }).append($(_div, {
      'class': classes.sScrollHead
    }).css({
      overflow: 'hidden',
      position: 'relative',
      border: 0,
      width: scrollX ? size(scrollX) : '100%'
    }).append($(_div, {
      'class': classes.sScrollHeadInner
    }).css({
      'box-sizing': 'content-box',
      width: scroll.sXInner || '100%'
    }).append(headerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'top' ? caption : null).append(table.children('thead'))))).append($(_div, {
      'class': classes.sScrollBody
    }).css({
      position: 'relative',
      overflow: 'auto',
      width: size(scrollX)
    }).append(table));

    if (footer) {
      scroller.append($(_div, {
        'class': classes.sScrollFoot
      }).css({
        overflow: 'hidden',
        border: 0,
        width: scrollX ? size(scrollX) : '100%'
      }).append($(_div, {
        'class': classes.sScrollFootInner
      }).append(footerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'bottom' ? caption : null).append(table.children('tfoot')))));
    }

    var children = scroller.children();
    var scrollHead = children[0];
    var scrollBody = children[1];
    var scrollFoot = footer ? children[2] : null;

    if (scrollX) {
      $(scrollBody).on('scroll.DT', function (e) {
        var scrollLeft = this.scrollLeft;
        scrollHead.scrollLeft = scrollLeft;

        if (footer) {
          scrollFoot.scrollLeft = scrollLeft;
        }
      });
    }

    $(scrollBody).css(scrollY && scroll.bCollapse ? 'max-height' : 'height', scrollY);
    settings.nScrollHead = scrollHead;
    settings.nScrollBody = scrollBody;
    settings.nScrollFoot = scrollFoot;

    settings.aoDrawCallback.push({
      "fn": _fnScrollDraw,
      "sName": "scrolling"
    });
    return scroller[0];
  }


  function _fnScrollDraw(settings) {
    var scroll = settings.oScroll,
      scrollX = scroll.sX,
      scrollXInner = scroll.sXInner,
      scrollY = scroll.sY,
      barWidth = scroll.iBarWidth,
      divHeader = $(settings.nScrollHead),
      divHeaderStyle = divHeader[0].style,
      divHeaderInner = divHeader.children('div'),
      divHeaderInnerStyle = divHeaderInner[0].style,
      divHeaderTable = divHeaderInner.children('table'),
      divBodyEl = settings.nScrollBody,
      divBody = $(divBodyEl),
      divBodyStyle = divBodyEl.style,
      divFooter = $(settings.nScrollFoot),
      divFooterInner = divFooter.children('div'),
      divFooterTable = divFooterInner.children('table'),
      header = $(settings.nTHead),
      table = $(settings.nTable),
      tableEl = table[0],
      tableStyle = tableEl.style,
      footer = settings.nTFoot ? $(settings.nTFoot) : null,
      browser = settings.oBrowser,
      ie67 = browser.bScrollOversize,
      dtHeaderCells = _pluck(settings.aoColumns, 'nTh'),
      headerTrgEls,
      footerTrgEls,
      headerSrcEls,
      footerSrcEls,
      headerCopy,
      footerCopy,
      headerWidths = [],
      footerWidths = [],
      headerContent = [],
      footerContent = [],
      idx,
      correction,
      sanityWidth,
      zeroOut = function zeroOut(nSizer) {
        var style = nSizer.style;
        style.paddingTop = "0";
        style.paddingBottom = "0";
        style.borderTopWidth = "0";
        style.borderBottomWidth = "0";
        style.height = 0;
      };


    var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;

    if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {
      settings.scrollBarVis = scrollBarVis;

      _fnAdjustColumnSizing(settings);

      return;
    } else {
      settings.scrollBarVis = scrollBarVis;
    }


    table.children('thead, tfoot').remove();

    if (footer) {
      footerCopy = footer.clone().prependTo(table);
      footerTrgEls = footer.find('tr');

      footerSrcEls = footerCopy.find('tr');
    }


    headerCopy = header.clone().prependTo(table);
    headerTrgEls = header.find('tr');

    headerSrcEls = headerCopy.find('tr');
    headerCopy.find('th, td').removeAttr('tabindex');

    if (!scrollX) {
      divBodyStyle.width = '100%';
      divHeader[0].style.width = '100%';
    }

    $.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {
      idx = _fnVisibleToColumnIndex(settings, i);
      el.style.width = settings.aoColumns[idx].sWidth;
    });

    if (footer) {
      _fnApplyToChildren(function (n) {
        n.style.width = "";
      }, footerSrcEls);
    }


    sanityWidth = table.outerWidth();

    if (scrollX === "") {
      tableStyle.width = "100%";

      if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")) {
        tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);
      }


      sanityWidth = table.outerWidth();
    } else if (scrollXInner !== "") {
      tableStyle.width = _fnStringToCss(scrollXInner);

      sanityWidth = table.outerWidth();
    }


    _fnApplyToChildren(zeroOut, headerSrcEls);


    _fnApplyToChildren(function (nSizer) {
      headerContent.push(nSizer.innerHTML);
      headerWidths.push(_fnStringToCss($(nSizer).css('width')));
    }, headerSrcEls);


    _fnApplyToChildren(function (nToSize, i) {
      if ($.inArray(nToSize, dtHeaderCells) !== -1) {
        nToSize.style.width = headerWidths[i];
      }
    }, headerTrgEls);

    $(headerSrcEls).height(0);

    if (footer) {
      _fnApplyToChildren(zeroOut, footerSrcEls);

      _fnApplyToChildren(function (nSizer) {
        footerContent.push(nSizer.innerHTML);
        footerWidths.push(_fnStringToCss($(nSizer).css('width')));
      }, footerSrcEls);

      _fnApplyToChildren(function (nToSize, i) {
        nToSize.style.width = footerWidths[i];
      }, footerTrgEls);

      $(footerSrcEls).height(0);
    }


    _fnApplyToChildren(function (nSizer, i) {
      nSizer.innerHTML = '<div class="dataTables_sizing">' + headerContent[i] + '</div>';
      nSizer.childNodes[0].style.height = "0";
      nSizer.childNodes[0].style.overflow = "hidden";
      nSizer.style.width = headerWidths[i];
    }, headerSrcEls);

    if (footer) {
      _fnApplyToChildren(function (nSizer, i) {
        nSizer.innerHTML = '<div class="dataTables_sizing">' + footerContent[i] + '</div>';
        nSizer.childNodes[0].style.height = "0";
        nSizer.childNodes[0].style.overflow = "hidden";
        nSizer.style.width = footerWidths[i];
      }, footerSrcEls);
    }


    if (table.outerWidth() < sanityWidth) {
      correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll" ? sanityWidth + barWidth : sanityWidth;

      if (ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")) {
        tableStyle.width = _fnStringToCss(correction - barWidth);
      }


      if (scrollX === "" || scrollXInner !== "") {
        _fnLog(settings, 1, 'Possible column misalignment', 6);
      }
    } else {
      correction = '100%';
    }


    divBodyStyle.width = _fnStringToCss(correction);
    divHeaderStyle.width = _fnStringToCss(correction);

    if (footer) {
      settings.nScrollFoot.style.width = _fnStringToCss(correction);
    }


    if (!scrollY) {
      if (ie67) {
        divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);
      }
    }


    var iOuterWidth = table.outerWidth();
    divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);
    divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth);

    var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
    var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');
    divHeaderInnerStyle[padding] = bScrolling ? barWidth + "px" : "0px";

    if (footer) {
      divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);
      divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);
      divFooterInner[0].style[padding] = bScrolling ? barWidth + "px" : "0px";
    }


    table.children('colgroup').insertBefore(table.children('thead'));

    divBody.scroll();

    if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {
      divBodyEl.scrollTop = 0;
    }
  }


  function _fnApplyToChildren(fn, an1, an2) {
    var index = 0,
      i = 0,
      iLen = an1.length;
    var nNode1, nNode2;

    while (i < iLen) {
      nNode1 = an1[i].firstChild;
      nNode2 = an2 ? an2[i].firstChild : null;

      while (nNode1) {
        if (nNode1.nodeType === 1) {
          if (an2) {
            fn(nNode1, nNode2, index);
          } else {
            fn(nNode1, index);
          }

          index++;
        }

        nNode1 = nNode1.nextSibling;
        nNode2 = an2 ? nNode2.nextSibling : null;
      }

      i++;
    }
  }

  var __re_html_remove = /<.*?>/g;

  function _fnCalculateColumnWidths(oSettings) {
    var table = oSettings.nTable,
      columns = oSettings.aoColumns,
      scroll = oSettings.oScroll,
      scrollY = scroll.sY,
      scrollX = scroll.sX,
      scrollXInner = scroll.sXInner,
      columnCount = columns.length,
      visibleColumns = _fnGetColumns(oSettings, 'bVisible'),
      headerCells = $('th', oSettings.nTHead),
      tableWidthAttr = table.getAttribute('width'),
      tableContainer = table.parentNode,
      userInputs = false,
      i,
      column,
      columnIdx,
      width,
      outerWidth,
      browser = oSettings.oBrowser,
      ie67 = browser.bScrollOversize;

    var styleWidth = table.style.width;

    if (styleWidth && styleWidth.indexOf('%') !== -1) {
      tableWidthAttr = styleWidth;
    }


    for (i = 0; i < visibleColumns.length; i++) {
      column = columns[visibleColumns[i]];

      if (column.sWidth !== null) {
        column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);
        userInputs = true;
      }
    }


    if (ie67 || !userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) {
      for (i = 0; i < columnCount; i++) {
        var colIdx = _fnVisibleToColumnIndex(oSettings, i);

        if (colIdx !== null) {
          columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width());
        }
      }
    } else {
      var tmpTable = $(table).clone()
        .css('visibility', 'hidden').removeAttr('id');

      tmpTable.find('tbody tr').remove();
      var tr = $('<tr/>').appendTo(tmpTable.find('tbody'));

      tmpTable.find('thead, tfoot').remove();
      tmpTable.append($(oSettings.nTHead).clone()).append($(oSettings.nTFoot).clone());

      tmpTable.find('tfoot th, tfoot td').css('width', '');

      headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);

      for (i = 0; i < visibleColumns.length; i++) {
        column = columns[visibleColumns[i]];
        headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ? _fnStringToCss(column.sWidthOrig) : '';

        if (column.sWidthOrig && scrollX) {
          $(headerCells[i]).append($('<div/>').css({
            width: column.sWidthOrig,
            margin: 0,
            padding: 0,
            border: 0,
            height: 1
          }));
        }
      }


      if (oSettings.aoData.length) {
        for (i = 0; i < visibleColumns.length; i++) {
          columnIdx = visibleColumns[i];
          column = columns[columnIdx];
          $(_fnGetWidestNode(oSettings, columnIdx)).clone(false).append(column.sContentPadding).appendTo(tr);
        }
      }


      $('[name]', tmpTable).removeAttr('name');

      var holder = $('<div/>').css(scrollX || scrollY ? {
        position: 'absolute',
        top: 0,
        left: 0,
        height: 1,
        right: 0,
        overflow: 'hidden'
      } : {}).append(tmpTable).appendTo(tableContainer);

      if (scrollX && scrollXInner) {
        tmpTable.width(scrollXInner);
      } else if (scrollX) {
        tmpTable.css('width', 'auto');
        tmpTable.removeAttr('width');

        if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {
          tmpTable.width(tableContainer.clientWidth);
        }
      } else if (scrollY) {
        tmpTable.width(tableContainer.clientWidth);
      } else if (tableWidthAttr) {
        tmpTable.width(tableWidthAttr);
      }


      var total = 0;

      for (i = 0; i < visibleColumns.length; i++) {
        var cell = $(headerCells[i]);
        var border = cell.outerWidth() - cell.width();

        var bounding = browser.bBounding ? Math.ceil(headerCells[i].getBoundingClientRect().width) : cell.outerWidth();

        total += bounding;

        columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding - border);
      }

      table.style.width = _fnStringToCss(total);

      holder.remove();
    }


    if (tableWidthAttr) {
      table.style.width = _fnStringToCss(tableWidthAttr);
    }

    if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {
      var bindResize = function bindResize() {
        $(window).on('resize.DT-' + oSettings.sInstance, _fnThrottle(function () {
          _fnAdjustColumnSizing(oSettings);
        }));
      };


      if (ie67) {
        setTimeout(bindResize, 1000);
      } else {
        bindResize();
      }

      oSettings._reszEvt = true;
    }
  }


  var _fnThrottle = DataTable.util.throttle;

  function _fnConvertToWidth(width, parent) {
    if (!width) {
      return 0;
    }

    var n = $('<div/>').css('width', _fnStringToCss(width)).appendTo(parent || document.body);
    var val = n[0].offsetWidth;
    n.remove();
    return val;
  }


  function _fnGetWidestNode(settings, colIdx) {
    var idx = _fnGetMaxLenString(settings, colIdx);

    if (idx < 0) {
      return null;
    }

    var data = settings.aoData[idx];
    return !data.nTr ?
      $('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] : data.anCells[colIdx];
  }


  function _fnGetMaxLenString(settings, colIdx) {
    var s,
      max = -1,
      maxIdx = -1;

    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
      s = _fnGetCellData(settings, i, colIdx, 'display') + '';
      s = s.replace(__re_html_remove, '');
      s = s.replace(/&nbsp;/g, ' ');

      if (s.length > max) {
        max = s.length;
        maxIdx = i;
      }
    }

    return maxIdx;
  }


  function _fnStringToCss(s) {
    if (s === null) {
      return '0px';
    }

    if (typeof s == 'number') {
      return s < 0 ? '0px' : s + 'px';
    }


    return s.match(/\d$/) ? s + 'px' : s;
  }

  function _fnSortFlatten(settings) {
    var i,
      iLen,
      k,
      kLen,
      aSort = [],
      aiOrig = [],
      aoColumns = settings.aoColumns,
      aDataSort,
      iCol,
      sType,
      srcCol,
      fixed = settings.aaSortingFixed,
      fixedObj = $.isPlainObject(fixed),
      nestedSort = [],
      add = function add(a) {
        if (a.length && !$.isArray(a[0])) {
          nestedSort.push(a);
        } else {
          $.merge(nestedSort, a);
        }
      };


    if ($.isArray(fixed)) {
      add(fixed);
    }

    if (fixedObj && fixed.pre) {
      add(fixed.pre);
    }

    add(settings.aaSorting);

    if (fixedObj && fixed.post) {
      add(fixed.post);
    }

    for (i = 0; i < nestedSort.length; i++) {
      srcCol = nestedSort[i][0];
      aDataSort = aoColumns[srcCol].aDataSort;

      for (k = 0, kLen = aDataSort.length; k < kLen; k++) {
        iCol = aDataSort[k];
        sType = aoColumns[iCol].sType || 'string';

        if (nestedSort[i]._idx === undefined) {
          nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);
        }

        aSort.push({
          src: srcCol,
          col: iCol,
          dir: nestedSort[i][1],
          index: nestedSort[i]._idx,
          type: sType,
          formatter: DataTable.ext.type.order[sType + "-pre"]
        });
      }
    }

    return aSort;
  }


  function _fnSort(oSettings) {
    var i,
      ien,
      iLen,
      j,
      jLen,
      k,
      kLen,
      sDataType,
      nTh,
      aiOrig = [],
      oExtSort = DataTable.ext.type.order,
      aoData = oSettings.aoData,
      aoColumns = oSettings.aoColumns,
      aDataSort,
      data,
      iCol,
      sType,
      oSort,
      formatters = 0,
      sortCol,
      displayMaster = oSettings.aiDisplayMaster,
      aSort;

    _fnColumnTypes(oSettings);

    aSort = _fnSortFlatten(oSettings);

    for (i = 0, ien = aSort.length; i < ien; i++) {
      sortCol = aSort[i];

      if (sortCol.formatter) {
        formatters++;
      }


      _fnSortData(oSettings, sortCol.col);
    }


    if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {
      for (i = 0, iLen = displayMaster.length; i < iLen; i++) {
        aiOrig[displayMaster[i]] = i;
      }


      if (formatters === aSort.length) {
        displayMaster.sort(function (a, b) {
          var x,
            y,
            k,
            test,
            sort,
            len = aSort.length,
            dataA = aoData[a]._aSortData,
            dataB = aoData[b]._aSortData;

          for (k = 0; k < len; k++) {
            sort = aSort[k];
            x = dataA[sort.col];
            y = dataB[sort.col];
            test = x < y ? -1 : x > y ? 1 : 0;

            if (test !== 0) {
              return sort.dir === 'asc' ? test : -test;
            }
          }

          x = aiOrig[a];
          y = aiOrig[b];
          return x < y ? -1 : x > y ? 1 : 0;
        });
      } else {
        displayMaster.sort(function (a, b) {
          var x,
            y,
            k,
            l,
            test,
            sort,
            fn,
            len = aSort.length,
            dataA = aoData[a]._aSortData,
            dataB = aoData[b]._aSortData;

          for (k = 0; k < len; k++) {
            sort = aSort[k];
            x = dataA[sort.col];
            y = dataB[sort.col];
            fn = oExtSort[sort.type + "-" + sort.dir] || oExtSort["string-" + sort.dir];
            test = fn(x, y);

            if (test !== 0) {
              return test;
            }
          }

          x = aiOrig[a];
          y = aiOrig[b];
          return x < y ? -1 : x > y ? 1 : 0;
        });
      }
    }


    oSettings.bSorted = true;
  }

  function _fnSortAria(settings) {
    var label;
    var nextSort;
    var columns = settings.aoColumns;

    var aSort = _fnSortFlatten(settings);

    var oAria = settings.oLanguage.oAria;

    for (var i = 0, iLen = columns.length; i < iLen; i++) {
      var col = columns[i];
      var asSorting = col.asSorting;
      var sTitle = col.sTitle.replace(/<.*?>/g, "");
      var th = col.nTh;

      th.removeAttribute('aria-sort');

      if (col.bSortable) {
        if (aSort.length > 0 && aSort[0].col == i) {
          th.setAttribute('aria-sort', aSort[0].dir == "asc" ? "ascending" : "descending");
          nextSort = asSorting[aSort[0].index + 1] || asSorting[0];
        } else {
          nextSort = asSorting[0];
        }

        label = sTitle + (nextSort === "asc" ? oAria.sSortAscending : oAria.sSortDescending);
      } else {
        label = sTitle;
      }

      th.setAttribute('aria-label', label);
    }
  }


  function _fnSortListener(settings, colIdx, append, callback) {
    var col = settings.aoColumns[colIdx];
    var sorting = settings.aaSorting;
    var asSorting = col.asSorting;
    var nextSortIdx;

    var next = function next(a, overflow) {
      var idx = a._idx;

      if (idx === undefined) {
        idx = $.inArray(a[1], asSorting);
      }

      return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;
    };


    if (typeof sorting[0] === 'number') {
      sorting = settings.aaSorting = [sorting];
    }


    if (append && settings.oFeatures.bSortMulti) {
      var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));

      if (sortIdx !== -1) {
        nextSortIdx = next(sorting[sortIdx], true);

        if (nextSortIdx === null && sorting.length === 1) {
          nextSortIdx = 0;
        }

        if (nextSortIdx === null) {
          sorting.splice(sortIdx, 1);
        } else {
          sorting[sortIdx][1] = asSorting[nextSortIdx];
          sorting[sortIdx]._idx = nextSortIdx;
        }
      } else {
        sorting.push([colIdx, asSorting[0], 0]);
        sorting[sorting.length - 1]._idx = 0;
      }
    } else if (sorting.length && sorting[0][0] == colIdx) {
      nextSortIdx = next(sorting[0]);
      sorting.length = 1;
      sorting[0][1] = asSorting[nextSortIdx];
      sorting[0]._idx = nextSortIdx;
    } else {
      sorting.length = 0;
      sorting.push([colIdx, asSorting[0]]);
      sorting[0]._idx = 0;
    }


    _fnReDraw(settings);


    if (typeof callback == 'function') {
      callback(settings);
    }
  }


  function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
    var col = settings.aoColumns[colIdx];

    _fnBindAction(attachTo, {}, function (e) {
      if (col.bSortable === false) {
        return;
      }


      if (settings.oFeatures.bProcessing) {
        _fnProcessingDisplay(settings, true);

        setTimeout(function () {
          _fnSortListener(settings, colIdx, e.shiftKey, callback);


          if (_fnDataSource(settings) !== 'ssp') {
            _fnProcessingDisplay(settings, false);
          }
        }, 0);
      } else {
        _fnSortListener(settings, colIdx, e.shiftKey, callback);
      }
    });
  }


  function _fnSortingClasses(settings) {
    var oldSort = settings.aLastSort;
    var sortClass = settings.oClasses.sSortColumn;

    var sort = _fnSortFlatten(settings);

    var features = settings.oFeatures;
    var i, ien, colIdx;

    if (features.bSort && features.bSortClasses) {
      for (i = 0, ien = oldSort.length; i < ien; i++) {
        colIdx = oldSort[i].src;

        $(_pluck(settings.aoData, 'anCells', colIdx)).removeClass(sortClass + (i < 2 ? i + 1 : 3));
      }


      for (i = 0, ien = sort.length; i < ien; i++) {
        colIdx = sort[i].src;
        $(_pluck(settings.aoData, 'anCells', colIdx)).addClass(sortClass + (i < 2 ? i + 1 : 3));
      }
    }

    settings.aLastSort = sort;
  }


  function _fnSortData(settings, idx) {
    var column = settings.aoColumns[idx];
    var customSort = DataTable.ext.order[column.sSortDataType];
    var customData;

    if (customSort) {
      customData = customSort.call(settings.oInstance, settings, idx, _fnColumnIndexToVisible(settings, idx));
    }


    var row, cellData;
    var formatter = DataTable.ext.type.order[column.sType + "-pre"];

    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
      row = settings.aoData[i];

      if (!row._aSortData) {
        row._aSortData = [];
      }

      if (!row._aSortData[idx] || customSort) {
        cellData = customSort ? customData[i] :
          _fnGetCellData(settings, i, idx, 'sort');
        row._aSortData[idx] = formatter ? formatter(cellData) : cellData;
      }
    }
  }


  function _fnSaveState(settings) {
    if (!settings.oFeatures.bStateSave || settings.bDestroying) {
      return;
    }


    var state = {
      time: +new Date(),
      start: settings._iDisplayStart,
      length: settings._iDisplayLength,
      order: $.extend(true, [], settings.aaSorting),
      search: _fnSearchToCamel(settings.oPreviousSearch),
      columns: $.map(settings.aoColumns, function (col, i) {
        return {
          visible: col.bVisible,
          search: _fnSearchToCamel(settings.aoPreSearchCols[i])
        };
      })
    };

    _fnCallbackFire(settings, "aoStateSaveParams", 'stateSaveParams', [settings, state]);

    settings.oSavedState = state;
    settings.fnStateSaveCallback.call(settings.oInstance, settings, state);
  }


  function _fnLoadState(settings, oInit, callback) {
    var i, ien;
    var columns = settings.aoColumns;

    var loaded = function loaded(s) {
      if (!s || !s.time) {
        callback();
        return;
      }


      var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s]);

      if ($.inArray(false, abStateLoad) !== -1) {
        callback();
        return;
      }


      var duration = settings.iStateDuration;

      if (duration > 0 && s.time < +new Date() - duration * 1000) {
        callback();
        return;
      }


      if (s.columns && columns.length !== s.columns.length) {
        callback();
        return;
      }


      settings.oLoadedState = $.extend(true, {}, s);

      if (s.start !== undefined) {
        settings._iDisplayStart = s.start;
        settings.iInitDisplayStart = s.start;
      }

      if (s.length !== undefined) {
        settings._iDisplayLength = s.length;
      }


      if (s.order !== undefined) {
        settings.aaSorting = [];
        $.each(s.order, function (i, col) {
          settings.aaSorting.push(col[0] >= columns.length ? [0, col[1]] : col);
        });
      }


      if (s.search !== undefined) {
        $.extend(settings.oPreviousSearch, _fnSearchToHung(s.search));
      }


      if (s.columns) {
        for (i = 0, ien = s.columns.length; i < ien; i++) {
          var col = s.columns[i];

          if (col.visible !== undefined) {
            columns[i].bVisible = col.visible;
          }


          if (col.search !== undefined) {
            $.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));
          }
        }
      }

      _fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [settings, s]);

      callback();
    };

    if (!settings.oFeatures.bStateSave) {
      callback();
      return;
    }

    var state = settings.fnStateLoadCallback.call(settings.oInstance, settings, loaded);

    if (state !== undefined) {
      loaded(state);
    }

  }


  function _fnSettingsFromNode(table) {
    var settings = DataTable.settings;
    var idx = $.inArray(table, _pluck(settings, 'nTable'));
    return idx !== -1 ? settings[idx] : null;
  }


  function _fnLog(settings, level, msg, tn) {
    msg = 'DataTables warning: ' + (settings ? 'table id=' + settings.sTableId + ' - ' : '') + msg;

    if (tn) {
      msg += '. For more information about this error, please see ' + 'http://datatables.net/tn/' + tn;
    }

    if (!level) {
      var ext = DataTable.ext;
      var type = ext.sErrMode || ext.errMode;

      if (settings) {
        _fnCallbackFire(settings, null, 'error', [settings, tn, msg]);
      }

      if (type == 'alert') {
        void 0;
      } else if (type == 'throw') {
        throw new Error(msg);
      } else if (typeof type == 'function') {
        type(settings, tn, msg);
      }
    } else if (window.console && console.log) {
      void 0;
    }
  }


  function _fnMap(ret, src, name, mappedName) {
    if ($.isArray(name)) {
      $.each(name, function (i, val) {
        if ($.isArray(val)) {
          _fnMap(ret, src, val[0], val[1]);
        } else {
          _fnMap(ret, src, val);
        }
      });
      return;
    }

    if (mappedName === undefined) {
      mappedName = name;
    }

    if (src[name] !== undefined) {
      ret[mappedName] = src[name];
    }
  }


  function _fnExtend(out, extender, breakRefs) {
    var val;

    for (var prop in extender) {
      if (extender.hasOwnProperty(prop)) {
        val = extender[prop];

        if ($.isPlainObject(val)) {
          if (!$.isPlainObject(out[prop])) {
            out[prop] = {};
          }

          $.extend(true, out[prop], val);
        } else if (breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val)) {
          out[prop] = val.slice();
        } else {
          out[prop] = val;
        }
      }
    }

    return out;
  }


  function _fnBindAction(n, oData, fn) {
    $(n).on('click.DT', oData, function (e) {
      $(n).blur();

      fn(e);
    }).on('keypress.DT', oData, function (e) {
      if (e.which === 13) {
        e.preventDefault();
        fn(e);
      }
    }).on('selectstart.DT', function () {
      return false;
    });
  }


  function _fnCallbackReg(oSettings, sStore, fn, sName) {
    if (fn) {
      oSettings[sStore].push({
        "fn": fn,
        "sName": sName
      });
    }
  }


  function _fnCallbackFire(settings, callbackArr, eventName, args) {
    var ret = [];

    if (callbackArr) {
      ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {
        return val.fn.apply(settings.oInstance, args);
      });
    }

    if (eventName !== null) {
      var e = $.Event(eventName + '.dt');
      $(settings.nTable).trigger(e, args);
      ret.push(e.result);
    }

    return ret;
  }

  function _fnLengthOverflow(settings) {
    var start = settings._iDisplayStart,
      end = settings.fnDisplayEnd(),
      len = settings._iDisplayLength;

    if (start >= end) {
      start = end - len;
    }


    start -= start % len;

    if (len === -1 || start < 0) {
      start = 0;
    }

    settings._iDisplayStart = start;
  }

  function _fnRenderer(settings, type) {
    var renderer = settings.renderer;
    var host = DataTable.ext.renderer[type];

    if ($.isPlainObject(renderer) && renderer[type]) {
      return host[renderer[type]] || host._;
    } else if (typeof renderer === 'string') {
      return host[renderer] || host._;
    }


    return host._;
  }


  function _fnDataSource(settings) {
    if (settings.oFeatures.bServerSide) {
      return 'ssp';
    } else if (settings.ajax || settings.sAjaxSource) {
      return 'ajax';
    }

    return 'dom';
  }


  var __apiStruct = [];

  var __arrayProto = Array.prototype;

  var _toSettings = function _toSettings(mixed) {
    var idx, jq;
    var settings = DataTable.settings;
    var tables = $.map(settings, function (el, i) {
      return el.nTable;
    });

    if (!mixed) {
      return [];
    } else if (mixed.nTable && mixed.oApi) {
      return [mixed];
    } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {
      idx = $.inArray(mixed, tables);
      return idx !== -1 ? [settings[idx]] : null;
    } else if (mixed && typeof mixed.settings === 'function') {
      return mixed.settings().toArray();
    } else if (typeof mixed === 'string') {
      jq = $(mixed);
    } else if (mixed instanceof $) {
      jq = mixed;
    }

    if (jq) {
      return jq.map(function (i) {
        idx = $.inArray(this, tables);
        return idx !== -1 ? settings[idx] : null;
      }).toArray();
    }
  };


  _Api2 = function _Api(context, data) {
    if (!(this instanceof _Api2)) {
      return new _Api2(context, data);
    }

    var settings = [];

    var ctxSettings = function ctxSettings(o) {
      var a = _toSettings(o);

      if (a) {
        settings = settings.concat(a);
      }
    };

    if ($.isArray(context)) {
      for (var i = 0, ien = context.length; i < ien; i++) {
        ctxSettings(context[i]);
      }
    } else {
      ctxSettings(context);
    }


    this.context = _unique(settings);

    if (data) {
      $.merge(this, data);
    }


    this.selector = {
      rows: null,
      cols: null,
      opts: null
    };

    _Api2.extend(this, this, __apiStruct);
  };

  DataTable.Api = _Api2;

  $.extend(_Api2.prototype, {
    any: function any() {
      return this.count() !== 0;
    },
    concat: __arrayProto.concat,
    context: [],
    count: function count() {
      return this.flatten().length;
    },
    each: function each(fn) {
      for (var i = 0, ien = this.length; i < ien; i++) {
        fn.call(this, this[i], i, this);
      }

      return this;
    },
    eq: function eq(idx) {
      var ctx = this.context;
      return ctx.length > idx ? new _Api2(ctx[idx], this[idx]) : null;
    },
    filter: function filter(fn) {
      var a = [];

      if (__arrayProto.filter) {
        a = __arrayProto.filter.call(this, fn, this);
      } else {
        for (var i = 0, ien = this.length; i < ien; i++) {
          if (fn.call(this, this[i], i, this)) {
            a.push(this[i]);
          }
        }
      }

      return new _Api2(this.context, a);
    },
    flatten: function flatten() {
      var a = [];
      return new _Api2(this.context, a.concat.apply(a, this.toArray()));
    },
    join: __arrayProto.join,
    indexOf: __arrayProto.indexOf || function (obj, start) {
      for (var i = start || 0, ien = this.length; i < ien; i++) {
        if (this[i] === obj) {
          return i;
        }
      }

      return -1;
    },
    iterator: function iterator(flatten, type, fn, alwaysNew) {
      var a = [],
        ret,
        i,
        ien,
        j,
        jen,
        context = this.context,
        rows,
        items,
        item,
        selector = this.selector;

      if (typeof flatten === 'string') {
        alwaysNew = fn;
        fn = type;
        type = flatten;
        flatten = false;
      }

      for (i = 0, ien = context.length; i < ien; i++) {
        var apiInst = new _Api2(context[i]);

        if (type === 'table') {
          ret = fn.call(apiInst, context[i], i);

          if (ret !== undefined) {
            a.push(ret);
          }
        } else if (type === 'columns' || type === 'rows') {
          ret = fn.call(apiInst, context[i], this[i], i);

          if (ret !== undefined) {
            a.push(ret);
          }
        } else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {
          items = this[i];

          if (type === 'column-rows') {
            rows = _selector_row_indexes(context[i], selector.opts);
          }

          for (j = 0, jen = items.length; j < jen; j++) {
            item = items[j];

            if (type === 'cell') {
              ret = fn.call(apiInst, context[i], item.row, item.column, i, j);
            } else {
              ret = fn.call(apiInst, context[i], item, i, j, rows);
            }

            if (ret !== undefined) {
              a.push(ret);
            }
          }
        }
      }

      if (a.length || alwaysNew) {
        var api = new _Api2(context, flatten ? a.concat.apply([], a) : a);
        var apiSelector = api.selector;
        apiSelector.rows = selector.rows;
        apiSelector.cols = selector.cols;
        apiSelector.opts = selector.opts;
        return api;
      }

      return this;
    },
    lastIndexOf: __arrayProto.lastIndexOf || function (obj, start) {
      return this.indexOf.apply(this.toArray.reverse(), arguments);
    },
    length: 0,
    map: function map(fn) {
      var a = [];

      if (__arrayProto.map) {
        a = __arrayProto.map.call(this, fn, this);
      } else {
        for (var i = 0, ien = this.length; i < ien; i++) {
          a.push(fn.call(this, this[i], i));
        }
      }

      return new _Api2(this.context, a);
    },
    pluck: function pluck(prop) {
      return this.map(function (el) {
        return el[prop];
      });
    },
    pop: __arrayProto.pop,
    push: __arrayProto.push,
    reduce: __arrayProto.reduce || function (fn, init) {
      return _fnReduce(this, fn, init, 0, this.length, 1);
    },
    reduceRight: __arrayProto.reduceRight || function (fn, init) {
      return _fnReduce(this, fn, init, this.length - 1, -1, -1);
    },
    reverse: __arrayProto.reverse,
    selector: null,
    shift: __arrayProto.shift,
    slice: function slice() {
      return new _Api2(this.context, this);
    },
    sort: __arrayProto.sort,
    splice: __arrayProto.splice,
    toArray: function toArray() {
      return __arrayProto.slice.call(this);
    },
    to$: function to$() {
      return $(this);
    },
    toJQuery: function toJQuery() {
      return $(this);
    },
    unique: function unique() {
      return new _Api2(this.context, _unique(this));
    },
    unshift: __arrayProto.unshift
  });

  _Api2.extend = function (scope, obj, ext) {
    if (!ext.length || !obj || !(obj instanceof _Api2) && !obj.__dt_wrapper) {
      return;
    }

    var i,
      ien,
      j,
      jen,
      struct,
      inner,
      methodScoping = function methodScoping(scope, fn, struc) {
        return function () {
          var ret = fn.apply(scope, arguments);

          _Api2.extend(ret, ret, struc.methodExt);

          return ret;
        };
      };

    for (i = 0, ien = ext.length; i < ien; i++) {
      struct = ext[i];

      obj[struct.name] = typeof struct.val === 'function' ? methodScoping(scope, struct.val, struct) : $.isPlainObject(struct.val) ? {} : struct.val;
      obj[struct.name].__dt_wrapper = true;

      _Api2.extend(scope, obj[struct.name], struct.propExt);
    }
  };


  _Api2.register = _api_register = function _api_register(name, val) {
    if ($.isArray(name)) {
      for (var j = 0, jen = name.length; j < jen; j++) {
        _Api2.register(name[j], val);
      }

      return;
    }

    var i,
      ien,
      heir = name.split('.'),
      struct = __apiStruct,
      key,
      method;

    var find = function find(src, name) {
      for (var i = 0, ien = src.length; i < ien; i++) {
        if (src[i].name === name) {
          return src[i];
        }
      }

      return null;
    };

    for (i = 0, ien = heir.length; i < ien; i++) {
      method = heir[i].indexOf('()') !== -1;
      key = method ? heir[i].replace('()', '') : heir[i];
      var src = find(struct, key);

      if (!src) {
        src = {
          name: key,
          val: {},
          methodExt: [],
          propExt: []
        };
        struct.push(src);
      }

      if (i === ien - 1) {
        src.val = val;
      } else {
        struct = method ? src.methodExt : src.propExt;
      }
    }
  };

  _Api2.registerPlural = _api_registerPlural = function _api_registerPlural(pluralName, singularName, val) {
    _Api2.register(pluralName, val);

    _Api2.register(singularName, function () {
      var ret = val.apply(this, arguments);

      if (ret === this) {
        return this;
      } else if (ret instanceof _Api2) {
        return ret.length ? $.isArray(ret[0]) ? new _Api2(ret.context, ret[0]) :
          ret[0] : undefined;
      }


      return ret;
    });
  };


  var __table_selector = function __table_selector(selector, a) {
    if (typeof selector === 'number') {
      return [a[selector]];
    }


    var nodes = $.map(a, function (el, i) {
      return el.nTable;
    });
    return $(nodes).filter(selector).map(function (i) {
      var idx = $.inArray(this, nodes);
      return a[idx];
    }).toArray();
  };


  _api_register('tables()', function (selector) {
    return selector ? new _Api2(__table_selector(selector, this.context)) : this;
  });

  _api_register('table()', function (selector) {
    var tables = this.tables(selector);
    var ctx = tables.context;

    return ctx.length ? new _Api2(ctx[0]) : tables;
  });

  _api_registerPlural('tables().nodes()', 'table().node()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTable;
    }, 1);
  });

  _api_registerPlural('tables().body()', 'table().body()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTBody;
    }, 1);
  });

  _api_registerPlural('tables().header()', 'table().header()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTHead;
    }, 1);
  });

  _api_registerPlural('tables().footer()', 'table().footer()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTFoot;
    }, 1);
  });

  _api_registerPlural('tables().containers()', 'table().container()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTableWrapper;
    }, 1);
  });


  _api_register('draw()', function (paging) {
    return this.iterator('table', function (settings) {
      if (paging === 'page') {
        _fnDraw(settings);
      } else {
        if (typeof paging === 'string') {
          paging = paging === 'full-hold' ? false : true;
        }

        _fnReDraw(settings, paging === false);
      }
    });
  });



  _api_register('page()', function (action) {
    if (action === undefined) {
      return this.page.info().page;
    }


    return this.iterator('table', function (settings) {
      _fnPageChange(settings, action);
    });
  });


  _api_register('page.info()', function (action) {
    if (this.context.length === 0) {
      return undefined;
    }

    var settings = this.context[0],
      start = settings._iDisplayStart,
      len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
      visRecords = settings.fnRecordsDisplay(),
      all = len === -1;
    return {
      "page": all ? 0 : Math.floor(start / len),
      "pages": all ? 1 : Math.ceil(visRecords / len),
      "start": start,
      "end": settings.fnDisplayEnd(),
      "length": len,
      "recordsTotal": settings.fnRecordsTotal(),
      "recordsDisplay": visRecords,
      "serverSide": _fnDataSource(settings) === 'ssp'
    };
  });



  _api_register('page.len()', function (len) {
    if (len === undefined) {
      return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined;
    }


    return this.iterator('table', function (settings) {
      _fnLengthChange(settings, len);
    });
  });

  var __reload = function __reload(settings, holdPosition, callback) {
    if (callback) {
      var api = new _Api2(settings);
      api.one('draw', function () {
        callback(api.ajax.json());
      });
    }

    if (_fnDataSource(settings) == 'ssp') {
      _fnReDraw(settings, holdPosition);
    } else {
      _fnProcessingDisplay(settings, true);


      var xhr = settings.jqXHR;

      if (xhr && xhr.readyState !== 4) {
        xhr.abort();
      }


      _fnBuildAjax(settings, [], function (json) {
        _fnClearTable(settings);

        var data = _fnAjaxDataSrc(settings, json);

        for (var i = 0, ien = data.length; i < ien; i++) {
          _fnAddData(settings, data[i]);
        }

        _fnReDraw(settings, holdPosition);

        _fnProcessingDisplay(settings, false);
      });
    }
  };


  _api_register('ajax.json()', function () {
    var ctx = this.context;

    if (ctx.length > 0) {
      return ctx[0].json;
    }

  });


  _api_register('ajax.params()', function () {
    var ctx = this.context;

    if (ctx.length > 0) {
      return ctx[0].oAjaxData;
    }

  });


  _api_register('ajax.reload()', function (callback, resetPaging) {
    return this.iterator('table', function (settings) {
      __reload(settings, resetPaging === false, callback);
    });
  });



  _api_register('ajax.url()', function (url) {
    var ctx = this.context;

    if (url === undefined) {
      if (ctx.length === 0) {
        return undefined;
      }

      ctx = ctx[0];
      return ctx.ajax ? $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource;
    }


    return this.iterator('table', function (settings) {
      if ($.isPlainObject(settings.ajax)) {
        settings.ajax.url = url;
      } else {
        settings.ajax = url;
      }

    });
  });


  _api_register('ajax.url().load()', function (callback, resetPaging) {
    return this.iterator('table', function (ctx) {
      __reload(ctx, resetPaging === false, callback);
    });
  });

  var _selector_run = function _selector_run(type, selector, selectFn, settings, opts) {
    var out = [],
      res,
      a,
      i,
      ien,
      j,
      jen,
      selectorType = _typeof(selector);


    if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {
      selector = [selector];
    }

    for (i = 0, ien = selector.length; i < ien; i++) {
      a = selector[i] && selector[i].split && !selector[i].match(/[\[\(:]/) ? selector[i].split(',') : [selector[i]];

      for (j = 0, jen = a.length; j < jen; j++) {
        res = selectFn(typeof a[j] === 'string' ? $.trim(a[j]) : a[j]);

        if (res && res.length) {
          out = out.concat(res);
        }
      }
    }


    var ext = _ext.selector[type];

    if (ext.length) {
      for (i = 0, ien = ext.length; i < ien; i++) {
        out = ext[i](settings, opts, out);
      }
    }

    return _unique(out);
  };

  var _selector_opts = function _selector_opts(opts) {
    if (!opts) {
      opts = {};
    }


    if (opts.filter && opts.search === undefined) {
      opts.search = opts.filter;
    }

    return $.extend({
      search: 'none',
      order: 'current',
      page: 'all'
    }, opts);
  };

  var _selector_first = function _selector_first(inst) {
    for (var i = 0, ien = inst.length; i < ien; i++) {
      if (inst[i].length > 0) {
        inst[0] = inst[i];
        inst[0].length = 1;
        inst.length = 1;
        inst.context = [inst.context[i]];
        return inst;
      }
    }


    inst.length = 0;
    return inst;
  };

  var _selector_row_indexes = function _selector_row_indexes(settings, opts) {
    var i,
      ien,
      tmp,
      a = [],
      displayFiltered = settings.aiDisplay,
      displayMaster = settings.aiDisplayMaster;
    var search = opts.search,
      order = opts.order,
      page = opts.page;

    if (_fnDataSource(settings) == 'ssp') {
      return search === 'removed' ? [] : _range(0, displayMaster.length);
    } else if (page == 'current') {
      for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {
        a.push(displayFiltered[i]);
      }
    } else if (order == 'current' || order == 'applied') {
      if (search == 'none') {
        a = displayMaster.slice();
      } else if (search == 'applied') {
        a = displayFiltered.slice();
      } else if (search == 'removed') {
        var displayFilteredMap = {};

        for (var i = 0, ien = displayFiltered.length; i < ien; i++) {
          displayFilteredMap[displayFiltered[i]] = null;
        }

        a = $.map(displayMaster, function (el) {
          return !displayFilteredMap.hasOwnProperty(el) ? el : null;
        });
      }
    } else if (order == 'index' || order == 'original') {
      for (i = 0, ien = settings.aoData.length; i < ien; i++) {
        if (search == 'none') {
          a.push(i);
        } else {
          tmp = $.inArray(i, displayFiltered);

          if (tmp === -1 && search == 'removed' || tmp >= 0 && search == 'applied') {
            a.push(i);
          }
        }
      }
    }

    return a;
  };


  var __row_selector = function __row_selector(settings, selector, opts) {
    var rows;

    var run = function run(sel) {
      var selInt = _intVal(sel);

      var i, ien;
      var aoData = settings.aoData;

      if (selInt !== null && !opts) {
        return [selInt];
      }

      if (!rows) {
        rows = _selector_row_indexes(settings, opts);
      }

      if (selInt !== null && $.inArray(selInt, rows) !== -1) {
        return [selInt];
      } else if (sel === null || sel === undefined || sel === '') {
        return rows;
      }


      if (typeof sel === 'function') {
        return $.map(rows, function (idx) {
          var row = aoData[idx];
          return sel(idx, row._aData, row.nTr) ? idx : null;
        });
      }


      if (sel.nodeName) {
        var rowIdx = sel._DT_RowIndex;

        var cellIdx = sel._DT_CellIndex;

        if (rowIdx !== undefined) {
          return aoData[rowIdx] && aoData[rowIdx].nTr === sel ? [rowIdx] : [];
        } else if (cellIdx) {
          return aoData[cellIdx.row] && aoData[cellIdx.row].nTr === sel ? [cellIdx.row] : [];
        } else {
          var host = $(sel).closest('*[data-dt-row]');
          return host.length ? [host.data('dt-row')] : [];
        }
      }


      if (typeof sel === 'string' && sel.charAt(0) === '#') {
        var rowObj = settings.aIds[sel.replace(/^#/, '')];

        if (rowObj !== undefined) {
          return [rowObj.idx];
        }

      }


      var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, 'nTr'));


      return $(nodes).filter(sel).map(function () {
        return this._DT_RowIndex;
      }).toArray();
    };

    return _selector_run('row', selector, run, settings, opts);
  };

  _api_register('rows()', function (selector, opts) {
    if (selector === undefined) {
      selector = '';
    } else if ($.isPlainObject(selector)) {
      opts = selector;
      selector = '';
    }

    opts = _selector_opts(opts);
    var inst = this.iterator('table', function (settings) {
      return __row_selector(settings, selector, opts);
    }, 1);

    inst.selector.rows = selector;
    inst.selector.opts = opts;
    return inst;
  });

  _api_register('rows().nodes()', function () {
    return this.iterator('row', function (settings, row) {
      return settings.aoData[row].nTr || undefined;
    }, 1);
  });

  _api_register('rows().data()', function () {
    return this.iterator(true, 'rows', function (settings, rows) {
      return _pluck_order(settings.aoData, rows, '_aData');
    }, 1);
  });

  _api_registerPlural('rows().cache()', 'row().cache()', function (type) {
    return this.iterator('row', function (settings, row) {
      var r = settings.aoData[row];
      return type === 'search' ? r._aFilterData : r._aSortData;
    }, 1);
  });

  _api_registerPlural('rows().invalidate()', 'row().invalidate()', function (src) {
    return this.iterator('row', function (settings, row) {
      _fnInvalidate(settings, row, src);
    });
  });

  _api_registerPlural('rows().indexes()', 'row().index()', function () {
    return this.iterator('row', function (settings, row) {
      return row;
    }, 1);
  });

  _api_registerPlural('rows().ids()', 'row().id()', function (hash) {
    var a = [];
    var context = this.context;

    for (var i = 0, ien = context.length; i < ien; i++) {
      for (var j = 0, jen = this[i].length; j < jen; j++) {
        var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);
        a.push((hash === true ? '#' : '') + id);
      }
    }

    return new _Api2(context, a);
  });

  _api_registerPlural('rows().remove()', 'row().remove()', function () {
    var that = this;
    this.iterator('row', function (settings, row, thatIdx) {
      var data = settings.aoData;
      var rowData = data[row];
      var i, ien, j, jen;
      var loopRow, loopCells;
      data.splice(row, 1);

      for (i = 0, ien = data.length; i < ien; i++) {
        loopRow = data[i];
        loopCells = loopRow.anCells;

        if (loopRow.nTr !== null) {
          loopRow.nTr._DT_RowIndex = i;
        }


        if (loopCells !== null) {
          for (j = 0, jen = loopCells.length; j < jen; j++) {
            loopCells[j]._DT_CellIndex.row = i;
          }
        }
      }


      _fnDeleteIndex(settings.aiDisplayMaster, row);

      _fnDeleteIndex(settings.aiDisplay, row);

      _fnDeleteIndex(that[thatIdx], row, false);


      if (settings._iRecordsDisplay > 0) {
        settings._iRecordsDisplay--;
      }


      _fnLengthOverflow(settings);


      var id = settings.rowIdFn(rowData._aData);

      if (id !== undefined) {
        delete settings.aIds[id];
      }
    });
    this.iterator('table', function (settings) {
      for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
        settings.aoData[i].idx = i;
      }
    });
    return this;
  });

  _api_register('rows.add()', function (rows) {
    var newRows = this.iterator('table', function (settings) {
      var row, i, ien;
      var out = [];

      for (i = 0, ien = rows.length; i < ien; i++) {
        row = rows[i];

        if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
          out.push(_fnAddTr(settings, row)[0]);
        } else {
          out.push(_fnAddData(settings, row));
        }
      }

      return out;
    }, 1);

    var modRows = this.rows(-1);
    modRows.pop();
    $.merge(modRows, newRows);
    return modRows;
  });


  _api_register('row()', function (selector, opts) {
    return _selector_first(this.rows(selector, opts));
  });

  _api_register('row().data()', function (data) {
    var ctx = this.context;

    if (data === undefined) {
      return ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined;
    }


    var row = ctx[0].aoData[this[0]];
    row._aData = data;

    if ($.isArray(data) && row.nTr.id) {
      _fnSetObjectDataFn(ctx[0].rowId)(data, row.nTr.id);
    }


    _fnInvalidate(ctx[0], this[0], 'data');

    return this;
  });

  _api_register('row().node()', function () {
    var ctx = this.context;
    return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;
  });

  _api_register('row.add()', function (row) {
    if (row instanceof $ && row.length) {
      row = row[0];
    }

    var rows = this.iterator('table', function (settings) {
      if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
        return _fnAddTr(settings, row)[0];
      }

      return _fnAddData(settings, row);
    });

    return this.row(rows[0]);
  });

  var __details_add = function __details_add(ctx, row, data, klass) {
    var rows = [];

    var addRow = function addRow(r, k) {
      if ($.isArray(r) || r instanceof $) {
        for (var i = 0, ien = r.length; i < ien; i++) {
          addRow(r[i], k);
        }

        return;
      }


      if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {
        rows.push(r);
      } else {
        var created = $('<tr><td/></tr>').addClass(k);
        $('td', created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);
        rows.push(created[0]);
      }
    };

    addRow(data, klass);

    if (row._details) {
      row._details.detach();
    }

    row._details = $(rows);

    if (row._detailsShow) {
      row._details.insertAfter(row.nTr);
    }
  };

  var __details_remove = function __details_remove(api, idx) {
    var ctx = api.context;

    if (ctx.length) {
      var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];

      if (row && row._details) {
        row._details.remove();

        row._detailsShow = undefined;
        row._details = undefined;
      }
    }
  };

  var __details_display = function __details_display(api, show) {
    var ctx = api.context;

    if (ctx.length && api.length) {
      var row = ctx[0].aoData[api[0]];

      if (row._details) {
        row._detailsShow = show;

        if (show) {
          row._details.insertAfter(row.nTr);
        } else {
          row._details.detach();
        }

        __details_events(ctx[0]);
      }
    }
  };

  var __details_events = function __details_events(settings) {
    var api = new _Api2(settings);
    var namespace = '.dt.DT_details';
    var drawEvent = 'draw' + namespace;
    var colvisEvent = 'column-visibility' + namespace;
    var destroyEvent = 'destroy' + namespace;
    var data = settings.aoData;
    api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);

    if (_pluck(data, '_details').length > 0) {
      api.on(drawEvent, function (e, ctx) {
        if (settings !== ctx) {
          return;
        }

        api.rows({
          page: 'current'
        }).eq(0).each(function (idx) {
          var row = data[idx];

          if (row._detailsShow) {
            row._details.insertAfter(row.nTr);
          }
        });
      });

      api.on(colvisEvent, function (e, ctx, idx, vis) {
        if (settings !== ctx) {
          return;
        }


        var row,
          visible = _fnVisbleColumns(ctx);

        for (var i = 0, ien = data.length; i < ien; i++) {
          row = data[i];

          if (row._details) {
            row._details.children('td[colspan]').attr('colspan', visible);
          }
        }
      });

      api.on(destroyEvent, function (e, ctx) {
        if (settings !== ctx) {
          return;
        }

        for (var i = 0, ien = data.length; i < ien; i++) {
          if (data[i]._details) {
            __details_remove(api, i);
          }
        }
      });
    }
  };


  var _emp = '';

  var _child_obj = _emp + 'row().child';

  var _child_mth = _child_obj + '()';


  _api_register(_child_mth, function (data, klass) {
    var ctx = this.context;

    if (data === undefined) {
      return ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined;
    } else if (data === true) {
      this.child.show();
    } else if (data === false) {
      __details_remove(this);
    } else if (ctx.length && this.length) {
      __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);
    }

    return this;
  });

  _api_register([_child_obj + '.show()', _child_mth + '.show()'
  ], function (show) {
    __details_display(this, true);

    return this;
  });

  _api_register([_child_obj + '.hide()', _child_mth + '.hide()'
  ], function () {
    __details_display(this, false);

    return this;
  });

  _api_register([_child_obj + '.remove()', _child_mth + '.remove()'
  ], function () {
    __details_remove(this);

    return this;
  });

  _api_register(_child_obj + '.isShown()', function () {
    var ctx = this.context;

    if (ctx.length && this.length) {
      return ctx[0].aoData[this[0]]._detailsShow || false;
    }

    return false;
  });


  var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;

  var __columnData = function __columnData(settings, column, r1, r2, rows) {
    var a = [];

    for (var row = 0, ien = rows.length; row < ien; row++) {
      a.push(_fnGetCellData(settings, rows[row], column));
    }

    return a;
  };

  var __column_selector = function __column_selector(settings, selector, opts) {
    var columns = settings.aoColumns,
      names = _pluck(columns, 'sName'),
      nodes = _pluck(columns, 'nTh');

    var run = function run(s) {
      var selInt = _intVal(s);


      if (s === '') {
        return _range(columns.length);
      }


      if (selInt !== null) {
        return [selInt >= 0 ? selInt :
          columns.length + selInt
        ];
      }


      if (typeof s === 'function') {
        var rows = _selector_row_indexes(settings, opts);

        return $.map(columns, function (col, idx) {
          return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx]) ? idx : null;
        });
      }


      var match = typeof s === 'string' ? s.match(__re_column_selector) : '';

      if (match) {
        switch (match[2]) {
          case 'visIdx':
          case 'visible':
            var idx = parseInt(match[1], 10);

            if (idx < 0) {
              var visColumns = $.map(columns, function (col, i) {
                return col.bVisible ? i : null;
              });
              return [visColumns[visColumns.length + idx]];
            }


            return [_fnVisibleToColumnIndex(settings, idx)];

          case 'name':
            return $.map(names, function (name, i) {
              return name === match[1] ? i : null;
            });

          default:
            return [];
        }
      }


      if (s.nodeName && s._DT_CellIndex) {
        return [s._DT_CellIndex.column];
      }


      var jqResult = $(nodes).filter(s).map(function () {
        return $.inArray(this, nodes);
      }).toArray();

      if (jqResult.length || !s.nodeName) {
        return jqResult;
      }


      var host = $(s).closest('*[data-dt-column]');
      return host.length ? [host.data('dt-column')] : [];
    };

    return _selector_run('column', selector, run, settings, opts);
  };

  var __setColumnVis = function __setColumnVis(settings, column, vis) {
    var cols = settings.aoColumns,
      col = cols[column],
      data = settings.aoData,
      row,
      cells,
      i,
      ien,
      tr;

    if (vis === undefined) {
      return col.bVisible;
    }


    if (col.bVisible === vis) {
      return;
    }

    if (vis) {
      var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);

      for (i = 0, ien = data.length; i < ien; i++) {
        tr = data[i].nTr;
        cells = data[i].anCells;

        if (tr) {
          tr.insertBefore(cells[column], cells[insertBefore] || null);
        }
      }
    } else {
      $(_pluck(settings.aoData, 'anCells', column)).detach();
    }


    col.bVisible = vis;

    _fnDrawHead(settings, settings.aoHeader);

    _fnDrawHead(settings, settings.aoFooter);


    if (!settings.aiDisplay.length) {
      $(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));
    }

    _fnSaveState(settings);
  };

  _api_register('columns()', function (selector, opts) {
    if (selector === undefined) {
      selector = '';
    } else if ($.isPlainObject(selector)) {
      opts = selector;
      selector = '';
    }

    opts = _selector_opts(opts);
    var inst = this.iterator('table', function (settings) {
      return __column_selector(settings, selector, opts);
    }, 1);

    inst.selector.cols = selector;
    inst.selector.opts = opts;
    return inst;
  });

  _api_registerPlural('columns().header()', 'column().header()', function (selector, opts) {
    return this.iterator('column', function (settings, column) {
      return settings.aoColumns[column].nTh;
    }, 1);
  });

  _api_registerPlural('columns().footer()', 'column().footer()', function (selector, opts) {
    return this.iterator('column', function (settings, column) {
      return settings.aoColumns[column].nTf;
    }, 1);
  });

  _api_registerPlural('columns().data()', 'column().data()', function () {
    return this.iterator('column-rows', __columnData, 1);
  });

  _api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function () {
    return this.iterator('column', function (settings, column) {
      return settings.aoColumns[column].mData;
    }, 1);
  });

  _api_registerPlural('columns().cache()', 'column().cache()', function (type) {
    return this.iterator('column-rows', function (settings, column, i, j, rows) {
      return _pluck_order(settings.aoData, rows, type === 'search' ? '_aFilterData' : '_aSortData', column);
    }, 1);
  });

  _api_registerPlural('columns().nodes()', 'column().nodes()', function () {
    return this.iterator('column-rows', function (settings, column, i, j, rows) {
      return _pluck_order(settings.aoData, rows, 'anCells', column);
    }, 1);
  });

  _api_registerPlural('columns().visible()', 'column().visible()', function (vis, calc) {
    var ret = this.iterator('column', function (settings, column) {
      if (vis === undefined) {
        return settings.aoColumns[column].bVisible;
      }


      __setColumnVis(settings, column, vis);
    });

    if (vis !== undefined) {
      this.iterator('column', function (settings, column) {
        _fnCallbackFire(settings, null, 'column-visibility', [settings, column, vis, calc]);
      });

      if (calc === undefined || calc) {
        this.columns.adjust();
      }
    }

    return ret;
  });

  _api_registerPlural('columns().indexes()', 'column().index()', function (type) {
    return this.iterator('column', function (settings, column) {
      return type === 'visible' ? _fnColumnIndexToVisible(settings, column) : column;
    }, 1);
  });

  _api_register('columns.adjust()', function () {
    return this.iterator('table', function (settings) {
      _fnAdjustColumnSizing(settings);
    }, 1);
  });

  _api_register('column.index()', function (type, idx) {
    if (this.context.length !== 0) {
      var ctx = this.context[0];

      if (type === 'fromVisible' || type === 'toData') {
        return _fnVisibleToColumnIndex(ctx, idx);
      } else if (type === 'fromData' || type === 'toVisible') {
        return _fnColumnIndexToVisible(ctx, idx);
      }
    }
  });

  _api_register('column()', function (selector, opts) {
    return _selector_first(this.columns(selector, opts));
  });

  var __cell_selector = function __cell_selector(settings, selector, opts) {
    var data = settings.aoData;

    var rows = _selector_row_indexes(settings, opts);

    var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));

    var allCells = $([].concat.apply([], cells));
    var row;
    var columns = settings.aoColumns.length;
    var a, i, ien, j, o, host;

    var run = function run(s) {
      var fnSelector = typeof s === 'function';

      if (s === null || s === undefined || fnSelector) {
        a = [];

        for (i = 0, ien = rows.length; i < ien; i++) {
          row = rows[i];

          for (j = 0; j < columns; j++) {
            o = {
              row: row,
              column: j
            };

            if (fnSelector) {
              host = data[row];

              if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {
                a.push(o);
              }
            } else {
              a.push(o);
            }
          }
        }

        return a;
      }


      if ($.isPlainObject(s)) {
        return s.column !== undefined && s.row !== undefined && $.inArray(s.row, rows) !== -1 ? [s] : [];
      }


      var jqResult = allCells.filter(s).map(function (i, el) {
        return {
          row: el._DT_CellIndex.row,
          column: el._DT_CellIndex.column
        };
      }).toArray();

      if (jqResult.length || !s.nodeName) {
        return jqResult;
      }


      host = $(s).closest('*[data-dt-row]');
      return host.length ? [{
        row: host.data('dt-row'),
        column: host.data('dt-column')
      }] : [];
    };

    return _selector_run('cell', selector, run, settings, opts);
  };

  _api_register('cells()', function (rowSelector, columnSelector, opts) {
    if ($.isPlainObject(rowSelector)) {
      if (rowSelector.row === undefined) {
        opts = rowSelector;
        rowSelector = null;
      } else {
        opts = columnSelector;
        columnSelector = null;
      }
    }

    if ($.isPlainObject(columnSelector)) {
      opts = columnSelector;
      columnSelector = null;
    }


    if (columnSelector === null || columnSelector === undefined) {
      return this.iterator('table', function (settings) {
        return __cell_selector(settings, rowSelector, _selector_opts(opts));
      });
    }


    var columns = this.columns(columnSelector);
    var rows = this.rows(rowSelector);
    var a, i, ien, j, jen;
    this.iterator('table', function (settings, idx) {
      a = [];

      for (i = 0, ien = rows[idx].length; i < ien; i++) {
        for (j = 0, jen = columns[idx].length; j < jen; j++) {
          a.push({
            row: rows[idx][i],
            column: columns[idx][j]
          });
        }
      }
    }, 1);

    var cells = this.cells(a, opts);
    $.extend(cells.selector, {
      cols: columnSelector,
      rows: rowSelector,
      opts: opts
    });
    return cells;
  });

  _api_registerPlural('cells().nodes()', 'cell().node()', function () {
    return this.iterator('cell', function (settings, row, column) {
      var data = settings.aoData[row];
      return data && data.anCells ? data.anCells[column] : undefined;
    }, 1);
  });

  _api_register('cells().data()', function () {
    return this.iterator('cell', function (settings, row, column) {
      return _fnGetCellData(settings, row, column);
    }, 1);
  });

  _api_registerPlural('cells().cache()', 'cell().cache()', function (type) {
    type = type === 'search' ? '_aFilterData' : '_aSortData';
    return this.iterator('cell', function (settings, row, column) {
      return settings.aoData[row][type][column];
    }, 1);
  });

  _api_registerPlural('cells().render()', 'cell().render()', function (type) {
    return this.iterator('cell', function (settings, row, column) {
      return _fnGetCellData(settings, row, column, type);
    }, 1);
  });

  _api_registerPlural('cells().indexes()', 'cell().index()', function () {
    return this.iterator('cell', function (settings, row, column) {
      return {
        row: row,
        column: column,
        columnVisible: _fnColumnIndexToVisible(settings, column)
      };
    }, 1);
  });

  _api_registerPlural('cells().invalidate()', 'cell().invalidate()', function (src) {
    return this.iterator('cell', function (settings, row, column) {
      _fnInvalidate(settings, row, src, column);
    });
  });

  _api_register('cell()', function (rowSelector, columnSelector, opts) {
    return _selector_first(this.cells(rowSelector, columnSelector, opts));
  });

  _api_register('cell().data()', function (data) {
    var ctx = this.context;
    var cell = this[0];

    if (data === undefined) {
      return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined;
    }


    _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);

    _fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);

    return this;
  });





  _api_register('order()', function (order, dir) {
    var ctx = this.context;

    if (order === undefined) {
      return ctx.length !== 0 ? ctx[0].aaSorting : undefined;
    }


    if (typeof order === 'number') {
      order = [[order, dir]];
    } else if (order.length && !$.isArray(order[0])) {
      order = Array.prototype.slice.call(arguments);
    }


    return this.iterator('table', function (settings) {
      settings.aaSorting = order.slice();
    });
  });


  _api_register('order.listener()', function (node, column, callback) {
    return this.iterator('table', function (settings) {
      _fnSortAttachListener(settings, node, column, callback);
    });
  });

  _api_register('order.fixed()', function (set) {
    if (!set) {
      var ctx = this.context;
      var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;
      return $.isArray(fixed) ? {
        pre: fixed
      } : fixed;
    }

    return this.iterator('table', function (settings) {
      settings.aaSortingFixed = $.extend(true, {}, set);
    });
  });


  _api_register(['columns().order()', 'column().order()'], function (dir) {
    var that = this;
    return this.iterator('table', function (settings, i) {
      var sort = [];
      $.each(that[i], function (j, col) {
        sort.push([col, dir]);
      });
      settings.aaSorting = sort;
    });
  });

  _api_register('search()', function (input, regex, smart, caseInsen) {
    var ctx = this.context;

    if (input === undefined) {
      return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined;
    }


    return this.iterator('table', function (settings) {
      if (!settings.oFeatures.bFilter) {
        return;
      }

      _fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {
        "sSearch": input + "",
        "bRegex": regex === null ? false : regex,
        "bSmart": smart === null ? true : smart,
        "bCaseInsensitive": caseInsen === null ? true : caseInsen
      }), 1);
    });
  });

  _api_registerPlural('columns().search()', 'column().search()', function (input, regex, smart, caseInsen) {
    return this.iterator('column', function (settings, column) {
      var preSearch = settings.aoPreSearchCols;

      if (input === undefined) {
        return preSearch[column].sSearch;
      }


      if (!settings.oFeatures.bFilter) {
        return;
      }

      $.extend(preSearch[column], {
        "sSearch": input + "",
        "bRegex": regex === null ? false : regex,
        "bSmart": smart === null ? true : smart,
        "bCaseInsensitive": caseInsen === null ? true : caseInsen
      });

      _fnFilterComplete(settings, settings.oPreviousSearch, 1);
    });
  });


  _api_register('state()', function () {
    return this.context.length ? this.context[0].oSavedState : null;
  });

  _api_register('state.clear()', function () {
    return this.iterator('table', function (settings) {
      settings.fnStateSaveCallback.call(settings.oInstance, settings, {});
    });
  });

  _api_register('state.loaded()', function () {
    return this.context.length ? this.context[0].oLoadedState : null;
  });

  _api_register('state.save()', function () {
    return this.iterator('table', function (settings) {
      _fnSaveState(settings);
    });
  });


  DataTable.versionCheck = DataTable.fnVersionCheck = function (version) {
    var aThis = DataTable.version.split('.');
    var aThat = version.split('.');
    var iThis, iThat;

    for (var i = 0, iLen = aThat.length; i < iLen; i++) {
      iThis = parseInt(aThis[i], 10) || 0;
      iThat = parseInt(aThat[i], 10) || 0;

      if (iThis === iThat) {
        continue;
      }


      return iThis > iThat;
    }

    return true;
  };


  DataTable.isDataTable = DataTable.fnIsDataTable = function (table) {
    var t = $(table).get(0);
    var is = false;

    if (table instanceof DataTable.Api) {
      return true;
    }

    $.each(DataTable.settings, function (i, o) {
      var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
      var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;

      if (o.nTable === t || head === t || foot === t) {
        is = true;
      }
    });
    return is;
  };


  DataTable.tables = DataTable.fnTables = function (visible) {
    var api = false;

    if ($.isPlainObject(visible)) {
      api = visible.api;
      visible = visible.visible;
    }

    var a = $.map(DataTable.settings, function (o) {
      if (!visible || visible && $(o.nTable).is(':visible')) {
        return o.nTable;
      }
    });
    return api ? new _Api2(a) : a;
  };


  DataTable.camelToHungarian = _fnCamelToHungarian;

  _api_register('$()', function (selector, opts) {
    var rows = this.rows(opts).nodes(),
      jqRows = $(rows);
    return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));
  });


  $.each(['on', 'one', 'off'], function (i, key) {
    _api_register(key + '()', function () {
      var args = Array.prototype.slice.call(arguments);

      args[0] = $.map(args[0].split(/\s/), function (e) {
        return !e.match(/\.dt\b/) ? e + '.dt' : e;
      }).join(' ');
      var inst = $(this.tables().nodes());
      inst[key].apply(inst, args);
      return this;
    });
  });

  _api_register('clear()', function () {
    return this.iterator('table', function (settings) {
      _fnClearTable(settings);
    });
  });

  _api_register('settings()', function () {
    return new _Api2(this.context, this.context);
  });

  _api_register('init()', function () {
    var ctx = this.context;
    return ctx.length ? ctx[0].oInit : null;
  });

  _api_register('data()', function () {
    return this.iterator('table', function (settings) {
      return _pluck(settings.aoData, '_aData');
    }).flatten();
  });

  _api_register('destroy()', function (remove) {
    remove = remove || false;
    return this.iterator('table', function (settings) {
      var orig = settings.nTableWrapper.parentNode;
      var classes = settings.oClasses;
      var table = settings.nTable;
      var tbody = settings.nTBody;
      var thead = settings.nTHead;
      var tfoot = settings.nTFoot;
      var jqTable = $(table);
      var jqTbody = $(tbody);
      var jqWrapper = $(settings.nTableWrapper);
      var rows = $.map(settings.aoData, function (r) {
        return r.nTr;
      });
      var i, ien;

      settings.bDestroying = true;

      _fnCallbackFire(settings, "aoDestroyCallback", "destroy", [settings]);


      if (!remove) {
        new _Api2(settings).columns().visible(true);
      }


      jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
      $(window).off('.DT-' + settings.sInstance);

      if (table != thead.parentNode) {
        jqTable.children('thead').detach();
        jqTable.append(thead);
      }

      if (tfoot && table != tfoot.parentNode) {
        jqTable.children('tfoot').detach();
        jqTable.append(tfoot);
      }

      settings.aaSorting = [];
      settings.aaSortingFixed = [];

      _fnSortingClasses(settings);

      $(rows).removeClass(settings.asStripeClasses.join(' '));
      $('th, td', thead).removeClass(classes.sSortable + ' ' + classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone);

      jqTbody.children().detach();
      jqTbody.append(rows);

      var removedMethod = remove ? 'remove' : 'detach';
      jqTable[removedMethod]();
      jqWrapper[removedMethod]();

      if (!remove && orig) {
        orig.insertBefore(table, settings.nTableReinsertBefore);

        jqTable.css('width', settings.sDestroyWidth).removeClass(classes.sTable);

        ien = settings.asDestroyStripes.length;

        if (ien) {
          jqTbody.children().each(function (i) {
            $(this).addClass(settings.asDestroyStripes[i % ien]);
          });
        }
      }


      var idx = $.inArray(settings, DataTable.settings);

      if (idx !== -1) {
        DataTable.settings.splice(idx, 1);
      }
    });
  });


  $.each(['column', 'row', 'cell'], function (i, type) {
    _api_register(type + 's().every()', function (fn) {
      var opts = this.selector.opts;
      var api = this;
      return this.iterator(type, function (settings, arg1, arg2, arg3, arg4) {
        fn.call(api[type](arg1, type === 'cell' ? arg2 : opts, type === 'cell' ? opts : undefined), arg1, arg2, arg3, arg4);
      });
    });
  });

  _api_register('i18n()', function (token, def, plural) {
    var ctx = this.context[0];

    var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);

    if (resolved === undefined) {
      resolved = def;
    }

    if (plural !== undefined && $.isPlainObject(resolved)) {
      resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._;
    }

    return resolved.replace('%d', plural);
  });


  DataTable.version = "1.10.18";

  DataTable.settings = [];

  DataTable.models = {};

  DataTable.models.oSearch = {
    "bCaseInsensitive": true,

    "sSearch": "",

    "bRegex": false,

    "bSmart": true
  };

  DataTable.models.oRow = {
    "nTr": null,

    "anCells": null,

    "_aData": [],

    "_aSortData": null,

    "_aFilterData": null,

    "_sFilterRow": null,

    "_sRowStripe": "",

    "src": null,

    "idx": -1
  };

  DataTable.models.oColumn = {
    "idx": null,

    "aDataSort": null,

    "asSorting": null,

    "bSearchable": null,

    "bSortable": null,

    "bVisible": null,

    "_sManualType": null,

    "_bAttrSrc": false,

    "fnCreatedCell": null,

    "fnGetData": null,

    "fnSetData": null,

    "mData": null,

    "mRender": null,

    "nTh": null,

    "nTf": null,

    "sClass": null,

    "sContentPadding": null,

    "sDefaultContent": null,

    "sName": null,

    "sSortDataType": 'std',

    "sSortingClass": null,

    "sSortingClassJUI": null,

    "sTitle": null,

    "sType": null,

    "sWidth": null,

    "sWidthOrig": null
  };


  DataTable.defaults = {
    "aaData": null,

    "aaSorting": [[0, 'asc']],

    "aaSortingFixed": [],

    "ajax": null,

    "aLengthMenu": [10, 25, 50, 100],

    "aoColumns": null,

    "aoColumnDefs": null,

    "aoSearchCols": [],

    "asStripeClasses": null,

    "bAutoWidth": true,

    "bDeferRender": false,

    "bDestroy": false,

    "bFilter": true,

    "bInfo": true,

    "bLengthChange": true,

    "bPaginate": true,

    "bProcessing": false,

    "bRetrieve": false,

    "bScrollCollapse": false,

    "bServerSide": false,

    "bSort": true,

    "bSortMulti": true,

    "bSortCellsTop": false,

    "bSortClasses": true,

    "bStateSave": false,

    "fnCreatedRow": null,

    "fnDrawCallback": null,

    "fnFooterCallback": null,

    "fnFormatNumber": function fnFormatNumber(toFormat) {
      return toFormat.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
    },

    "fnHeaderCallback": null,

    "fnInfoCallback": null,

    "fnInitComplete": null,

    "fnPreDrawCallback": null,

    "fnRowCallback": null,

    "fnServerData": null,

    "fnServerParams": null,

    "fnStateLoadCallback": function fnStateLoadCallback(settings) {
      try {
        return JSON.parse((settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem('DataTables_' + settings.sInstance + '_' + location.pathname));
      } catch (e) { }
    },

    "fnStateLoadParams": null,

    "fnStateLoaded": null,

    "fnStateSaveCallback": function fnStateSaveCallback(settings, data) {
      try {
        (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem('DataTables_' + settings.sInstance + '_' + location.pathname, JSON.stringify(data));
      } catch (e) { }
    },

    "fnStateSaveParams": null,

    "iStateDuration": 7200,

    "iDeferLoading": null,

    "iDisplayLength": 10,

    "iDisplayStart": 0,

    "iTabIndex": 0,

    "oClasses": {},

    "oLanguage": {
      "oAria": {
        "sSortAscending": ": activate to sort column ascending",

        "sSortDescending": ": activate to sort column descending"
      },

      "oPaginate": {
        "sFirst": "First",

        "sLast": "Last",

        "sNext": "Next",

        "sPrevious": "Previous"
      },

      "sEmptyTable": "No data available in table",

      "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",

      "sInfoEmpty": "Showing 0 to 0 of 0 entries",

      "sInfoFiltered": "(filtered from _MAX_ total entries)",

      "sInfoPostFix": "",

      "sDecimal": "",

      "sThousands": ",",

      "sLengthMenu": "Show _MENU_ entries",

      "sLoadingRecords": "Loading...",

      "sProcessing": "Processing...",

      "sSearch": "Search:",

      "sSearchPlaceholder": "",

      "sUrl": "",

      "sZeroRecords": "No matching records found"
    },

    "oSearch": $.extend({}, DataTable.models.oSearch),

    "sAjaxDataProp": "data",

    "sAjaxSource": null,

    "sDom": "lfrtip",

    "searchDelay": null,

    "sPaginationType": "simple_numbers",

    "sScrollX": "",

    "sScrollXInner": "",

    "sScrollY": "",

    "sServerMethod": "GET",

    "renderer": null,

    "rowId": "DT_RowId"
  };

  _fnHungarianMap(DataTable.defaults);



  DataTable.defaults.column = {
    "aDataSort": null,
    "iDataSort": -1,

    "asSorting": ['asc', 'desc'],

    "bSearchable": true,

    "bSortable": true,

    "bVisible": true,

    "fnCreatedCell": null,


    "mData": null,

    "mRender": null,

    "sCellType": "td",

    "sClass": "",

    "sContentPadding": "",

    "sDefaultContent": null,

    "sName": "",

    "sSortDataType": "std",

    "sTitle": null,

    "sType": null,

    "sWidth": null
  };

  _fnHungarianMap(DataTable.defaults.column);


  DataTable.models.oSettings = {
    "oFeatures": {
      "bAutoWidth": null,

      "bDeferRender": null,

      "bFilter": null,

      "bInfo": null,

      "bLengthChange": null,

      "bPaginate": null,

      "bProcessing": null,

      "bServerSide": null,

      "bSort": null,

      "bSortMulti": null,

      "bSortClasses": null,

      "bStateSave": null
    },

    "oScroll": {
      "bCollapse": null,

      "iBarWidth": 0,

      "sX": null,

      "sXInner": null,

      "sY": null
    },

    "oLanguage": {
      "fnInfoCallback": null
    },

    "oBrowser": {
      "bScrollOversize": false,

      "bScrollbarLeft": false,

      "bBounding": false,

      "barWidth": 0
    },
    "ajax": null,

    "aanFeatures": [],

    "aoData": [],

    "aiDisplay": [],

    "aiDisplayMaster": [],

    "aIds": {},

    "aoColumns": [],

    "aoHeader": [],

    "aoFooter": [],

    "oPreviousSearch": {},

    "aoPreSearchCols": [],

    "aaSorting": null,

    "aaSortingFixed": [],

    "asStripeClasses": null,

    "asDestroyStripes": [],

    "sDestroyWidth": 0,

    "aoRowCallback": [],

    "aoHeaderCallback": [],

    "aoFooterCallback": [],

    "aoDrawCallback": [],

    "aoRowCreatedCallback": [],

    "aoPreDrawCallback": [],

    "aoInitComplete": [],

    "aoStateSaveParams": [],

    "aoStateLoadParams": [],

    "aoStateLoaded": [],

    "sTableId": "",

    "nTable": null,

    "nTHead": null,

    "nTFoot": null,

    "nTBody": null,

    "nTableWrapper": null,

    "bDeferLoading": false,

    "bInitialised": false,

    "aoOpenRows": [],

    "sDom": null,

    "searchDelay": null,

    "sPaginationType": "two_button",

    "iStateDuration": 0,

    "aoStateSave": [],

    "aoStateLoad": [],

    "oSavedState": null,

    "oLoadedState": null,

    "sAjaxSource": null,

    "sAjaxDataProp": null,

    "bAjaxDataGet": true,

    "jqXHR": null,

    "json": undefined,

    "oAjaxData": undefined,

    "fnServerData": null,

    "aoServerParams": [],

    "sServerMethod": null,

    "fnFormatNumber": null,

    "aLengthMenu": null,

    "iDraw": 0,

    "bDrawing": false,

    "iDrawError": -1,

    "_iDisplayLength": 10,

    "_iDisplayStart": 0,

    "_iRecordsTotal": 0,

    "_iRecordsDisplay": 0,

    "oClasses": {},

    "bFiltered": false,

    "bSorted": false,

    "bSortCellsTop": null,

    "oInit": null,

    "aoDestroyCallback": [],

    "fnRecordsTotal": function fnRecordsTotal() {
      return _fnDataSource(this) == 'ssp' ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;
    },

    "fnRecordsDisplay": function fnRecordsDisplay() {
      return _fnDataSource(this) == 'ssp' ? this._iRecordsDisplay * 1 : this.aiDisplay.length;
    },

    "fnDisplayEnd": function fnDisplayEnd() {
      var len = this._iDisplayLength,
        start = this._iDisplayStart,
        calc = start + len,
        records = this.aiDisplay.length,
        features = this.oFeatures,
        paginate = features.bPaginate;

      if (features.bServerSide) {
        return paginate === false || len === -1 ? start + records : Math.min(start + len, this._iRecordsDisplay);
      } else {
        return !paginate || calc > records || len === -1 ? records : calc;
      }
    },

    "oInstance": null,

    "sInstance": null,

    "iTabIndex": 0,

    "nScrollHead": null,

    "nScrollFoot": null,

    "aLastSort": [],

    "oPlugins": {},

    "rowIdFn": null,

    "rowId": null
  };


  DataTable.ext = _ext = {
    buttons: {},

    classes: {},

    build: "dt/dt-1.10.18",

    errMode: "alert",

    feature: [],

    search: [],

    selector: {
      cell: [],
      column: [],
      row: []
    },

    internal: {},

    legacy: {
      ajax: null
    },

    pager: {},
    renderer: {
      pageButton: {},
      header: {}
    },

    order: {},

    type: {
      detect: [],

      search: {},

      order: {}
    },

    _unique: 0,

    fnVersionCheck: DataTable.fnVersionCheck,

    iApiIndex: 0,

    oJUIClasses: {},

    sVersion: DataTable.version
  };

  $.extend(_ext, {
    afnFiltering: _ext.search,
    aTypes: _ext.type.detect,
    ofnSearch: _ext.type.search,
    oSort: _ext.type.order,
    afnSortData: _ext.order,
    aoFeatures: _ext.feature,
    oApi: _ext.internal,
    oStdClasses: _ext.classes,
    oPagination: _ext.pager
  });
  $.extend(DataTable.ext.classes, {
    "sTable": "dataTable",
    "sNoFooter": "no-footer",

    "sPageButton": "paginate_button",
    "sPageButtonActive": "current",
    "sPageButtonDisabled": "disabled",

    "sStripeOdd": "odd",
    "sStripeEven": "even",

    "sRowEmpty": "dataTables_empty",

    "sWrapper": "dataTables_wrapper",
    "sFilter": "dataTables_filter",
    "sInfo": "dataTables_info",
    "sPaging": "dataTables_paginate paging_",

    "sLength": "dataTables_length",
    "sProcessing": "dataTables_processing",

    "sSortAsc": "sorting_asc",
    "sSortDesc": "sorting_desc",
    "sSortable": "sorting",

    "sSortableAsc": "sorting_asc_disabled",
    "sSortableDesc": "sorting_desc_disabled",
    "sSortableNone": "sorting_disabled",
    "sSortColumn": "sorting_",


    "sFilterInput": "",

    "sLengthSelect": "",

    "sScrollWrapper": "dataTables_scroll",
    "sScrollHead": "dataTables_scrollHead",
    "sScrollHeadInner": "dataTables_scrollHeadInner",
    "sScrollBody": "dataTables_scrollBody",
    "sScrollFoot": "dataTables_scrollFoot",
    "sScrollFootInner": "dataTables_scrollFootInner",

    "sHeaderTH": "",
    "sFooterTH": "",
    "sSortJUIAsc": "",
    "sSortJUIDesc": "",
    "sSortJUI": "",
    "sSortJUIAscAllowed": "",
    "sSortJUIDescAllowed": "",
    "sSortJUIWrapper": "",
    "sSortIcon": "",
    "sJUIHeader": "",
    "sJUIFooter": ""
  });
  var extPagination = DataTable.ext.pager;

  function _numbers(page, pages) {
    var numbers = [],
      buttons = extPagination.numbers_length,
      half = Math.floor(buttons / 2),
      i = 1;

    if (pages <= buttons) {
      numbers = _range(0, pages);
    } else if (page <= half) {
      numbers = _range(0, buttons - 2);
      numbers.push('ellipsis');
      numbers.push(pages - 1);
    } else if (page >= pages - 1 - half) {
      numbers = _range(pages - (buttons - 2), pages);
      numbers.splice(0, 0, 'ellipsis');

      numbers.splice(0, 0, 0);
    } else {
      numbers = _range(page - half + 2, page + half - 1);
      numbers.push('ellipsis');
      numbers.push(pages - 1);
      numbers.splice(0, 0, 'ellipsis');
      numbers.splice(0, 0, 0);
    }

    numbers.DT_el = 'span';
    return numbers;
  }

  $.extend(extPagination, {
    simple: function simple(page, pages) {
      return ['previous', 'next'];
    },
    full: function full(page, pages) {
      return ['first', 'previous', 'next', 'last'];
    },
    numbers: function numbers(page, pages) {
      return [_numbers(page, pages)];
    },
    simple_numbers: function simple_numbers(page, pages) {
      return ['previous', _numbers(page, pages), 'next'];
    },
    full_numbers: function full_numbers(page, pages) {
      return ['first', 'previous', _numbers(page, pages), 'next', 'last'];
    },
    first_last_numbers: function first_last_numbers(page, pages) {
      return ['first', _numbers(page, pages), 'last'];
    },
    _numbers: _numbers,
    numbers_length: 7
  });
  $.extend(true, DataTable.ext.renderer, {
    pageButton: {
      _: function _(settings, host, idx, buttons, page, pages) {
        var classes = settings.oClasses;
        var lang = settings.oLanguage.oPaginate;
        var aria = settings.oLanguage.oAria.paginate || {};
        var btnDisplay,
          btnClass,
          counter = 0;

        var attach = function attach(container, buttons) {
          var i, ien, node, button;

          var clickHandler = function clickHandler(e) {
            _fnPageChange(settings, e.data.action, true);
          };

          for (i = 0, ien = buttons.length; i < ien; i++) {
            button = buttons[i];

            if ($.isArray(button)) {
              var inner = $('<' + (button.DT_el || 'div') + '/>').appendTo(container);
              attach(inner, button);
            } else {
              btnDisplay = null;
              btnClass = '';

              switch (button) {
                case 'ellipsis':
                  container.append('<span class="ellipsis">&#x2026;</span>');
                  break;

                case 'first':
                  btnDisplay = lang.sFirst;
                  btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
                  break;

                case 'previous':
                  btnDisplay = lang.sPrevious;
                  btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
                  break;

                case 'next':
                  btnDisplay = lang.sNext;
                  btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
                  break;

                case 'last':
                  btnDisplay = lang.sLast;
                  btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
                  break;

                default:
                  btnDisplay = button + 1;
                  btnClass = page === button ? classes.sPageButtonActive : '';
                  break;
              }

              if (btnDisplay !== null) {
                node = $('<a>', {
                  'class': classes.sPageButton + ' ' + btnClass,
                  'aria-controls': settings.sTableId,
                  'aria-label': aria[button],
                  'data-dt-idx': counter,
                  'tabindex': settings.iTabIndex,
                  'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null
                }).html(btnDisplay).appendTo(container);

                _fnBindAction(node, {
                  action: button
                }, clickHandler);

                counter++;
              }
            }
          }
        };


        var activeEl;

        try {
          activeEl = $(host).find(document.activeElement).data('dt-idx');
        } catch (e) { }

        attach($(host).empty(), buttons);

        if (activeEl !== undefined) {
          $(host).find('[data-dt-idx=' + activeEl + ']').focus();
        }
      }
    }
  });

  $.extend(DataTable.ext.type.detect, [
    function (d, settings) {
      var decimal = settings.oLanguage.sDecimal;
      return _isNumber(d, decimal) ? 'num' + decimal : null;
    },
    function (d, settings) {
      if (d && !(d instanceof Date) && !_re_date.test(d)) {
        return null;
      }

      var parsed = Date.parse(d);
      return parsed !== null && !isNaN(parsed) || _empty(d) ? 'date' : null;
    },
    function (d, settings) {
      var decimal = settings.oLanguage.sDecimal;
      return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;
    },
    function (d, settings) {
      var decimal = settings.oLanguage.sDecimal;
      return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;
    },
    function (d, settings) {
      var decimal = settings.oLanguage.sDecimal;
      return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;
    },
    function (d, settings) {
      return _empty(d) || typeof d === 'string' && d.indexOf('<') !== -1 ? 'html' : null;
    }]);

  $.extend(DataTable.ext.type.search, {
    html: function html(data) {
      return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, " ").replace(_re_html, "") : '';
    },
    string: function string(data) {
      return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, " ") : data;
    }
  });

  var __numericReplace = function __numericReplace(d, decimalPlace, re1, re2) {
    if (d !== 0 && (!d || d === '-')) {
      return -Infinity;
    }


    if (decimalPlace) {
      d = _numToDecimal(d, decimalPlace);
    }

    if (d.replace) {
      if (re1) {
        d = d.replace(re1, '');
      }

      if (re2) {
        d = d.replace(re2, '');
      }
    }

    return d * 1;
  };


  function _addNumericSort(decimalPlace) {
    $.each({
      "num": function num(d) {
        return __numericReplace(d, decimalPlace);
      },
      "num-fmt": function numFmt(d) {
        return __numericReplace(d, decimalPlace, _re_formatted_numeric);
      },
      "html-num": function htmlNum(d) {
        return __numericReplace(d, decimalPlace, _re_html);
      },
      "html-num-fmt": function htmlNumFmt(d) {
        return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);
      }
    }, function (key, fn) {
      _ext.type.order[key + decimalPlace + '-pre'] = fn;

      if (key.match(/^html\-/)) {
        _ext.type.search[key + decimalPlace] = _ext.type.search.html;
      }
    });
  }


  $.extend(_ext.type.order, {
    "date-pre": function datePre(d) {
      var ts = Date.parse(d);
      return isNaN(ts) ? -Infinity : ts;
    },
    "html-pre": function htmlPre(a) {
      return _empty(a) ? '' : a.replace ? a.replace(/<.*?>/g, "").toLowerCase() : a + '';
    },
    "string-pre": function stringPre(a) {
      return _empty(a) ? '' : typeof a === 'string' ? a.toLowerCase() : !a.toString ? '' : a.toString();
    },
    "string-asc": function stringAsc(x, y) {
      return x < y ? -1 : x > y ? 1 : 0;
    },
    "string-desc": function stringDesc(x, y) {
      return x < y ? 1 : x > y ? -1 : 0;
    }
  });

  _addNumericSort('');

  $.extend(true, DataTable.ext.renderer, {
    header: {
      _: function _(settings, cell, column, classes) {
        $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
          if (settings !== ctx) {
            return;
          }

          var colIdx = column.idx;
          cell.removeClass(column.sSortingClass + ' ' + classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);
        });
      },
      jqueryui: function jqueryui(settings, cell, column, classes) {
        $('<div/>').addClass(classes.sSortJUIWrapper).append(cell.contents()).append($('<span/>').addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)).appendTo(cell);

        $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
          if (settings !== ctx) {
            return;
          }

          var colIdx = column.idx;
          cell.removeClass(classes.sSortAsc + " " + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);
          cell.find('span.' + classes.sSortIcon).removeClass(classes.sSortJUIAsc + " " + classes.sSortJUIDesc + " " + classes.sSortJUI + " " + classes.sSortJUIAscAllowed + " " + classes.sSortJUIDescAllowed).addClass(columns[colIdx] == 'asc' ? classes.sSortJUIAsc : columns[colIdx] == 'desc' ? classes.sSortJUIDesc : column.sSortingClassJUI);
        });
      }
    }
  });

  var __htmlEscapeEntities = function __htmlEscapeEntities(d) {
    return typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') : d;
  };


  DataTable.render = {
    number: function number(thousands, decimal, precision, prefix, postfix) {
      return {
        display: function display(d) {
          if (typeof d !== 'number' && typeof d !== 'string') {
            return d;
          }

          var negative = d < 0 ? '-' : '';
          var flo = parseFloat(d);

          if (isNaN(flo)) {
            return __htmlEscapeEntities(d);
          }

          flo = flo.toFixed(precision);
          d = Math.abs(flo);
          var intPart = parseInt(d, 10);
          var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : '';
          return negative + (prefix || '') + intPart.toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousands) + floatPart + (postfix || '');
        }
      };
    },
    text: function text() {
      return {
        display: __htmlEscapeEntities
      };
    }
  };


  function _fnExternApiFunc(fn) {
    return function () {
      var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));
      return DataTable.ext.internal[fn].apply(this, args);
    };
  }


  $.extend(DataTable.ext.internal, {
    _fnExternApiFunc: _fnExternApiFunc,
    _fnBuildAjax: _fnBuildAjax,
    _fnAjaxUpdate: _fnAjaxUpdate,
    _fnAjaxParameters: _fnAjaxParameters,
    _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
    _fnAjaxDataSrc: _fnAjaxDataSrc,
    _fnAddColumn: _fnAddColumn,
    _fnColumnOptions: _fnColumnOptions,
    _fnAdjustColumnSizing: _fnAdjustColumnSizing,
    _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
    _fnColumnIndexToVisible: _fnColumnIndexToVisible,
    _fnVisbleColumns: _fnVisbleColumns,
    _fnGetColumns: _fnGetColumns,
    _fnColumnTypes: _fnColumnTypes,
    _fnApplyColumnDefs: _fnApplyColumnDefs,
    _fnHungarianMap: _fnHungarianMap,
    _fnCamelToHungarian: _fnCamelToHungarian,
    _fnLanguageCompat: _fnLanguageCompat,
    _fnBrowserDetect: _fnBrowserDetect,
    _fnAddData: _fnAddData,
    _fnAddTr: _fnAddTr,
    _fnNodeToDataIndex: _fnNodeToDataIndex,
    _fnNodeToColumnIndex: _fnNodeToColumnIndex,
    _fnGetCellData: _fnGetCellData,
    _fnSetCellData: _fnSetCellData,
    _fnSplitObjNotation: _fnSplitObjNotation,
    _fnGetObjectDataFn: _fnGetObjectDataFn,
    _fnSetObjectDataFn: _fnSetObjectDataFn,
    _fnGetDataMaster: _fnGetDataMaster,
    _fnClearTable: _fnClearTable,
    _fnDeleteIndex: _fnDeleteIndex,
    _fnInvalidate: _fnInvalidate,
    _fnGetRowElements: _fnGetRowElements,
    _fnCreateTr: _fnCreateTr,
    _fnBuildHead: _fnBuildHead,
    _fnDrawHead: _fnDrawHead,
    _fnDraw: _fnDraw,
    _fnReDraw: _fnReDraw,
    _fnAddOptionsHtml: _fnAddOptionsHtml,
    _fnDetectHeader: _fnDetectHeader,
    _fnGetUniqueThs: _fnGetUniqueThs,
    _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
    _fnFilterComplete: _fnFilterComplete,
    _fnFilterCustom: _fnFilterCustom,
    _fnFilterColumn: _fnFilterColumn,
    _fnFilter: _fnFilter,
    _fnFilterCreateSearch: _fnFilterCreateSearch,
    _fnEscapeRegex: _fnEscapeRegex,
    _fnFilterData: _fnFilterData,
    _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
    _fnUpdateInfo: _fnUpdateInfo,
    _fnInfoMacros: _fnInfoMacros,
    _fnInitialise: _fnInitialise,
    _fnInitComplete: _fnInitComplete,
    _fnLengthChange: _fnLengthChange,
    _fnFeatureHtmlLength: _fnFeatureHtmlLength,
    _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
    _fnPageChange: _fnPageChange,
    _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
    _fnProcessingDisplay: _fnProcessingDisplay,
    _fnFeatureHtmlTable: _fnFeatureHtmlTable,
    _fnScrollDraw: _fnScrollDraw,
    _fnApplyToChildren: _fnApplyToChildren,
    _fnCalculateColumnWidths: _fnCalculateColumnWidths,
    _fnThrottle: _fnThrottle,
    _fnConvertToWidth: _fnConvertToWidth,
    _fnGetWidestNode: _fnGetWidestNode,
    _fnGetMaxLenString: _fnGetMaxLenString,
    _fnStringToCss: _fnStringToCss,
    _fnSortFlatten: _fnSortFlatten,
    _fnSort: _fnSort,
    _fnSortAria: _fnSortAria,
    _fnSortListener: _fnSortListener,
    _fnSortAttachListener: _fnSortAttachListener,
    _fnSortingClasses: _fnSortingClasses,
    _fnSortData: _fnSortData,
    _fnSaveState: _fnSaveState,
    _fnLoadState: _fnLoadState,
    _fnSettingsFromNode: _fnSettingsFromNode,
    _fnLog: _fnLog,
    _fnMap: _fnMap,
    _fnBindAction: _fnBindAction,
    _fnCallbackReg: _fnCallbackReg,
    _fnCallbackFire: _fnCallbackFire,
    _fnLengthOverflow: _fnLengthOverflow,
    _fnRenderer: _fnRenderer,
    _fnDataSource: _fnDataSource,
    _fnRowAttributes: _fnRowAttributes,
    _fnExtend: _fnExtend,
    _fnCalculateEnd: function _fnCalculateEnd() { }

  });

  $.fn.dataTable = DataTable;

  DataTable.$ = $;

  $.fn.dataTableSettings = DataTable.settings;
  $.fn.dataTableExt = DataTable.ext;

  $.fn.DataTable = function (opts) {
    return $(this).dataTable(opts).api();
  };


  $.each(DataTable, function (prop, val) {
    $.fn.DataTable[prop] = val;
  });















  return $.fn.dataTable;
});
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function () {
    'use strict';

    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) !== 'object') {
        return;
    }


    if ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype) {
        if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {
            Object.defineProperty(window.IntersectionObserverEntry.prototype, 'isIntersecting', {
                get: function get() {
                    return this.intersectionRatio > 0;
                }
            });
        }

        return;
    }


    var document = window.document;

    var registry = [];

    function IntersectionObserverEntry(entry) {
        this.time = entry.time;
        this.target = entry.target;
        this.rootBounds = entry.rootBounds;
        this.boundingClientRect = entry.boundingClientRect;
        this.intersectionRect = entry.intersectionRect || getEmptyRect();
        this.isIntersecting = !!entry.intersectionRect;

        var targetRect = this.boundingClientRect;
        var targetArea = targetRect.width * targetRect.height;
        var intersectionRect = this.intersectionRect;
        var intersectionArea = intersectionRect.width * intersectionRect.height;

        if (targetArea) {
            this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));
        } else {
            this.intersectionRatio = this.isIntersecting ? 1 : 0;
        }
    }


    function IntersectionObserver(callback, opt_options) {
        var options = opt_options || {};

        if (typeof callback != 'function') {
            throw new Error('callback must be a function');
        }

        if (options.root && options.root.nodeType != 1) {
            throw new Error('root must be an Element');
        }


        this._checkForIntersections = throttle(this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);

        this._callback = callback;
        this._observationTargets = [];
        this._queuedEntries = [];
        this._rootMarginValues = this._parseRootMargin(options.rootMargin);

        this.thresholds = this._initThresholds(options.threshold);
        this.root = options.root || null;
        this.rootMargin = this._rootMarginValues.map(function (margin) {
            return margin.value + margin.unit;
        }).join(' ');
    }


    IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;

    IntersectionObserver.prototype.POLL_INTERVAL = null;

    IntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;

    IntersectionObserver.prototype.observe = function (target) {
        var isTargetAlreadyObserved = this._observationTargets.some(function (item) {
            return item.element == target;
        });

        if (isTargetAlreadyObserved) {
            return;
        }

        if (!(target && target.nodeType == 1)) {
            throw new Error('target must be an Element');
        }

        this._registerInstance();

        this._observationTargets.push({
            element: target,
            entry: null
        });

        this._monitorIntersections();

        this._checkForIntersections();
    };


    IntersectionObserver.prototype.unobserve = function (target) {
        this._observationTargets = this._observationTargets.filter(function (item) {
            return item.element != target;
        });

        if (!this._observationTargets.length) {
            this._unmonitorIntersections();

            this._unregisterInstance();
        }
    };


    IntersectionObserver.prototype.disconnect = function () {
        this._observationTargets = [];

        this._unmonitorIntersections();

        this._unregisterInstance();
    };


    IntersectionObserver.prototype.takeRecords = function () {
        var records = this._queuedEntries.slice();

        this._queuedEntries = [];
        return records;
    };


    IntersectionObserver.prototype._initThresholds = function (opt_threshold) {
        var threshold = opt_threshold || [0];
        if (!Array.isArray(threshold)) threshold = [threshold];
        return threshold.sort().filter(function (t, i, a) {
            if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {
                throw new Error('threshold must be a number between 0 and 1 inclusively');
            }

            return t !== a[i - 1];
        });
    };


    IntersectionObserver.prototype._parseRootMargin = function (opt_rootMargin) {
        var marginString = opt_rootMargin || '0px';
        var margins = marginString.split(/\s+/).map(function (margin) {
            var parts = /^(-?\d*\.?\d+)(px|%)$/.exec(margin);

            if (!parts) {
                throw new Error('rootMargin must be specified in pixels or percent');
            }

            return {
                value: parseFloat(parts[1]),
                unit: parts[2]
            };
        });

        margins[1] = margins[1] || margins[0];
        margins[2] = margins[2] || margins[0];
        margins[3] = margins[3] || margins[1];
        return margins;
    };


    IntersectionObserver.prototype._monitorIntersections = function () {
        if (!this._monitoringIntersections) {
            this._monitoringIntersections = true;

            if (this.POLL_INTERVAL) {
                this._monitoringInterval = setInterval(this._checkForIntersections, this.POLL_INTERVAL);
            } else {
                addEvent(window, 'resize', this._checkForIntersections, true);
                addEvent(document, 'scroll', this._checkForIntersections, true);

                if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {
                    this._domObserver = new MutationObserver(this._checkForIntersections);

                    this._domObserver.observe(document, {
                        attributes: true,
                        childList: true,
                        characterData: true,
                        subtree: true
                    });
                }
            }
        }
    };


    IntersectionObserver.prototype._unmonitorIntersections = function () {
        if (this._monitoringIntersections) {
            this._monitoringIntersections = false;
            clearInterval(this._monitoringInterval);
            this._monitoringInterval = null;
            removeEvent(window, 'resize', this._checkForIntersections, true);
            removeEvent(document, 'scroll', this._checkForIntersections, true);

            if (this._domObserver) {
                this._domObserver.disconnect();

                this._domObserver = null;
            }
        }
    };


    IntersectionObserver.prototype._checkForIntersections = function () {
        var rootIsInDom = this._rootIsInDom();

        var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();

        this._observationTargets.forEach(function (item) {
            var target = item.element;
            var targetRect = getBoundingClientRect(target);

            var rootContainsTarget = this._rootContainsTarget(target);

            var oldEntry = item.entry;

            var intersectionRect = rootIsInDom && rootContainsTarget && this._computeTargetAndRootIntersection(target, rootRect);

            var newEntry = item.entry = new IntersectionObserverEntry({
                time: now(),
                target: target,
                boundingClientRect: targetRect,
                rootBounds: rootRect,
                intersectionRect: intersectionRect
            });

            if (!oldEntry) {
                this._queuedEntries.push(newEntry);
            } else if (rootIsInDom && rootContainsTarget) {
                if (this._hasCrossedThreshold(oldEntry, newEntry)) {
                    this._queuedEntries.push(newEntry);
                }
            } else {
                if (oldEntry && oldEntry.isIntersecting) {
                    this._queuedEntries.push(newEntry);
                }
            }
        }, this);

        if (this._queuedEntries.length) {
            this._callback(this.takeRecords(), this);
        }
    };


    IntersectionObserver.prototype._computeTargetAndRootIntersection = function (target, rootRect) {
        if (window.getComputedStyle(target).display == 'none') return;
        var targetRect = getBoundingClientRect(target);
        var intersectionRect = targetRect;
        var parent = getParentNode(target);
        var atRoot = false;

        while (!atRoot) {
            var parentRect = null;
            var parentComputedStyle = parent.nodeType == 1 ? window.getComputedStyle(parent) : {};

            if (parentComputedStyle.display == 'none') return;

            if (parent == this.root || parent == document) {
                atRoot = true;
                parentRect = rootRect;
            } else {
                if (parent != document.body && parent != document.documentElement && parentComputedStyle.overflow != 'visible') {
                    parentRect = getBoundingClientRect(parent);
                }
            }


            if (parentRect) {
                intersectionRect = computeRectIntersection(parentRect, intersectionRect);
                if (!intersectionRect) break;
            }

            parent = getParentNode(parent);
        }

        return intersectionRect;
    };


    IntersectionObserver.prototype._getRootRect = function () {
        var rootRect;

        if (this.root) {
            rootRect = getBoundingClientRect(this.root);
        } else {
            var html = document.documentElement;
            var body = document.body;
            rootRect = {
                top: 0,
                left: 0,
                right: html.clientWidth || body.clientWidth,
                width: html.clientWidth || body.clientWidth,
                bottom: html.clientHeight || body.clientHeight,
                height: html.clientHeight || body.clientHeight
            };
        }

        return this._expandRectByRootMargin(rootRect);
    };


    IntersectionObserver.prototype._expandRectByRootMargin = function (rect) {
        var margins = this._rootMarginValues.map(function (margin, i) {
            return margin.unit == 'px' ? margin.value : margin.value * (i % 2 ? rect.width : rect.height) / 100;
        });

        var newRect = {
            top: rect.top - margins[0],
            right: rect.right + margins[1],
            bottom: rect.bottom + margins[2],
            left: rect.left - margins[3]
        };
        newRect.width = newRect.right - newRect.left;
        newRect.height = newRect.bottom - newRect.top;
        return newRect;
    };


    IntersectionObserver.prototype._hasCrossedThreshold = function (oldEntry, newEntry) {
        var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;
        var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1;

        if (oldRatio === newRatio) return;

        for (var i = 0; i < this.thresholds.length; i++) {
            var threshold = this.thresholds[i];

            if (threshold == oldRatio || threshold == newRatio || threshold < oldRatio !== threshold < newRatio) {
                return true;
            }
        }
    };


    IntersectionObserver.prototype._rootIsInDom = function () {
        return !this.root || containsDeep(document, this.root);
    };


    IntersectionObserver.prototype._rootContainsTarget = function (target) {
        return containsDeep(this.root || document, target);
    };


    IntersectionObserver.prototype._registerInstance = function () {
        if (registry.indexOf(this) < 0) {
            registry.push(this);
        }
    };


    IntersectionObserver.prototype._unregisterInstance = function () {
        var index = registry.indexOf(this);
        if (index != -1) registry.splice(index, 1);
    };


    function now() {
        return window.performance && performance.now && performance.now();
    }


    function throttle(fn, timeout) {
        var timer = null;
        return function () {
            if (!timer) {
                timer = setTimeout(function () {
                    fn();
                    timer = null;
                }, timeout);
            }
        };
    }


    function addEvent(node, event, fn, opt_useCapture) {
        if (typeof node.addEventListener == 'function') {
            node.addEventListener(event, fn, opt_useCapture || false);
        } else if (typeof node.attachEvent == 'function') {
            node.attachEvent('on' + event, fn);
        }
    }


    function removeEvent(node, event, fn, opt_useCapture) {
        if (typeof node.removeEventListener == 'function') {
            node.removeEventListener(event, fn, opt_useCapture || false);
        } else if (typeof node.detatchEvent == 'function') {
            node.detatchEvent('on' + event, fn);
        }
    }


    function computeRectIntersection(rect1, rect2) {
        var top = Math.max(rect1.top, rect2.top);
        var bottom = Math.min(rect1.bottom, rect2.bottom);
        var left = Math.max(rect1.left, rect2.left);
        var right = Math.min(rect1.right, rect2.right);
        var width = right - left;
        var height = bottom - top;
        return width >= 0 && height >= 0 && {
            top: top,
            bottom: bottom,
            left: left,
            right: right,
            width: width,
            height: height
        };
    }


    function getBoundingClientRect(el) {
        var rect;

        try {
            rect = el.getBoundingClientRect();
        } catch (err) {
        }

        if (!rect) return getEmptyRect();

        if (!(rect.width && rect.height)) {
            rect = {
                top: rect.top,
                right: rect.right,
                bottom: rect.bottom,
                left: rect.left,
                width: rect.right - rect.left,
                height: rect.bottom - rect.top
            };
        }

        return rect;
    }


    function getEmptyRect() {
        return {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            width: 0,
            height: 0
        };
    }


    function containsDeep(parent, child) {
        var node = child;

        while (node) {
            if (node == parent) return true;
            node = getParentNode(node);
        }

        return false;
    }


    function getParentNode(node) {
        var parent = node.parentNode;

        if (parent && parent.nodeType == 11 && parent.host) {
            return parent.host;
        }

        if (parent && parent.assignedSlot) {
            return parent.assignedSlot.parentNode;
        }

        return parent;
    }


    window.IntersectionObserver = IntersectionObserver;
    window.IntersectionObserverEntry = IntersectionObserverEntry;
})();
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

jQuery(function ($) {
  window.ModalDialog = function () {
    function ModalDialog(options) {
      _classCallCheck(this, ModalDialog);

      var defaults = {
        positiveButton: {
          text: 'Yes',

          disabled: false,

          callback: function callback() {}
        },

        negativeButton: {
          text: 'No',

          disabled: false,

          callback: function callback() {}
        },
        title: '',
        content: '',
        appendClassList: []
      };

      if (typeof options === 'undefined') {
        options = {};
      }

      this.options = $.extend(true, defaults, options);
    }

    _createClass(ModalDialog, [{
      key: "show",
      value: function show() {
        var self = this;
        var classList = ['modal_dialog'].concat(self.options.appendClassList);
        self.$modal = $('<div id="modal-dialog" class="' + classList.join(' ') + '"><div class="modal_dialog__box"><div class="modal_dialog__box__body"></div><div class="modal_dialog__box__footer"></div></div></div>');
        this.$modal.on('click', function () {
          self.close();
        }); 

        var $box = self.$modal.find('.modal_dialog__box');
        $box.on('click', function (event) {
          event.stopPropagation();
        }); 

        if (self.options.title) {
          var $header = $('<div class="modal_dialog__box__header"></div>');
          $header.append(self.options.title);
          $box.prepend($header);
        } 


        var $footer = self.$modal.find('.modal_dialog__box__footer'); 

        if (self.options.positiveButton.text) {
          var _$button = $('<button class="modal_dialog__positive_button">' + self.options.positiveButton.text + '</button></div>');

          _$button.on('click', function () {
            self.options.positiveButton.callback();
            self.close();
          });

          _$button.focus();

          if (self.options.positiveButton.disabled) {
            _$button.prop('disabled', true);
          }

          $footer.append($('<div class="modal_dialog__box__footer__column"></div>').append(_$button));
        } 


        if (self.options.negativeButton.text) {
          var _$button2 = $('<button class="modal_dialog__negative_button">' + self.options.negativeButton.text + '</button></div>');

          _$button2.on('click', function () {
            self.options.negativeButton.callback();
            self.close();
          });

          _$button2.focus();

          if (self.options.negativeButton.disabled) {
            _$button2.prop('disabled', true);
          }

          $footer.append($('<div class="modal_dialog__box__footer__column"></div>').append(_$button2));
        } 


        var $body = self.$modal.find('.modal_dialog__box__body');
        $body.append(self.options.content); 

        $('body').append(self.$modal);
        $(document).on('focusin', self._onFocus.bind(self));
        var $button = self.$modal.find('.modal_dialog__negative_button');

        if ($button.length == 0) {
          $button = self.$modal.find('.modal_dialog__positive_button');
        }

        if ($button.length > 0) {
          $button.focus();
        }
      }
    }, {
      key: "close",
      value: function close() {
        $(document).off('focusin', this._onFocus);
        this.$modal.remove();
      }
    }, {
      key: "_focus",
      value: function _focus() {
        var $button = this.$modal.find('.modal_dialog__negative_button');

        if ($button.length == 0) {
          $button = this.$modal.find('.modal_dialog__positive_button');
        }

        if ($button.length > 0) {
          $button.focus();
        }
      }
    }, {
      key: "_onFocus",
      value: function _onFocus(event) {
        var $target = $(event.target);

        if ($target.closest('#modal-dialog').length == 0) {
          this._focus();
        }
      }
    }]);

    return ModalDialog;
  }();
});
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

jQuery(function ($) {
  window.PageLoading = function () {
    function PageLoading() {
      _classCallCheck(this, PageLoading);
    }

    _createClass(PageLoading, [{
      key: "show",

      value: function show() {
        if (this.$modal) {
          return;
        }

        this.$modal = $('<div id="page-loading" class="page_loading"><div class="page_loading__container"><div class="page_loading__container__spinner"></div></div></div>');
        var $spinner = this.$modal.find('.page_loading__container__spinner');

        for (var i = 0; i < 12; i++) {
          $spinner.append($('<div>'));
        } 


        $('html,body').css('overflow', 'hidden'); 

        $('body').append(this.$modal);
      }

    }, {
      key: "close",
      value: function close() {
        var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        $('html,body').css('overflow', ''); 

        this.$modal.fadeOut(400, function () {
          this.$modal.remove();
          this.$modal = null; 

          if (callback) {
            callback();
          }
        });
      }
    }]);

    return PageLoading;
  }();
});
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

if (!Array.prototype.includes) {
  Object.defineProperty(Array.prototype, 'includes', {
    value: function value(searchElement, fromIndex) {
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      } 


      var o = Object(this); 

      var len = o.length >>> 0; 

      if (len === 0) {
        return false;
      } 


      var n = fromIndex | 0; 

      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

      function sameValueZero(x, y) {
        return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
      } 


      while (k < len) {
        if (sameValueZero(o[k], searchElement)) {
          return true;
        } 


        k++;
      } 


      return false;
    }
  });
}

jQuery(function ($) {
  $('.builtin-scroll').each(function (index, element) {
    var ps = new PerfectScrollbar(element, {
      suppressScrollY: true
    });
    new ResizeObserver(function () {
      ps.update();
    }).observe(element);
  }); 

  $('.builtin-scroll').swipeImage();
});

function escapeUrlChar(str) {
  var ret = str;
  ret = ret.split(';').join('；');
  ret = ret.split('/').join('／');
  ret = ret.split('?').join('？');
  ret = ret.split('%').join('％');
  ret = ret.split('<').join('＜');
  ret = ret.split('>').join('＞');
  ret = ret.split('#').join('＃');
  ret = ret.split('\\').join('￥');
  return ret;
}

(function ($) {
  var $window = $(window);

  function hasFragment() {
    var domready = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    if (location.hash === '') {
      return false;
    }

    if (location.hash.indexOf('/') !== -1) {
      return false;
    }

    var $target = $(location.hash);

    if (domready && $target.length === 0) {
      return false;
    }

    return true;
  }


  function fragmentScroll() {
    if (!hasFragment()) {
      return;
    }

    scrollTo(location.hash.slice(1));
  }


  function getStickiewHeight() {
    var tempStickiesHeight = 0;
    $('.comp_v2_0160').each(function (index, element) {
      tempStickiesHeight += Math.floor(element.getBoundingClientRect().height);
    });
    $('.comp_v2_1017').each(function (index, element) {
      tempStickiesHeight += Math.floor(element.getBoundingClientRect().height);
    });

    if (window.matchMedia("(max-width:768px)").matches) {
      $('.comp_v2_0010').each(function (index, element) {
        tempStickiesHeight += Math.floor(element.getBoundingClientRect().height);
      });
    }

    return tempStickiesHeight;
  }


  function scrollTo(id) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var $target = $('#' + id);

    if ($target.length === 0) {
      return;
    }

    var posY1 = Math.floor($target.offset().top) - getStickiewHeight() + 1;
    $('body,html').stop().animate({
      scrollTop: posY1
    }, 400, 'swing', function () {
      var posY2 = Math.floor($target.offset().top) - getStickiewHeight() + 1;

      if (posY1 == posY2) {
        if (callback) {
          callback();
        }

        return;
      }

      $('body,html').stop().animate({
        scrollTop: posY2
      }, 200, 'swing', function () {
        if (callback) {
          callback();
        }
      });
    });
  }

  var pageLoading = null;
  $(function () {
    if (hasFragment()) {
      $window.scrollTop(0);
      pageLoading = new PageLoading();
      pageLoading.show();
    }
  }); 

  $window.on('hashchange', fragmentScroll); 

  $window.on('load', function () {
    setTimeout(function () {
      if (hasFragment()) {
        $window.scrollTop(0);
        scrollTo(location.hash.slice(1), function () {
          if (pageLoading) {
            pageLoading.close();
            pageLoading = null;
          }
        });
      }
    }, 0);
  });

  if (hasFragment(false) && history && history.scrollRestoration) {
    history.scrollRestoration = 'manual';
  } 


  $(document).on('click', 'a[href*="#"]', function (event) {
    var href = $(this).attr('href');
    var $target = null;

    try {
      $target = $(href == '#' || href == '' ? 'html' : href);
    } catch (e) {
      return;
    }

    if ($target.length === 0) {
      return;
    }

    event.preventDefault();
    scrollTo($target.attr('id'));
  });
})(jQuery); 


jQuery(function ($) {
  $('.comp_v2_0010__level_3__layout__slider,.comp_v2_0010__mega_area__search_mega__inner__slider').each(function (index, element) {
    var ps = new PerfectScrollbar(element, {
      isDoubleXScrollbar: false,
      suppressScrollY: true,
      useBothWheelAxes: true
    });
    new ResizeObserver(function () {
      ps.update();
      var $element = $(element);
      var $level3 = $element.closest('.comp_v2_0010__level_3');

      if ($element.hasClass('ps--active-x-single')) {
        $level3.addClass('has_scrollbar');
      } else {
        $level3.removeClass('has_scrollbar');
      }
    }).observe(element);
  }); 

  Stickyfill.add($('.comp_v2_0010'));
  $(document).on('click touchend', function (event) {
    void 0;
    var $eventTarget = $(event.target);
    void 0; 

    if ($eventTarget.closest('.comp_v2_0010__level_1__utility__language').length == 0 && $eventTarget.closest('#check-show-language-select').length == 0) {
      var $selectorElement = $('.comp_v2_0010__level_1__utility__language__selector');
      var closeClass = 'comp_v2_0010__level_1__utility__language__selector--close'; 

      if ($('#check-show-language-select').prop('checked') == true) {
        $selectorElement.addClass(closeClass); 

        $selectorElement.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
          $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

          $('#check-show-language-select').prop('checked', false).change(); 

          $selectorElement.removeClass(closeClass);
        });
        void 0;
      }
    } 


    if ($eventTarget.closest('.comp_v2_0010__level_1__utility__search__show_button').length == 0 && $eventTarget.closest('#check-show-search-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__search_mega').length == 0 && $eventTarget.closest('.comp_v2_0010__sp_menu_frame__left__item__search__show_button').length == 0 && $eventTarget.closest('[id^="mCSB_1"]').length == 0) {
      var $megaElement = $('.comp_v2_0010__mega_area__search_mega');
      var _closeClass = 'comp_v2_0010__mega_area__search_mega--close'; 

      if ($('#check-show-search-mega').prop('checked') == true) {
        $megaElement.addClass(_closeClass); 

        $megaElement.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
          $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

          $('#check-show-search-mega').prop('checked', false).change(); 

          $megaElement.removeClass(_closeClass);
        });
        void 0;
      }
    } 


    if ($('#check-show-hamburger-sp-mega').prop('checked') == false && $eventTarget.closest('.comp_v2_0010__level_3__layout__slider__inner__semiconductor__products__show_button').length == 0 && $eventTarget.closest('#check-show-semiconductor-products-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__semiconductor__products_mega').length == 0 || $('#check-show-hamburger-sp-mega').prop('checked') == true && $eventTarget.closest('.comp_v2_0010__level_3__layout__slider__inner__semiconductor__products__show_button').length == 0 && $eventTarget.closest('#check-show-semiconductor-products-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__semiconductor__products_mega').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_2"]').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_3"]').length == 0 && $eventTarget.closest('[id^="mCSB_1"]').length == 0) {
      var _$megaElement = $('.comp_v2_0010__mega_area__semiconductor__products_mega');

      var _closeClass2 = 'comp_v2_0010__mega_area__semiconductor__products_mega--close'; 

      if ($('#check-show-semiconductor-products-mega').prop('checked') == true) {
        _$megaElement.addClass(_closeClass2); 


        _$megaElement.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
          $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

          $('#check-show-semiconductor-products-mega').prop('checked', false).change(); 

          _$megaElement.removeClass(_closeClass2);
        });

        void 0;
      }
    } 


    if ($('#check-show-hamburger-sp-mega').prop('checked') == false && $eventTarget.closest('.comp_v2_0010__level_3__layout__slider__inner__semiconductor__development_and_design_support__show_button').length == 0 && $eventTarget.closest('#check-show-semiconductor-development-and-design-support-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__semiconductor__development_and_design_support_mega').length == 0 || $('#check-show-hamburger-sp-mega').prop('checked') == true && $eventTarget.closest('.comp_v2_0010__level_3__layout__slider__inner__semiconductor__development_and_design_support__show_button').length == 0 && $eventTarget.closest('#check-show-semiconductor-development-and-design-support-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__semiconductor__development_and_design_support_mega').length == 0 && $eventTarget.closest('[id^="mCSB_1"]').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_2"]').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_3"]').length == 0) {
      var _$megaElement2 = $('.comp_v2_0010__mega_area__semiconductor__development_and_design_support_mega');

      var _closeClass3 = 'comp_v2_0010__mega_area__semiconductor__development_and_design_support_mega--close'; 

      if ($('#check-show-semiconductor-development-and-design-support-mega').prop('checked') == true) {
        _$megaElement2.addClass(_closeClass3); 


        _$megaElement2.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
          $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

          $('#check-show-semiconductor-development-and-design-support-mega').prop('checked', false).change(); 

          _$megaElement2.removeClass(_closeClass3);
        });

        void 0;
      }
    } 


    if ($('#check-show-hamburger-sp-mega').prop('checked') == false && $eventTarget.closest('.comp_v2_0010__level_3__layout__slider__inner__semiconductor__knowledge__show_button').length == 0 && $eventTarget.closest('#check-show-semiconductor-knowledge-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__semiconductor__knowledge_mega').length == 0 || $('#check-show-hamburger-sp-mega').prop('checked') == true && $eventTarget.closest('.comp_v2_0010__level_3__layout__slider__inner__semiconductor__knowledge__show_button').length == 0 && $eventTarget.closest('#check-show-semiconductor-knowledge-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__semiconductor__knowledge_mega').length == 0 && $eventTarget.closest('[id^="mCSB_1"]').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_2"]').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_3"]').length == 0) {
      var _$megaElement3 = $('.comp_v2_0010__mega_area__semiconductor__knowledge_mega');

      var _closeClass4 = 'comp_v2_0010__mega_area__semiconductor__knowledge_mega--close'; 

      if ($('#check-show-semiconductor-knowledge-mega').prop('checked') == true) {
        _$megaElement3.addClass(_closeClass4); 


        _$megaElement3.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
          $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

          $('#check-show-semiconductor-knowledge-mega').prop('checked', false).change(); 

          _$megaElement3.removeClass(_closeClass4);
        });

        void 0;
      }
    } 


    if ($('#check-show-hamburger-sp-mega').prop('checked') == false && $eventTarget.closest('.comp_v2_0010__level_3__layout__slider__inner__storage__products__show_button').length == 0 && $eventTarget.closest('#check-show-storage-products-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__storage__products_mega').length == 0 || $('#check-show-hamburger-sp-mega').prop('checked') == true && $eventTarget.closest('.comp_v2_0010__level_3__layout__slider__inner__storage__products__show_button').length == 0 && $eventTarget.closest('#check-show-storage-products-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__storage__products_mega').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_2"]').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_3"]').length == 0 && $eventTarget.closest('[id^="mCSB_1"]').length == 0) {
      var _$megaElement4 = $('.comp_v2_0010__mega_area__storage__products_mega');

      var _closeClass5 = 'comp_v2_0010__mega_area__storage__products_mega--close'; 

      if ($('#check-show-storage-products-mega').prop('checked') == true) {
        _$megaElement4.addClass(_closeClass5); 


        _$megaElement4.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
          $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

          $('#check-show-storage-products-mega').prop('checked', false).change(); 

          _$megaElement4.removeClass(_closeClass5);
        });

        void 0;
      }
    } 


    if ($('#check-show-hamburger-sp-mega').prop('checked') == false && $eventTarget.closest('.comp_v2_0010__level_3__layout__slider__inner__storage__support__show_button').length == 0 && $eventTarget.closest('#check-show-storage-support-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__storage__support_mega').length == 0 || $('#check-show-hamburger-sp-mega').prop('checked') == true && $eventTarget.closest('.comp_v2_0010__level_3__layout__slider__inner__storage__support__show_button').length == 0 && $eventTarget.closest('#check-show-storage-support-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__storage__support_mega').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_2"]').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_3"]').length == 0 && $eventTarget.closest('[id^="mCSB_1"]').length == 0) {
      var _$megaElement5 = $('.comp_v2_0010__mega_area__storage__support_mega');

      var _closeClass6 = 'comp_v2_0010__mega_area__storage__support_mega--close'; 

      if ($('#check-show-storage-support-mega').prop('checked') == true) {
        _$megaElement5.addClass(_closeClass6); 


        _$megaElement5.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
          $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

          $('#check-show-storage-support-mega').prop('checked', false).change(); 

          _$megaElement5.removeClass(_closeClass6);
        });

        void 0;
      }
    } 


    if ($('#check-show-hamburger-sp-mega').prop('checked') == false && $eventTarget.closest('.comp_v2_0010__level_3__layout__slider__inner__company__about__show_button').length == 0 && $eventTarget.closest('#check-show-company-about-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__company__about_mega').length == 0 || $('#check-show-hamburger-sp-mega').prop('checked') == true && $eventTarget.closest('.comp_v2_0010__level_3__layout__slider__inner__company__about__show_button').length == 0 && $eventTarget.closest('#check-show-company-about-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__mega_area__company__about_mega').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_2"]').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_3"]').length == 0 && $eventTarget.closest('[id^="mCSB_1"]').length == 0) {
      var _$megaElement6 = $('.comp_v2_0010__mega_area__company__about_mega');

      var _closeClass7 = 'comp_v2_0010__mega_area__company__about_mega--close'; 

      if ($('#check-show-company-about-mega').prop('checked') == true) {
        _$megaElement6.addClass(_closeClass7); 


        _$megaElement6.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
          $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

          $('#check-show-company-about-mega').prop('checked', false).change(); 

          _$megaElement6.removeClass(_closeClass7);
        });

        void 0;
      }
    } 


    if ($('#check-show-common-mega').prop('checked') == true && $('#check-show-hamburger-sp-mega').prop('checked') == false && $eventTarget.closest('.comp_v2_0010__mega_area__common_mega').length == 0 || $('#check-show-common-mega').prop('checked') == true && $('#check-show-hamburger-sp-mega').prop('checked') == true && $eventTarget.closest('.comp_v2_0010__mega_area__common_mega').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_2"]').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_3"]').length == 0 && $eventTarget.closest('[id^="mCSB_1"]').length == 0) {
      var _$megaElement7 = $('.comp_v2_0010__mega_area__common_mega');

      var _closeClass8 = 'comp_v2_0010__mega_area__common_mega--close'; 

      if ($('#check-show-common-mega').prop('checked') == true) {
        void 0;

        _$megaElement7.addClass(_closeClass8); 


        _$megaElement7.off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend');

        _$megaElement7.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function (event) {
          _$megaElement7.off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend');

          void 0;
          void 0; 

          void 0;

          _$megaElement7.removeClass(_closeClass8); 


          var checked = $('#check-show-common-mega').prop('checked');

          if (checked) {
            $('#check-show-common-mega').prop('checked', false).change();
          }
        });
      }
    } 


    if ($('#check-show-hamburger-sp-mega').prop('checked') == false && $eventTarget.closest('.comp_v2_0010__sp_menu_frame__left__item__search__show_button').length == 0 && $eventTarget.closest('#check-show-search-sp-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__sp_mega_area__search_mega').length == 0 || $('#check-show-hamburger-sp-mega').prop('checked') == true && $eventTarget.closest('.comp_v2_0010__sp_menu_frame__left__item__search__show_button').length == 0 && $eventTarget.closest('#check-show-search-sp-mega').length == 0 && $eventTarget.closest('.comp_v2_0010__sp_mega_area__search_mega').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_2"]').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_3"]').length == 0 && $eventTarget.closest('[id^="mCSB_1"]').length == 0) {
      var _$megaElement8 = $('.comp_v2_0010__sp_mega_area__search_mega');

      var _closeClass9 = 'comp_v2_0010__sp_mega_area__search_mega--close'; 

      if ($('#check-show-search-sp-mega').prop('checked') == true) {
        _$megaElement8.addClass(_closeClass9); 


        _$megaElement8.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
          $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

          $('#check-show-search-sp-mega').prop('checked', false).change(); 

          _$megaElement8.removeClass(_closeClass9);
        });

        void 0;
      }
    } 


    if ($eventTarget.closest('.comp_v2_0010__sp_menu_frame__left__item__hamburger__show_button').length == 0 && $eventTarget.closest('#check-show-hamburger-sp-mega').length == 0 && $eventTarget.closest('#check-show-semiconductor-products-mega').length == 0 && $eventTarget.closest('#check-show-semiconductor-development-and-design-support-mega').length == 0 && $eventTarget.closest('#check-show-semiconductor-knowledge-mega').length == 0 && $eventTarget.closest('#check-show-storage-products-mega').length == 0 && $eventTarget.closest('#check-show-storage-support-mega').length == 0 && $eventTarget.closest('#check-show-company-about-mega').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__mega_area"]').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_2"]').length == 0 && $eventTarget.closest('[class^="comp_v2_0010__level_3"]').length == 0 && $eventTarget.closest('[id^="mCSB_1"]').length == 0) {
      var $megaElement1 = $('.comp_v2_0010__level_2');
      var $megaElement2 = $('.comp_v2_0010__level_3');
      var closeClass1 = 'comp_v2_0010__level_2--close';
      var closeClass2 = 'comp_v2_0010__level_3--close'; 

      if ($('#check-show-hamburger-sp-mega').prop('checked') == true) {
        void 0; 

        $megaElement1.addClass(closeClass1);
        $megaElement2.addClass(closeClass2); 

        $megaElement1.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
          $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

          var checked = $('#check-show-hamburger-sp-mega').prop('checked');

          if (checked) {
            $('#check-show-hamburger-sp-mega').prop('checked', false).change();
          } 


          $megaElement1.removeClass(closeClass1);
        }); 

        $megaElement2.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
          $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

          var checked = $('#check-show-hamburger-sp-mega').prop('checked');

          if (checked) {
            $('#check-show-hamburger-sp-mega').prop('checked', false).change();
          } 


          $megaElement2.removeClass(closeClass2);
        });
        void 0;
      }
    }
  });
  $(document).on('click', function (event) {
    void 0;
    var $eventTarget = $(event.target);
    void 0; 

    if ($eventTarget.closest('.comp_v2_0010__mega_area__company__about_mega').length > 0 && $eventTarget.prop('tagName').toLowerCase() === 'a') {
      if ($eventTarget.attr('href').indexOf('#') === 0) {
        var $megaElement = $('.comp_v2_0010__mega_area__company__about_mega');
        var closeClass = 'comp_v2_0010__mega_area__company__about_mega--close'; 

        if ($('#check-show-company-about-mega').prop('checked') == true) {
          $megaElement.addClass(closeClass); 

          $megaElement.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
            $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

            $('#check-show-company-about-mega').prop('checked', false).change(); 

            $megaElement.removeClass(closeClass);
          });
        }

        var $megaElement1 = $('.comp_v2_0010__level_2');
        var $megaElement2 = $('.comp_v2_0010__level_3');
        var closeClass1 = 'comp_v2_0010__level_2--close';
        var closeClass2 = 'comp_v2_0010__level_3--close'; 

        if ($('#check-show-hamburger-sp-mega').prop('checked') == true) {
          void 0; 

          $megaElement1.addClass(closeClass1);
          $megaElement2.addClass(closeClass2); 

          $megaElement1.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
            $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

            var checked = $('#check-show-hamburger-sp-mega').prop('checked');

            if (checked) {
              $('#check-show-hamburger-sp-mega').prop('checked', false).change();
            } 


            $megaElement1.removeClass(closeClass1);
          }); 

          $megaElement2.on('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend', function () {
            $(this).off('webkitAnimationEnd mozAnimationEnd oAnimationEnd animationend'); 

            var checked = $('#check-show-hamburger-sp-mega').prop('checked');

            if (checked) {
              $('#check-show-hamburger-sp-mega').prop('checked', false).change();
            } 


            $megaElement2.removeClass(closeClass2);
          });
        }
      }
    }
  }); 

  $('#check-show-hamburger-sp-mega').change(function () {
    if ($(this).prop('checked')) {
      setTimeout(function () {
        $('#check-show-semiconductor-products-mega').prop('checked', true);
        $('#check-show-storage-products-mega').prop('checked', true);
        $('#check-show-company-about-mega').prop('checked', true);
        $('#check-show-common-mega').prop('checked', true);
        var $slider = $('.comp_v2_0010 .comp_v2_0442__slider');

        if ($slider.hasClass('slick-initialized')) {
          $slider.slick('refresh', true);
        }
      }, 300);
    }
  });

  function addMegaPanelCloseButton(checkboxId, megaClass) {
    $('#' + checkboxId).on('change', function (event) {
      var $target = $(event.target);

      if ($target.prop('checked')) {
        var $button = $('<button type="button" class="comp_v2_0010__mega_area__close_button"><img src="/apps/toshiba-ss-v2/clientlibs/dist/img/icon-close-gray.png" alt="close"></button>');
        $button.appendTo($('.' + megaClass));
        $button.one('click touchend', function () {
          $target.prop('checked', false).change();
        });
      } else {
        $('.' + megaClass + ' .comp_v2_0010__mega_area__close_button').remove();
      }
    });
  } 


  addMegaPanelCloseButton('check-show-search-mega', 'comp_v2_0010__mega_area__search_mega'); 

  addMegaPanelCloseButton('check-show-semiconductor-products-mega', 'comp_v2_0010__mega_area__semiconductor__products_mega'); 

  addMegaPanelCloseButton('check-show-semiconductor-development-and-design-support-mega', 'comp_v2_0010__mega_area__semiconductor__development_and_design_support_mega'); 

  addMegaPanelCloseButton('check-show-semiconductor-knowledge-mega', 'comp_v2_0010__mega_area__semiconductor__knowledge_mega'); 

  addMegaPanelCloseButton('check-show-storage-products-mega', 'comp_v2_0010__mega_area__storage__products_mega'); 

  addMegaPanelCloseButton('check-show-storage-support-mega', 'comp_v2_0010__mega_area__storage__support_mega'); 

  addMegaPanelCloseButton('check-show-company-about-mega', 'comp_v2_0010__mega_area__company__about_mega'); 

  addMegaPanelCloseButton('check-show-hamburger-sp-mega', 'comp_v2_0010__sp_mega_area__hamburger_mega');
  var $languageSelectors = $('.comp_v2_0010__level_1__utility__language__selector').find('a'); 

  $languageSelectors.first().on('keydown', function () {
    if (event.shiftKey && event.keyCode == 9) {
      event.preventDefault();
      $('.comp_v2_0010__level_1__utility__language__change_button > span').focus().parent().trigger('click');
      return;
    }
  }); 

  $languageSelectors.last().on('keydown', function () {
    if (event.keyCode == 9) {
      event.preventDefault();
      $('.comp_v2_0010__level_1__utility__language__change_button > span').focus().parent().trigger('click');
      return;
    }
  });
  $languageSelectors.on('keydown', function () {
    if (event.keyCode == 27) {
      event.preventDefault();
      $('.comp_v2_0010__level_1__utility__language__change_button > span').focus().parent().trigger('click');
      return;
    }
  }); 

  $('.comp_v2_0010__level_1__utility__language__change_button').on('keydown', function (event) {
    var $self = $(this); 

    if (event.keyCode == 13 || event.keyCode == 32) {
      event.preventDefault();
      var checked = $('#' + $self.attr('for')).prop('checked');

      if (!checked) {
        $('.comp_v2_0010__level_1__utility__language__selector').one('animationend', function () {
          $languageSelectors.first().focus();
        });
      }

      $self.trigger('click');
      return;
    }
  }); 

  $('.comp_v2_0010__level_1__utility__search__show_button').on('keydown', function (event) {
    var $self = $(this); 

    if (event.keyCode == 13 || event.keyCode == 32) {
      event.preventDefault();
      var checked = $('#' + $self.attr('for')).prop('checked');

      if (!checked) {
        $('.comp_v2_0010__mega_area__search_mega').one('animationend', function () {
          var id = $('.comp_v2_0010__mega_area__search_mega .menu-selector:checked').attr('id');
          $('.comp_v2_0010__mega_area__search_mega label[for="' + id + '"] > span').focus();
        });
      }

      $self.trigger('click');
      return;
    }
  }); 

  $('.comp_v2_0010__mega_area__search_mega').each(function (index, element) {
    var $container = $(element); 

    $container.find('label[for^="show-search-"] > span').on('keydown', function (event) {
      var $self = $(this); 

      if (event.shiftKey && event.keyCode == 9) {
        event.preventDefault();
        $('.comp_v2_0010__level_1__utility__search__show_button > span').focus().parent().trigger('click');
        return;
      } 


      if (event.keyCode == 37) {
        var $item = $self.parent().prev('label').children('span');

        if ($item.length > 0) {
          $item.one('transitionend', function () {
            $item.focus();
          });
          $item.parent().trigger('click');
        }

        return;
      } 


      if (event.keyCode == 39) {
        var _$item = $self.parent().next('label').children('span');

        if (_$item.length > 0) {
          _$item.one('transitionend', function () {
            _$item.focus();
          });

          _$item.parent().trigger('click');
        }

        return;
      }
    }); 

    $container.find('.menu-selector').on('change', function () {
      var $self = $(this);
      var id = $self.attr('id');
      $container.find('label[for^="show-search-"] > span').attr('tabindex', '-1');
      var tabindex = $self.prop('checked') ? 0 : -1;
      $container.find('label[for="' + id + '"] > span').attr('tabindex', tabindex);
    }); 

    $(document).on('focus', '.comp_v2_0010__mega_area__search_mega .comp_v2_0010__mega_area__close_button', function () {
      $('.comp_v2_0010__level_1__utility__search__show_button > span').focus().parent().trigger('click');
    }); 

    $container.find('a[href], area[href], input, select, textarea, button, iframe, object, embed, *[tabindex], *[contenteditable]').on('keydown', function (event) {
      if (event.keyCode == 27) {
        event.preventDefault();
        $('.comp_v2_0010__level_1__utility__search__show_button > span').focus().parent().trigger('click');
        return;
      }
    });
  }); 

  $('.comp_v2_0010__level_3').each(function (index, element) {
    var $container = $(element);
    $container.find('label[for^="check-show-"]').on('keydown', function (event) {
      var $self = $(this); 

      if (event.keyCode == 13 || event.keyCode == 32) {
        event.preventDefault();
        var id = $self.attr('for');
        var checked = $('#' + id).prop('checked');

        if (!checked) {
          var matches = id.match(/^check-show-(.+)$/);
          var tmp = matches[1].split('-');
          var className = '.comp_v2_0010__mega_area__' + tmp.shift() + '__' + tmp.join('_');
          $(className).one('animationend', function () {
            $(this).find('a[href], area[href], input, select, textarea, button, iframe, object, embed, *[tabindex], *[contenteditable]').not('[tabindex=-1], [disabled], :hidden').first().focus();
          });
        }

        $self.trigger('click');
        return;
      }
    });
    $('.comp_v2_0010__mega_area > div').not('.comp_v2_0010__mega_area__search_mega').each(function (index, element) {
      $(element).find('a[href], area[href], input, select, textarea, button, iframe, object, embed, *[tabindex], *[contenteditable]').not('[tabindex=-1], [disabled]').first().on('keydown', function (event) {
        var $self = $(this); 

        if (event.shiftKey && event.keyCode == 9) {
          event.preventDefault();
          var className = $self.closest('[class^="comp_v2_0010__mega_area__"][class$="_mega"]').attr('class');
          var matches = className.match(/^comp_v2_0010__mega_area__(.+)$/);
          var tmp = matches[1].split('__');
          $('.comp_v2_0010__level_3 label[for="check-show-' + tmp.shift() + '-' + tmp.join('-').replace(/_/g, '-') + '"] > span').focus().parent().trigger('click');
          return;
        }
      });
      $(element).find('a[href], area[href], input, select, textarea, button, iframe, object, embed, *[tabindex], *[contenteditable]').on('keydown', function (event) {
        var $self = $(this); 

        if (event.keyCode == 27) {
          event.preventDefault();
          var className = $self.closest('[class^="comp_v2_0010__mega_area__"][class$="_mega"]').attr('class');
          var matches = className.match(/^comp_v2_0010__mega_area__(.+)$/);
          var tmp = matches[1].split('__');
          $('.comp_v2_0010__level_3 label[for="check-show-' + tmp.shift() + '-' + tmp.join('-').replace(/_/g, '-') + '"] > span').focus().parent().trigger('click');
          return;
        }
      });
    }); 

    $(document).on('focus', '.comp_v2_0010__mega_area__close_button', function () {
      if ($(this).closest('.comp_v2_0010__mega_area__search_mega').length > 0) {
        return;
      }

      var $input = $('input[id^="check-show-"]:checked');
      $container.find('label[for="' + $input.attr('id') + '"] > span').focus().parent().trigger('click');
    });
  }); 

  $('.comp_v2_0010 > input[type="checkbox"]').on('change', function () {
    if (!this.checked) {
      return;
    }

    var targetList = {
      'check-show-semiconductor-products-mega': '.comp_v2_0010__mega_area__semiconductor__products_mega',
      'check-show-semiconductor-development-and-design-support-mega': '.comp_v2_0010__mega_area__semiconductor__development_and_design_support_mega',
      'check-show-semiconductor-knowledge-mega': '.comp_v2_0010__mega_area__semiconductor__knowledge_mega',
      'check-show-storage-products-mega': '.comp_v2_0010__mega_area__storage__products_mega',
      'check-show-storage-support-mega': '.comp_v2_0010__mega_area__storage__support_mega',
      'check-show-company-about-mega': '.comp_v2_0010__mega_area__company__about_mega',
      'check-show-common-mega': '.comp_v2_0010__mega_area__common_mega'
    };
    var className = targetList[this.id];

    if (typeof className == 'undefined') {
      return;
    }

    $(className + ' .slick-initialized').each(function (index, element) {
      $(element).slick('orientationChange');
    });
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0020').each(function (index, element) {
    var $container = $(element);
    var $slider = $container.find('.comp_v2_0020__block__slider');
    var $indicatorItems = $container.find('.comp_v2_0020__block__ingicator__content__item'); 

    var slickOptions = {
      autoplay: false,
      arrows: false,
      infinite: true,
      draggable: true,
      dots: false,
      swipeToSlide: true,
      responsive: [{
        breakpoint: 769
      }]
    }; 

    $slider.on('init', function () {
      $indicatorItems.eq(0).addClass('comp_v2_0020__block__ingicator__content__item--active');
    }); 

    $slider.on('afterChange', function (slick, currentSlide) {
      $indicatorItems.removeClass('comp_v2_0020__block__ingicator__content__item--active');
      $indicatorItems.eq(currentSlide.currentSlide).addClass('comp_v2_0020__block__ingicator__content__item--active');
    });
    $slider.slick(slickOptions); 

    $indicatorItems.on('click', function () {
      $slider.slick('slickGoTo', $indicatorItems.index(this));
    }); 

    $container.find('.comp_v2_0020__block__ingicator__content__item__bar').on('webkitTransitionEnd oTransitionEnd mozTransitionEnd transitionend', function () {
      $slider.slick('slickNext');
    });
  });
}); 

jQuery(function ($) {
  $(".comp_v2_0060 ul,.comp_v2_0060 ol").addClass("comp_v2_0060__link");
  $('.comp_v2_0060 ul>li').each(function (index, element) {
    if (element.childNodes.length == 0) {
      return;
    }

    var target = element.firstChild;

    while (target != null && target.textContent.trim() === '') {
      target = target.nextSibling;
    }

    if (target === null || target.nodeName.toLowerCase() == 'a') {
      return;
    }

    $(element).css('display', 'flex').wrapInner('<span class="disc">');
  }); 

  $('.comp_v2_0060 a img').parent().addClass('icon-none');
}); 

jQuery(function ($) {
  $('.comp_v2_0110').each(function (index, element) {
    var $container = $(element);
    var $slider = $container.find('.comp_v2_0110__slider'); 

    var slickOptions = {
      autoplay: false,
      arrows: true,
      prevArrow: '<div class="prev">PREV</div>',
      nextArrow: '<div class="next">NEXT</div>',
      centerMode: false,
      variableWidth: false,
      slidesToShow: 3,
      infinite: false,
      draggable: true,
      dots: false,
      swipeToSlide: true,
      responsive: [{
        breakpoint: 769,
        settings: {
          centerMode: true,
          variableWidth: true,
          slidesToShow: 1,
          arrows: false,
          dots: true
        }
      }]
    }; 

    if (location.search.indexOf('slider=disabled') === -1) {
      $slider.slick(slickOptions);
    } else {
      $slider.css({
        'display': 'flex',
        'flex-wrap': 'wrap'
      });
    } 


    $slider.swipeImage({
      isShow: function isShow($target) {
        if (!window.matchMedia('(max-width:768px)').matches) {
          return false;
        }

        if ($target.outerHeight() == 0) {
          return false;
        }

        if (!$slider.hasClass('slick-slider')) {
          return false;
        }

        var slick = $slider.slick('getSlick');
        return slick.slideCount > slick.slickGetOption('slidesToShow');
      },
      calcPositionTop: function calcPositionTop($target, $swipe) {
        return $target.position().top + parseInt($target.css('margin-top'), 10) + ($target.outerHeight() - $target.find('.slick-dots').outerHeight()) / 2 - $swipe.outerHeight() / 2 + 'px';
      }
    });
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0120__block__tab__item').on('click', function () {
    var $self = $(this); 

    if ($self.hasClass('comp_v2_0120__block__tab__item--active')) {
      return;
    } 


    $self.closest('.comp_v2_0120__block__tab').find('.comp_v2_0120__block__tab__item--active > span').attr('tabindex', '-1').parent().removeClass('comp_v2_0120__block__tab__item--active'); 

    $self.children('span').attr('tabindex', '0').parent().addClass('comp_v2_0120__block__tab__item--active');
  });
  $('.comp_v2_0120__block__tab__item > span').on('keydown', function (event) {
    var $self = $(this); 

    if (event.keyCode == 37) {
      var $prev = $self.parent().prev('.comp_v2_0120__block__tab__item').children('span');

      if ($prev.length > 0) {
        $prev.focus().parent().trigger('click');
      }

      return;
    } 


    if (event.keyCode == 39) {
      var $next = $self.parent().next('.comp_v2_0120__block__tab__item').children('span');

      if ($next.length > 0) {
        $next.focus().parent().trigger('click');
      }

      return;
    }
  });
  $('.comp_v2_0120__block__tab__item > span').on('click', function (event) {
    event.stopPropagation();
    $(this).parent().trigger('click');
  }); 

  setTimeout(function () {
    $('.comp_v2_0120__block__contents').each(function (index, element) {
      var muuri = new Muuri(element, {
        dragEnabled: false
      });
      var $component = $(element).closest('.comp_v2_0120');
      $component.find('.comp_v2_0120__block__tab').on('click', function (event) {
        var $target = $(event.target);
        var filter = $target.data('filter');
        muuri.filter(function (item) {
          if (typeof filter === 'undefined') {
            return true;
          }

          if (filter === '') {
            return true;
          }

          var category = $(item.getElement()).data('category');

          if (typeof category === 'undefined') {
            return false;
          }

          return category.indexOf(filter) != -1;
        });
      });
    });
  }, 300);
}); 

jQuery(function ($) {
  $(".comp_v2_0130__links__col__title").on("click", function () {
    $(this).toggleClass("open");
  }); 

  var topBtn = $('.comp_v2_0130_pagetop');
  topBtn.hide(); 

  $(window).scroll(function () {
    if ($(this).scrollTop() > 80) {
      topBtn.fadeIn();
    } else {
      topBtn.fadeOut();
    }
  }); 

  topBtn.click(function () {
    $('body, html').animate({
      scrollTop: 0
    }, 500);
    return false;
  });
  $('.comp_v2_0130').each(function (index, element) {
    var $spMenu = $(element); 

    $spMenu.on('resizeModePC', function () {
      if (!$('.comp_v2_1040').length) {
        if ($('.comp_v2_0130').css('padding-bottom') == 0) return;
        $('.comp_v2_0130').css('padding-bottom', 0);
      } 


      var panelHeight = $('.comp_v2_1040').innerHeight(); 

      if (panelHeight == 0) {
        setTimeout("$spMenu.trigger('resizeModePC')", 300);
        return;
      } 


      if ($('.comp_v2_0130').css('padding-bottom') == panelHeight) return; 

      $('.comp_v2_0130').css('padding-bottom', panelHeight);
    }); 

    $spMenu.on('resizeModeMobile', function () {
      var spMenuHeight = $('.comp_v2_0010__sp_menu_frame').innerHeight(); 

      if (spMenuHeight == 0) {
        setTimeout("$spMenu.trigger('resizeModeMobile')", 300);
        return;
      } 


      if (!$('.comp_v2_1040').length) {
        $('.comp_v2_0130').css('padding-bottom', spMenuHeight);
        return;
      }

      $('.comp_v2_0130').css('padding-bottom', spMenuHeight + $('.comp_v2_1040').innerHeight());
    }); 

    var timer = false; 

    $(window).resize(function () {
      if (timer !== false) {
        clearTimeout(timer);
      }

      timer = setTimeout(function () {
        if (window.matchMedia('(max-width:768px)').matches) {
          $spMenu.trigger('resizeModeMobile');
        } else {
          $spMenu.trigger('resizeModePC');
        }
      }, 300);
    });
  }); 

  $('.comp_v2_0130__section__item__container__column__list__item__checkbox').on('change', function () {
    $(this).closest('.comp_v2_0130').find('.comp_v2_0130__section__item__container__column__list__item__checkbox').not(this).prop('checked', false);
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0140__scroll').each(function (index, element) {
    var ps = new PerfectScrollbar(element, {
      isDoubleXScrollbar: false,
      suppressScrollY: true,
      useBothWheelAxes: true
    });
    new ResizeObserver(function () {
      ps.update();
    }).observe(element);
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0150__tab__item').on('click', function () {
    var $self = $(this); 

    if ($self.hasClass('comp_v2_0150__tab__item--active')) {
      return;
    }

    var $tabContainer = $self.closest('.comp_v2_0150__tab');
    var $contContainer = $self.closest('.comp_v2_0150').find('.comp_v2_0150__cont'); 

    $tabContainer.find('.comp_v2_0150__tab__item--active > span').attr('tabindex', '-1').parent().removeClass('comp_v2_0150__tab__item--active');
    $contContainer.find('.comp_v2_0150__cont__item--active').removeClass('comp_v2_0150__cont__item--active'); 

    $self.children('span').attr('tabindex', '0').parent().addClass('comp_v2_0150__tab__item--active');
    var $targetContainer = $contContainer.find('#' + $self.attr('aria-controls'));
    $targetContainer.addClass('comp_v2_0150__cont__item--active');
    $targetContainer.trigger('tabActive');
  }); 

  var $window = $(window);
  $('.comp_v2_0150 .comp_v2_0150__slider').each(function (index, element) {
    var displayMode = 0; 

    var $slider = $(element); 

    $slider.on('changeModePC', function () {
      var config = {
        autoplay: false,
        arrows: true,
        prevArrow: '<div class="prev">PREV</div>',
        nextArrow: '<div class="next">NEXT</div>',
        centerMode: false,
        variableWidth: false,
        slidesToShow: 3,
        infinite: false,
        draggable: true,
        dots: false,
        rows: 1,
        swipeToSlide: true
      };

      if ($slider.hasClass('slick-slider')) {
        var $slick = $slider.slick('getSlick');
        var len = $slick.$slides.length;
        var maxIndex = len - config.slidesToShow;

        if (maxIndex < 0) {
          maxIndex = 0;
        }

        var current = $slider.slick('slickCurrentSlide');

        if (current > maxIndex) {
          current = maxIndex;
          $slider.slick('slickGoTo', current, true);
        }

        $slider.slick('slickSetOption', config, true);
        $slider.slick('setPosition');
      } else {
        $slider.slick(config);
      }
    }); 

    $slider.on('changeModeMobile', function () {
      void 0;
      var config = {
        autoplay: false,
        arrows: true,
        prevArrow: '<div class="prev">PREV</div>',
        nextArrow: '<div class="next">NEXT</div>',
        centerMode: false,
        variableWidth: false,
        slidesToShow: 1,
        infinite: false,
        draggable: true,
        dots: false,
        rows: 1,
        swipeToSlide: true
      };

      if ($slider.hasClass('slick-slider')) {
        $slider.slick('slickSetOption', config, true);
        $slider.slick('setPosition');
      } else {
        $slider.slick(config);
      }
    }); 

    $slider.closest('.comp_v2_0150__cont__item').on('tabActive', function () {
      if (window.matchMedia('(max-width:768px)').matches) {
        displayMode = 2;
        $slider.trigger('changeModeMobile');
      } else {
        displayMode = 1;
        $slider.trigger('changeModePC');
      }
    }); 

    var resizeCallback = function resizeCallback() {
      if ($slider.closest('.comp_v2_0150__cont__item--active').length === 0) {
        return;
      }

      if (window.matchMedia('(max-width:768px)').matches) {
        if (displayMode == 2) {
          return;
        }

        displayMode = 2;
        $slider.trigger('changeModeMobile');
      } else {
        if (displayMode == 1) {
          return;
        }

        displayMode = 1;
        $slider.trigger('changeModePC');
      }
    };

    $window.on('resize', resizeCallback);
    resizeCallback(); 

    $slider.swipeImage({
      isShow: function isShow($target) {
        if (!window.matchMedia('(max-width:768px)').matches) {
          return false;
        }

        if ($target.outerHeight() == 0) {
          return false;
        }

        if (!$slider.hasClass('slick-slider')) {
          return false;
        }

        var slick = $slider.slick('getSlick');
        return slick.slideCount > slick.slickGetOption('slidesToShow');
      }
    });
  });
  $('.comp_v2_0150__tab__item > span').on('keydown', function (event) {
    var $self = $(this); 

    if (event.keyCode == 37) {
      var $prev = $self.parent().prev('.comp_v2_0150__tab__item').children('span');

      if ($prev.length > 0) {
        $prev.focus().parent().trigger('click');
      }

      return;
    } 


    if (event.keyCode == 39) {
      var $next = $self.parent().next('.comp_v2_0150__tab__item').children('span');

      if ($next.length > 0) {
        $next.focus().parent().trigger('click');
      }

      return;
    }
  });
}); 

jQuery(function ($) {
  var $window = $(window);

  function getPrev($current) {
    do {
      $current = $current.prev();

      if ($current.length == 0) {
        break;
      }

      if ($current.get(0).getBoundingClientRect().height > 0) {
        break;
      }
    } while ($current.length > 0);

    return $current;
  } 


  $('.comp_v2_0160').each(function (index, container) {
    function changeCurrent(posY, linkList) {
      var activeList = linkList.filter(function (element) {
        return Math.floor(element.$target.offset().top) <= posY;
      });

      if (activeList.length > 0) {
        var lastY = Math.floor(activeList[activeList.length - 1].$target.offset().top);
        activeList = linkList.filter(function (element) {
          return Math.floor(element.$target.offset().top) == lastY;
        });
      } 


      if (window.matchMedia("(max-width:768px)").matches) {
        var getHeaderHeight = function getHeaderHeight() {
          var tempStickiesHeight = 0;
          $('.comp_v2_0010').each(function (index, element) {
            tempStickiesHeight += Math.floor(element.getBoundingClientRect().height);
          });
          return tempStickiesHeight;
        }; 


        if ($container.css("top") != getHeaderHeight()) {
          Stickyfill.remove(container);
          container.style.top = getHeaderHeight() + 'px'; 

          Stickyfill.add(container);
        }
      } else {
        if ($container.css("top") != 0) {
          Stickyfill.remove(container);
          container.style.top = '0px'; 

          Stickyfill.add(container);
        }
      } 


      if (userAgent.indexOf('trident') == -1 && userAgent.indexOf('edge') == -1) {} 


      for (var i = 0; i < linkList.length; i++) {
        if (activeList.indexOf(linkList[i]) != -1) {
          continue;
        }

        linkList[i].$element.removeClass('comp_v2_0160__list__item--active');
      } 


      if (activeList.length > 0) {
        for (var _i = 0; _i < activeList.length; _i++) {
          activeList[_i].$element.addClass('comp_v2_0160__list__item--active');
        }

        $container.find('.comp_v2_0160__scroll').stop(false, false).animate({
          scrollLeft: activeList[0].$element.position().left
        }, 300);
      }
    }

    ; 

    Stickyfill.add(container);
    var $container = $(container);
    var userAgent = window.navigator.userAgent.toLowerCase(); 

    $container.find('.comp_v2_0160__scroll').each(function (index, element) {
      var ps = new PerfectScrollbar(element, {
        isDoubleXScrollbar: false,
        suppressScrollY: true,
        useBothWheelAxes: true
      });
      new ResizeObserver(function () {
        ps.update();
      }).observe(element);
    }); 

    var $ul = $container.find('.comp_v2_0160__list');

    if ($ul.data('auto') === 1) {
      $('h2[id][data-navititle]').each(function (index, element) {
        var $target = $(element);
        var id = String($target.attr('id'));
        var navititle = String($target.data('navititle'));

        if (id === "") {
          return;
        }

        if (navititle === "") {
          return;
        }

        $ul.append($('<li>').append($('<a class="comp_v2_0160__list__item">').attr('href', '#' + id).html(navititle)));
      });
    }

    var linkList = $container.find('a').map(function (index, element) {
      var $element = $(element);
      var result = {
        $element: $element,
        $target: null,
        top: null 

      };
      var href = $element.attr('href');
      var pos = href.indexOf('#');

      if (pos > -1) {
        var id = href.slice(pos + 1);
        var $target = $('#' + id);

        if ($target.length > 0) {
          result.$target = $target;
          result.top = $target.offset().top;
        }
      } 


      if (result.$target === null) {
        return;
      }

      return result;
    }).toArray(); 

    linkList.sort(function (a, b) {
      return a.top - b.top;
    }); 

    $container.find('a').on('dragstart', function (e) {
      e.preventDefault();
    }); 

    $window.on('scroll', function () {
      changeCurrent($container.offset().top + container.getBoundingClientRect().height, linkList);
    });
    changeCurrent($container.offset().top + container.getBoundingClientRect().height, linkList);
    var observer = new IntersectionObserver(function (entries) {
      for (var i = 0; i < entries.length; i++) {
        var entry = entries[i];
        var $title = $container.find('.comp_v2_0160__title');

        if (entry.isIntersecting) {
          void 0; 

          $title.css('display', 'none');
          $title.html('');
        } else {
          void 0; 

          var $targets = $('h1').filter(function (index, element) {
            return $(element).closest('header').length == 0;
          });
          $title.html($targets.html());
          $title.css('display', 'block');
        }
      }
    }); 

    var $current = $container;
    var $prev = $current.prev(); 

    if (userAgent.indexOf('trident') != -1 || userAgent.indexOf('edge') != -1) {
      $prev = $prev.prev();
    } 


    if ($prev.length == 0) {
      do {
        $current = $current.parent(); 

        if ($current.prop('tagName').toLowerCase() == 'body') {
          break;
        }

        $prev = getPrev($current);
      } while ($prev.length == 0);
    }

    void 0; 

    if ($prev.length > 0) {
      observer.observe($prev.get(0));
    }

    var keydownAfterScrollFlag = false; 

    $container.find('.comp_v2_0160__list__item').on('focus', function (event) {
      if (keydownAfterScrollFlag == false) {
        return;
      }

      keydownAfterScrollFlag = false;
      var $self = $(this);
      var href = $self.attr('href');
      var pos = href.indexOf('#');

      if (pos > -1) {
        var id = href.slice(pos + 1);
        scrollTo(id);
      }
    });
    $container.find('.comp_v2_0160__list__item').on('keydown', function (event) {
      var $self = $(this); 

      if (event.keyCode == 37) {
        var $item = $self.closest('li').prev().find('.comp_v2_0160__list__item');

        if ($item.length > 0) {
          keydownAfterScrollFlag = true;
          $item.focus();
        }

        return;
      } 


      if (event.keyCode == 39) {
        var _$item2 = $self.closest('li').next().find('.comp_v2_0160__list__item');

        if (_$item2.length > 0) {
          _$item2.focus();

          keydownAfterScrollFlag = true; 
        }

        return;
      } 


      if (event.keyCode == 9) {
        if (event.shiftKey) {
          $self.closest('ul').find('li').eq(0).find('.comp_v2_0160__list__item').focus();
          return;
        }

        event.preventDefault();

        if ($self.length > 0) {
          var href = $self.attr('href');
          var pos = href.indexOf('#');

          if (pos > -1) {
            var id = href.slice(pos + 1);
            var $target = $('#' + id);
            var tabindex = $target.attr('tabindex');

            if (typeof tabindex === 'undefined') {
              $target.attr('tabindex', '0');
            }

            $target.focus();

            if (typeof tabindex === 'undefined') {
              $target.attr('tabindex', '-1');
            }

            void 0;
          }
        }
      }
    });
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0180 form').on('submit', function (event) {
    var $form = $(this); 

    setTimeout(function () {
      if (!event.returnValue) {
        return;
      }

      $form.find('input,select,button').prop('disabled', true);
      $form.find('.comp_v2_0200__slider__nouislider').attr('disabled', 'disabled');
      $form.find('.noUi-handle').removeAttr('tabindex'); 

      var $loading = $('<div class="comp_v2_0220__result__btn--loading__spinner">');

      for (var i = 0; i < 12; i++) {
        $loading.append($('<div>'));
      }

      var $button = $form.find('.comp_v2_0220__result__btn[type="submit"]');
      $button.prepend($loading);
      $button.addClass('comp_v2_0220__result__btn--loading').removeClass('comp_v2_0220__result__btn');
      setTimeout(function () {
        $loading.remove();
        $button.addClass('comp_v2_0220__result__btn').removeClass('comp_v2_0220__result__btn--loading');
        $form.find('input,select,button').prop('disabled', false);
        $form.find('.noUi-handle').attr('tabindex', 0);
        $form.find('.comp_v2_0200__slider__nouislider').removeAttr('disabled');
      }, 20000);
    }, 0); 

    return true;
  });
}); 

jQuery(function ($) {
  $(".comp_v2_0190__check select").each(function (index, element) {
    var $this = $(element);
    $this.select2({
      placeholder: $this.data("placeholder")
    }); 

    $this.closest('form').on('reset', function (e) {
      void 0;
      e.preventDefault();
      $this.val('').trigger('change');
    });
  });
  $(".comp_v2_0190__multicheck select").each(function (index, element) {
    var $this = $(element);
    $this.select2({
      closeOnSelect: false,
      placeholder: $this.data("placeholder"),
      allowHtml: true,
      allowClear: true,
      tags: true
    }); 

    $this.closest('form').on('reset', function (e) {
      void 0;
      e.preventDefault();
      $this.val([]).trigger('change');
    });
  });
  $(".comp_v2_0190__check").each(function (index, element) {
    var $this = $(element);
    $this.closest('form').on('reset', function (e) {
      $this.find(':checkbox').each(function (i, item) {
        this.checked = item.defaultChecked;
      });
    });
  });
  $('.comp_v2_0190__frame').each(function (index, element) {
    var $select = $(element).find('.comp_v2_0190__check select,.comp_v2_0190__multicheck select');

    if ($select.length == 0) {
      return;
    }

    new ResizeObserver(function () {
      $select.data('select2').selection.resizeSearch();
    }).observe(element);
  });
}); 

jQuery(function ($) {
  var arr2range = function arr2range(values) {
    var evenFlag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var result = {}; 

    if (values.length == 0) {
      return result;
    } 


    values.sort(function (a, b) {
      return a - b;
    });
    var max = values[values.length - 1];
    var min = values[0];
    result['min'] = min;

    for (var i = 1; i < values.length - 1; i++) {
      var pos = void 0;

      if (evenFlag) {
        pos = 100 / (values.length - 1) * i;
      } else {
        pos = Math.abs(values[i] - min) / (max - min) * 100;
      }

      result[pos] = values[i];
    }

    result['max'] = max;
    return result;
  };


  var makeValue = function makeValue(id, min, max, sort) {
    return id + '|' + min + ',' + max + '|' + sort;
  };


  var getNearValue = function getNearValue(range, value) {
    void 0;
    void 0;
    void 0;
    var values = Object.keys(range).map(function (key) {
      return range[key];
    }); 

    if (value === '') {
      return null;
    }

    value = Number(value); 

    if (isNaN(value)) {
      return null;
    } 


    if (values.length == 0) {
      return null;
    } 


    if (values.includes(value)) {
      return value;
    }

    var result = values[0];

    for (var i = 0; i < values.length; i++) {
      var v = values[i];

      if (v > value) {
        if (value - result > v - value) {
          result = v;
        }

        break;
      }

      result = v;
    }

    return result;
  };


  var getDecimalPointLength = function getDecimalPointLength(number) {
    var s = number.toString();
    var d = s.indexOf('.');
    return d < 0 ? 0 : s.length - d - 1;
  };


  var getKeyByValue = function getKeyByValue(object, value) {
    var keys = Object.keys(object);

    for (var i = 0; i < keys.length; i++) {
      if (object[keys[i]] === value) {
        return keys[i];
      }
    }

    return null;
  };

  $('.comp_v2_0200__slider__nouislider').each(function (index, element) {
    var $self = $(element);
    var $container = $self.closest('.comp_v2_0200__slider');
    var $inputLower = $container.find('.comp_v2_0200__slider__nouislider-min');
    var $inputUpper = $container.find('.comp_v2_0200__slider__nouislider-max');
    var isForce = typeof $container.data('force') !== 'undefined';
    var evenFlag = false;

    if (typeof $container.data('interval') !== 'undefined') {
      evenFlag = $container.data('interval') == 'even';
    } 


    var $hidden = $('<input type="hidden" name="' + $container.data('name') + '" value="">');
    $container.append($hidden);
    var values = $container.data('values').split(',');
    values = values.map(function (v) {
      return Number(v);
    });
    var range = arr2range(values, evenFlag); 

    var min = $container.data('min');

    if (typeof min !== 'undefined' && min !== null && min !== '') {
      min = Number(min);
    } else {
      min = range.min;
    }

    min = getKeyByValue(range, min);

    if (min === 'min') {
      min = 0;
    } else if (min === 'max') {
      min = 100;
    }

    void 0; 

    var max = $container.data('max');

    if (typeof max !== 'undefined' && max !== null && max !== '') {
      max = Number(max);
    } else {
      max = range.max;
    }

    max = getKeyByValue(range, max);

    if (max === 'min') {
      max = 0;
    } else if (max === 'max') {
      max = 100;
    }

    void 0; 

    var dpl = 0;
    void 0;

    for (var i = 0; i < values.length; i++) {
      var d = getDecimalPointLength(values[i]);

      if (d > dpl) {
        dpl = d;
      }
    }

    var step = 1 / Math.pow(10, dpl); 

    $inputLower.attr('step', step);
    $inputUpper.attr('step', step);
    void 0;
    var slider = noUiSlider.create(element, {
      range: range,
      start: [min, max],
      snap: true,
      connect: true,
      tooltips: true,
      keyboardSupport: false,
      format: {
        to: function to(value) {
          return value;
        },
        from: function from(value) {
          return value;
        }
      }
    });
    $self.find('.noUi-handle').attr('tabindex', 0);
    $self.find('.noUi-handle').on('keydown', function (event) {
      var $handle = $(this); 

      var attrDisabled = $handle.closest('.noUi-target').attr('disabled');

      if (typeof attrDisabled !== 'undefined' && attrDisabled !== false) {
        return;
      }

      var nowValue = Number($handle.attr('aria-valuenow')); 

      if (event.keyCode == 37) {
        var _index = values.indexOf(nowValue) - 1;

        if (_index < 0) {
          return;
        }

        var newValue = values[_index];
        newValue = getKeyByValue(range, newValue);

        if (newValue === 'min') {
          newValue = 0;
        } else if (newValue === 'max') {
          newValue = 100;
        }

        var moveValues = [null, null];

        if ($handle.hasClass('noUi-handle-lower')) {
          moveValues = [newValue, null];
        } else if ($handle.hasClass('noUi-handle-upper')) {
          moveValues = [null, newValue];
        }

        slider.set(moveValues);
        return;
      } 


      if (event.keyCode == 39) {
        var _index2 = values.indexOf(nowValue) + 1;

        if (_index2 >= values.length) {
          return;
        }

        var _newValue = values[_index2];
        _newValue = getKeyByValue(range, _newValue);

        if (_newValue === 'min') {
          _newValue = 0;
        } else if (_newValue === 'max') {
          _newValue = 100;
        }

        var _moveValues = [null, null];

        if ($handle.hasClass('noUi-handle-lower')) {
          _moveValues = [_newValue, null];
        } else if ($handle.hasClass('noUi-handle-upper')) {
          _moveValues = [null, _newValue];
        }

        slider.set(_moveValues);
        return;
      }
    }); 

    slider.on('update', function (values, handle) {
      void 0;
      void 0;
      void 0;

      if (handle == 0) {
        $inputLower.val(values[handle]);
      } else if (handle == 1) {
        $inputUpper.val(values[handle]);
      }
    }); 

    $inputLower.on('change', function () {
      void 0;
      void 0;
      var value = $(this).val();
      value = getNearValue(range, value);
      void 0;
      slider.set([value, null]);
    }); 

    $inputUpper.on('change', function () {
      void 0;
      void 0;
      var value = $(this).val();
      value = getNearValue(range, value);
      slider.set([null, value]);
    }); 

    $self.closest('form').on('submit', function () {
      void 0;
      $inputLower.prop('disabled', true);
      $inputUpper.prop('disabled', true);
      var lower = $inputLower.val();
      var upper = $inputUpper.val();

      if (isForce || lower != range['min'] || upper != range['max']) {
        $hidden.val(makeValue($container.data('id'), $inputLower.val(), $inputUpper.val(), 'numeric'));
      } else {
        $hidden.prop('disabled', true);
      }

      return true;
    }); 

    $self.closest('form').on('reset', function (e) {
      void 0;
      e.preventDefault();
      slider.reset();
    });
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0210 select').each(function (index, element) {
    void 0;
    var $self = $(element);
    $self.closest('form').on('reset', function (e) {
      void 0;
      e.preventDefault();
      $self.find('option').each(function (index, element) {
        void 0;
        void 0;
        element.selected = element.defaultSelected;
      });
    });
  });
}); 

jQuery(function ($) {
  var $window = $(window); 

  $('.comp_v2_0230 ul>li').each(function (index, element) {
    if (element.childNodes.length == 0) {
      return;
    }

    var target = element.firstChild;

    while (target != null && target.textContent.trim() === '') {
      target = target.nextSibling;
    }

    if (target === null || target.nodeName.toLowerCase() == 'a') {
      return;
    }

    $(element).css('display', 'flex').wrapInner('<span class="disc">');
  }); 

  $('.comp_v2_0230 a img').parent().addClass('icon-none');
  $('.comp_v2_0230__table__2cell td img.imageModal').imageModal(); 

  $('.comp_v2_0230 .comp_v2_0230--filter').each(function (index, element) {
    var $container = $(element);
    var $filter1 = $container.find('.comp_v2_0230__select__selecter--filter1 select');
    var $table = $container.find('table'); 

    if ($filter1.length == 0) {
      return;
    } 


    $filter1.on('change', function () {
      var value = $(this).val();
      var $trList = $table.find('tbody tr');

      for (var i = 0; i < $trList.length;)
      {
        var $column = $trList.eq(i).children(':first');
        var isShow = value == "" || value == $column.text();
        var rowspan = $column.attr('rowspan');

        if (typeof rowspan === 'undefined' || rowspan === false) {
          rowspan = 1;
        }

        for (var j = 0; j < Number(rowspan); j++) {
          try {
            if (!isShow) {
              $trList.eq(i).addClass('comp_v2_0230--filter--hide');
              continue;
            } 


            $trList.eq(i).removeClass('comp_v2_0230--filter--hide');
          } finally {
            i++;
          }
        }
      }
    }); 

    $window.on('resize', function () {
      $filter1.css('width', window.matchMedia('(max-width:768px)').matches ? '100%' : $table.find('thead tr th:first').outerWidth() + 'px');
    }); 

    var list = [];
    var $trList = $table.find('tbody tr');

    for (var i = 0; i < $trList.length; i++) {
      var $column = $trList.eq(i).children(':first');
      list.push($column.text());
      var rowspan = $column.attr('rowspan');

      if (typeof rowspan === 'undefined' || rowspan === false) {
        continue;
      }

      i += Number(rowspan) - 1;
    }

    for (var _i2 = 0; _i2 < list.length; _i2++) {
      $('<option>').val(list[_i2]).text(list[_i2]).appendTo($filter1);
    }

    $filter1.css('width', window.matchMedia('(max-width:768px)').matches ? '100%' : $table.find('thead tr th:first').outerWidth() + 'px');
  }); 

  $('.comp_v2_0230__scroll,.comp_v2_0230__scroll--shadow').each(function (index, element) {
    var ps = new PerfectScrollbar(element, {
      suppressScrollY: true
    });
    new ResizeObserver(function () {
      ps.update();
    }).observe(element);
  }); 

  $('.comp_v2_0230__scroll,.comp_v2_0230__scroll--shadow').swipeImage();
}); 

jQuery(function ($) {
  $('.comp_v2_0240 figure img.imageModal').imageModal();
}); 

jQuery(function ($) {
  $('.comp_v2_0270__media_block figure img.imageModal').imageModal();
  $('.comp_v2_0270__content_block__sentence ul>li').each(function (index, element) {
    if (element.childNodes.length == 0) {
      return;
    }

    var target = element.firstChild;

    while (target != null && target.textContent.trim() === '') {
      target = target.nextSibling;
    }

    if (target === null || target.nodeName.toLowerCase() == 'a') {
      return;
    }

    $(element).css('display', 'flex').wrapInner('<span class="disc">');
  });
}); 

jQuery(function ($) {
  var $window = $(window); 

  $('.comp_v2_0290').each(function (index, element) {
    var displayMode = 0;
    var $container = $(element);
    var $slider = $container.find('.comp_v2_0290__slider'); 

    $window.on('changeModePC', function () {
      if ($slider.hasClass('slick-slider')) {
        $slider.slick('unslick');
      }
    }); 

    $window.on('changeModeMobile', function () {
      var config = {
        autoplay: false,
        arrows: false,
        centerMode: false,
        variableWidth: false,
        slidesToShow: 3,
        infinite: false,
        draggable: true,
        dots: true,
        swipeToSlide: true
      };

      if ($slider.hasClass('slick-slider')) {
        $slider.slick('slickSetOption', config);
        $slider.slick('refresh');
      } else {
        if (location.search.indexOf('slider=disabled') === -1) {
          $slider.slick(config);
        }
      }
    }); 

    $window.on('changeModeMobileMini', function () {
      var config = {
        autoplay: false,
        arrows: false,
        centerMode: false,
        variableWidth: false,
        slidesToShow: 2,
        infinite: false,
        draggable: true,
        dots: true,
        swipeToSlide: true
      };

      if ($slider.hasClass('slick-slider')) {
        $slider.slick('slickSetOption', config);
        $slider.slick('refresh');
      } else {
        if (location.search.indexOf('slider=disabled') === -1) {
          $slider.slick(config);
        }
      }
    }); 

    $window.on('changeModeMobileTinyMini', function () {
      var config = {
        autoplay: false,
        arrows: false,
        centerMode: false,
        variableWidth: false,
        slidesToShow: 1,
        infinite: false,
        draggable: true,
        dots: true,
        swipeToSlide: true
      };

      if ($slider.hasClass('slick-slider')) {
        $slider.slick('slickSetOption', config);
        $slider.slick('refresh');
      } else {
        if (location.search.indexOf('slider=disabled') === -1) {
          $slider.slick(config);
        }
      }
    });

    var resizeEvent = function resizeEvent() {
      if (window.matchMedia('(max-width:300px)').matches) {
        if (displayMode == 4) {
          return;
        }

        displayMode = 4;
        $slider.trigger('changeModeMobileTinyMini');
      } else if (window.matchMedia('(max-width:460px)').matches) {
        if (displayMode == 3) {
          return;
        }

        displayMode = 3;
        $slider.trigger('changeModeMobileMini');
      } else if (window.matchMedia('(max-width:768px)').matches) {
        if (displayMode == 2) {
          return;
        }

        displayMode = 2;
        $window.trigger('changeModeMobile');
      } else {
        if (displayMode == 1) {
          return;
        }

        displayMode = 1;
        $window.trigger('changeModePC');
      }
    }; 


    $window.on('resize', resizeEvent);
    resizeEvent(); 

    $slider.swipeImage({
      isShow: function isShow($target) {
        if (!window.matchMedia('(max-width:768px)').matches) {
          return false;
        }

        if ($target.outerHeight() == 0) {
          return false;
        }

        if (!$slider.hasClass('slick-slider')) {
          return false;
        }

        var slick = $slider.slick('getSlick');
        return slick.slideCount > slick.slickGetOption('slidesToShow');
      },
      calcPositionTop: function calcPositionTop($target, $swipe) {
        return $target.position().top + parseInt($target.css('margin-top'), 10) + ($target.outerHeight() - $target.find('.slick-dots').outerHeight()) / 2 - $swipe.outerHeight() / 2 + 'px';
      }
    });
  });
}); 

jQuery(function ($) {
  function getActiveClass($target) {
    var classList = $target.attr('class').split(' ');

    for (var i = 0; i < classList.length; i++) {
      if (classList[i].lastIndexOf('--active') !== -1) {
        return classList[i];
      }
    }

    return '';
  }


  $('.comp_v2_0350__frame [role="tab"]').on('click', function () {
    var $tab = $(this); 

    if ($tab.attr('aria-selected') == 'true') {
      return;
    }

    var $component = $tab.closest('.comp_v2_0350__frame');
    var $panel = $component.find('#' + $tab.attr('aria-controls'));
    var $activeTab = $component.find('[aria-selected="true"]');
    var $activePanel = $component.find('#' + $activeTab.attr('aria-controls'));
    var activeTabClass = getActiveClass($activeTab);
    var activePanelClass = getActiveClass($activePanel); 

    $activeTab.children('span').attr('tabindex', '-1').parent().removeClass(activeTabClass).attr('aria-selected', 'false');
    $activePanel.attr('aria-disabled', 'true').removeClass(activePanelClass); 

    $tab.children('span').attr('tabindex', '0').parent().addClass(activeTabClass).attr('aria-selected', 'true');
    $panel.removeAttr('aria-disabled').addClass(activePanelClass);
    $panel.trigger('tabActive');
  });

  $('.comp_v2_0350__frame [role="tab"] > span').on('keydown', function (event) {
    var $self = $(this); 

    if (event.keyCode == 37) {
      var $prev = $self.parent().prev('[role="tab"]').children('span');

      if ($prev.length > 0) {
        $prev.focus().parent().trigger('click');
      }

      return;
    } 


    if (event.keyCode == 39) {
      var $next = $self.parent().next('[role="tab"]').children('span');

      if ($next.length > 0) {
        $next.focus().parent().trigger('click');
      }

      return;
    }
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0360 ul>li').each(function (index, element) {
    if (element.childNodes.length == 0) {
      return;
    }

    var target = element.firstChild;

    while (target != null && target.textContent.trim() === '') {
      target = target.nextSibling;
    }

    if (target === null || target.nodeName.toLowerCase() == 'a') {
      return;
    }

    $(element).css('display', 'flex').wrapInner('<span class="disc">');
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0370__checkbox__all').on('change', function () {
    var $self = $(this); 

    var checked = $self.prop('checked'); 

    var $block = $self.closest('.comp_v2_0370'); 

    $block.find('.comp_v2_0370__table__checkbox').prop('checked', checked); 

    $block.find('.comp_v2_0370__checkbox__all').not($self).prop('checked', checked); 

    if (checked) {
      $block.find('.comp_v2_0370__button--btn').removeClass('comp_v2_0370__button--btn--hide');
    } else {
      $block.find('.comp_v2_0370__button--btn').addClass('comp_v2_0370__button--btn--hide');
    }
  }); 

  $('.comp_v2_0370__table__checkbox').on('change', function () {
    var $self = $(this); 

    var $block = $self.closest('.comp_v2_0370'); 

    var $checkboxes1 = $block.find('.comp_v2_0370__table__checkbox'); 

    var $checkboxes2 = $block.find('.comp_v2_0370__table__checkbox:checked'); 

    var checked = $checkboxes1.length == $checkboxes2.length; 

    $block.find('.comp_v2_0370__checkbox__all').prop('checked', checked); 

    if ($checkboxes2.length > 0) {
      $block.find('.comp_v2_0370__button--btn').removeClass('comp_v2_0370__button--btn--hide');
    } else {
      $block.find('.comp_v2_0370__button--btn').addClass('comp_v2_0370__button--btn--hide');
    }
  }); 

  $('.comp_v2_0370__checkbox__all').on('keydown', function (event) {
    var $self = $(this); 

    if (event.keyCode == 13) {
      event.preventDefault();
      $self.trigger('click');
      return;
    }
  }); 

  $('.comp_v2_0370__table__read_more__button,.comp_v2_0370__table__close__button').on('keydown', function (event) {
    var $self = $(this); 

    if (event.keyCode == 13) {
      event.preventDefault();
      $self.trigger('click');
      return;
    }
  }); 

  $('.comp_v2_0370__table__close__button').on('click', function (event) {
    var $target = $(event.target);
    var $trClose = $target.closest('.comp_v2_0370__table__close');
    var $trToggleFirst = $trClose.prevAll('.comp_v2_0370__table__read_more').next();
    var $window = $(window);
    $window.scrollTop($window.scrollTop() - ($trClose.offset().top - $trToggleFirst.offset().top));
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0380 figure img.imageModal').imageModal();
}); 

jQuery(function ($) {
  $('.comp_v2_0400__media_block figure img.imageModal').imageModal();
  $('.comp_v2_0400__content_block__sentence ul,.comp_v2_0400__content_block__sentence ol').addClass('comp_v2_0400__link');
  $('.comp_v2_0400__content_block__sentence ul>li').each(function (index, element) {
    if (element.childNodes.length == 0) {
      return;
    }

    var target = element.firstChild;

    while (target != null && target.textContent.trim() === '') {
      target = target.nextSibling;
    }

    if (target === null || target.nodeName.toLowerCase() == 'a') {
      return;
    }

    $(element).css('display', 'flex').wrapInner('<span class="disc">');
  });
}); 

jQuery(function ($) {
  var $window = $(window);
  $('.comp_v2_0441__slider').each(function (index, element) {
    var $slider = $(element);
    var type = $slider.data('type');
    var columnPc = $slider.data('pc-column');
    var columnMb = $slider.data('mb-column') || 2;
    var sliderOptions = {
      'strip': {
        autoplay: false,
        arrows: false,
        centerMode: false,
        variableWidth: false,
        slidesToShow: columnPc,
        infinite: false,
        draggable: true,
        dots: true,
        rows: 1,
        swipeToSlide: true,
        responsive: [{
          breakpoint: 769,
          settings: {
            slidesToShow: 1,
            rows: 2
          }
        }]
      },
      'card': {
        autoplay: false,
        arrows: false,
        centerMode: false,
        variableWidth: false,
        slidesToShow: columnPc,
        infinite: false,
        draggable: true,
        dots: true,
        rows: 1,
        swipeToSlide: true,
        responsive: [{
          breakpoint: 769,
          settings: {
            slidesToShow: columnMb,
            rows: 1
          }
        }]
      }
    }; 

    var agent = window.navigator.userAgent.toLowerCase();

    if (agent.indexOf('safari') > -1 && agent.indexOf('chrome') === -1) {
      $slider.breakpointFlag = false;
      $slider.on('init breakpoint', function (event, slick) {
        slick.$slider.breakpointFlag = true;
      });
      $slider.on('setPosition', function (event, slick) {
        if (!slick.$slider.breakpointFlag) {
          return;
        }

        slick.$slider.breakpointFlag = false;
        setTimeout(function () {
          slick.$slider.find('.comp_v2_0441__slider__item__content__caption').each(function (index, element) {
            element.style.display = 'block';
            element.offsetHeight;
            element.style.display = '-webkit-box';
          });
        }, 100);
      });
    } 


    if (location.search.indexOf('slider=disabled') === -1) {
      $slider.slick(sliderOptions[type]);
    } else {
      $slider.css({
        'display': 'flex',
        'flex-wrap': 'wrap'
      });
    } 


    $slider.swipeImage({
      isShow: function isShow($target) {
        if (!window.matchMedia('(max-width:768px)').matches) {
          return false;
        }

        if ($target.outerHeight() == 0) {
          return false;
        }

        if (!$slider.hasClass('slick-slider')) {
          return false;
        }

        var slick = $slider.slick('getSlick');
        return slick.slideCount > slick.slickGetOption('slidesToShow');
      },
      calcPositionTop: function calcPositionTop($target, $swipe) {
        return $target.position().top + parseInt($target.css('margin-top'), 10) + ($target.outerHeight() - $target.find('.slick-dots').outerHeight()) / 2 - $swipe.outerHeight() / 2 + 'px';
      }
    });
  });
}); 

jQuery(function ($) {
  var $window = $(window);
  $('.comp_v2_0442__slider').each(function (index, element) {
    var $slider = $(element);
    var type = $slider.data('type');
    var sliderOptions = {
      'strip': {
        autoplay: false,
        arrows: false,
        centerMode: false,
        variableWidth: false,
        slidesToShow: 1,
        infinite: false,
        draggable: true,
        dots: true,
        rows: 2,
        swipeToSlide: true
      },
      'card': {
        autoplay: false,
        arrows: false,
        centerMode: false,
        variableWidth: false,
        slidesToShow: 1,
        infinite: false,
        draggable: true,
        dots: true,
        rows: 1,
        swipeToSlide: true
      }
    };
    var displayMode = 0; 

    var resizeEvent = function resizeEvent() {
      if (window.matchMedia('(max-width:768px)').matches) {
        if (displayMode == 2) {
          return;
        }

        displayMode = 2; 

        $slider.not('.slick-initialized').slick(sliderOptions[type]);
      } else {
        if (displayMode == 1) {
          return;
        }

        displayMode = 1; 

        if ($slider.hasClass('slick-slider')) {
          $slider.slick('unslick');
        }
      }
    };

    $window.on('resize', resizeEvent);
    resizeEvent(); 

    $slider.swipeImage({
      isShow: function isShow($target) {
        if (!window.matchMedia('(max-width:768px)').matches) {
          return false;
        }

        if ($target.outerHeight() == 0) {
          return false;
        }

        if (!$slider.hasClass('slick-slider')) {
          return false;
        }

        var slick = $slider.slick('getSlick');
        return slick.slideCount > slick.slickGetOption('slidesToShow');
      },
      calcPositionTop: function calcPositionTop($target, $swipe) {
        return $target.position().top + parseInt($target.css('margin-top'), 10) + ($target.outerHeight() - $target.find('.slick-dots').outerHeight()) / 2 - $swipe.outerHeight() / 2 + 'px';
      }
    });
  });
}); 

jQuery(function ($) {
  function setFormUpdate($component) {
    var $button = $component.find('.comp_v2_0460__box__body__search__button');
    var word = $component.find('.comp_v2_0460__box__body__search__pnum__input').val();
    $button.prop('disabled', word.length < 3);
  }

  $('.comp_v2_0460__box__body__search__pnum__input').on('keyup', function () {
    var $component = $(this).closest('.comp_v2_0460');
    setFormUpdate($component);
  });

  function submitAction($button) {
    var $component = $button.closest('.comp_v2_0460');
    var url = $button.data('url');
    var $input = $component.find('.comp_v2_0460__box__body__search__pnum__input');
    var $categorySelect = $component.find('.comp_v2_0460__box__body__search__category__select');
    var word = $input.val(); 

    if (word.length < 3) {
      return;
    } 


    $component.find('input,select,button').prop('disabled', true);
    var $loading = $('<div class="comp_v2_0460__box__body__search__button--loading__spinner">');

    for (var i = 0; i < 12; i++) {
      $loading.append($('<div>'));
    }

    $button.prepend($loading);
    $button.addClass('comp_v2_0460__box__body__search__button--loading').removeClass('comp_v2_0460__box__body__search__button');
    setTimeout(function () {
      $loading.remove();
      $button.addClass('comp_v2_0460__box__body__search__button').removeClass('comp_v2_0460__box__body__search__button--loading');
      $component.find('input,select,button').prop('disabled', false);
    }, 20000); 

    url = url.replace('.html', ''); 

    url += '.2'; 

    url += '.';

    if ($categorySelect.length > 0) {
      url += $categorySelect.val();
    } else {
      url += 'all';
    } 


    url += '.all'; 

    url += '.';

    if (word.length > 0) {
      word = escapeUrlChar(word);
      url += encodeURIComponent(word);
    }

    url += '.html';
    location.href = url;
  }

  $('.comp_v2_0460__box__body__search__button').on('click', function () {
    var $button = $(this);
    submitAction($button);
  });
  $('.comp_v2_0460__box__body__search__pnum__input').on('keydown', function (event) {
    if (event.keyCode == 13) {
      var $button = $(this).closest('.comp_v2_0460__box__body__search').find('.comp_v2_0460__box__body__search__button');
      submitAction($button);
    }
  }); 

  $('.comp_v2_0460__box__body__accordion__title').on('click', function () {
    var $self = $(this);
    $self.closest('.comp_v2_0460').find('.comp_v2_0460__box__body__accordion').toggleClass('open');
  });
  $('.comp_v2_0460__box__body__accordion__title').on('keydown', function (event) {
    var $self = $(this); 

    if (event.keyCode == 13 || event.keyCode == 32) {
      event.preventDefault();
      $self.closest('.comp_v2_0460').find('.comp_v2_0460__box__body__accordion').toggleClass('open');
    }
  });
  $('.comp_v2_0460').each(function (index, element) {
    setFormUpdate($(element));
  });
}); 

jQuery(function ($) {
  var $window = $(window);

  function chipHelpPositionCorrection($container) {
    var $label = $container.find('.comp_v2_0461__table__level_th');

    if ($label.length == 0) {
      return;
    }

    var $box = $container.find('.comp_v2_0461__chip_help');
    $box.css({
      'left': $label.offset().left,
      'top': $label.offset().top + $label.outerHeight()
    });
  } 


  $('.comp_v2_0461__scroll,.comp_v2_0461__scroll--shadow').each(function (index, element) {
    var $element = $(element);
    var $container = $element.closest('.comp_v2_0461');
    $element.on('ps-scroll-x ps-scroll-y', function () {
      chipHelpPositionCorrection($container);
    });
    var ps = new PerfectScrollbar(element, {
      suppressScrollY: true
    });
    new ResizeObserver(function () {
      chipHelpPositionCorrection($container);
      ps.update();
    }).observe(element);
    chipHelpPositionCorrection($container);
  }); 

  $('.comp_v2_0461__scroll,.comp_v2_0461__scroll--shadow').swipeImage();
}); 

jQuery(function ($) {
  $('.comp_v2_0470__scroll').each(function (index, element) {
    var ps = new PerfectScrollbar(element, {
      suppressScrollY: true
    });
    new ResizeObserver(function () {
      ps.update();
    }).observe(element);
  }); 

  $('.comp_v2_0470__scroll').swipeImage();
}); 

jQuery(function ($) {
  function submitAction($button) {
    var $component = $button.closest('.comp_v2_0540');
    var url = $button.data('url');
    var $input = $component.find('.comp_v2_0540__inner__searchbox__input input');
    var word = $input.val(); 

    $component.find('input,select,button').prop('disabled', true);
    var $loading = $('<div class="comp_v2_0540__inner__searchbox__btn--loading__spinner">');

    for (var i = 0; i < 12; i++) {
      $loading.append($('<div>'));
    }

    $button.prepend($loading);
    $button.addClass('comp_v2_0540__inner__searchbox__btn--loading').removeClass('comp_v2_0540__inner__searchbox__btn');
    setTimeout(function () {
      $loading.remove();
      $button.addClass('comp_v2_0540__inner__searchbox__btn').removeClass('comp_v2_0540__inner__searchbox__btn--loading');
      $component.find('input,select,button').prop('disabled', false);
    }, 20000); 

    if (word.length == 0) {
      location.href = url;
      return;
    }

    url = url.replace('.html', ''); 

    url += '.1'; 

    url += '.1'; 

    url += '.';

    if (word.length > 0) {
      word = escapeUrlChar(word);
      url += encodeURIComponent(word);
    }

    url += '.html';
    location.href = url;
  }

  $('.comp_v2_0540__inner__searchbox__btn').on('click', function () {
    var $button = $(this);
    submitAction($button);
  });
  $('.comp_v2_0540__inner__searchbox__input__pnum').on('keydown', function (event) {
    if (event.keyCode == 13) {
      var $button = $(this).closest('.comp_v2_0540__inner__searchbox').find('.comp_v2_0540__inner__searchbox__btn');
      submitAction($button);
    }
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0541__scroll').each(function (index, element) {
    var ps = new PerfectScrollbar(element, {
      suppressScrollY: true
    });
    new ResizeObserver(function () {
      ps.update();
    }).observe(element);
  }); 

  $('.comp_v2_0541__scroll').swipeImage();
}); 

jQuery(function ($) {
  if ($('.comp_v2_0550__frame').length == 0) {
    return;
  }


  function createTimeout(callback, delay) {
    var id = setTimeout(callback, delay);
    return {
      clear: function clear() {
        clearTimeout(id);
      },
      finish: function finish() {
        this.clear();
        callback();
      }
    };
  }


  function getCurrentSearchWord() {
    var search = window.location.search;
    var pos = search.indexOf('?');

    if (pos >= 0) {
      var params = search.slice(pos).split('&');

      for (var i = 0; i < params.length; i++) {
        var keyValue = params[i].split('=');

        if (keyValue[0] != 'mf-q') {
          continue;
        }

        return decodeURIComponent(keyValue[1]);
      }
    }

    return '';
  }

  var loading = null;
  var searchWord = '';
  $('.comp_v2_0550__container').each(function (index, element) {
    var observer = new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        if (mutation.addedNodes.length == 0) {
          return;
        }

        var targetExists = false;

        for (var i = 0; i < mutation.addedNodes.length; i++) {
          if ($(mutation.addedNodes[i]).find('.mf_finder_searchBox').length > 0) {
            targetExists = true;
            break;
          }
        }

        if (!targetExists) {
          return;
        }

        var $container = $(element);
        var $input = $container.find('.mf_finder_searchBox_query_input');
        var $button = $container.find('.mf_finder_searchBox_submit'); 

        searchWord = getCurrentSearchWord(); 

        $button.prop('disabled', $input.val() == '' || $input.val() == searchWord);
        $input.on('keyup', function (event) {
          $button.prop('disabled', $input.val() == '' || $input.val() == searchWord);
        });
        observer.disconnect();
      });
    }); 

    observer.observe(element, {
      childList: true
    });
  }); 

  window.comp_v2_0550__submit_callback = function () {
    var $components = $('.comp_v2_0550__frame,.comp_v2_0551__frame,.comp_v2_0970__frame');
    var $button = $components.find('.mf_finder_searchBox_submit');
    $components.find('input,select,button').prop('disabled', true);
    var $loading = $('<div class="mf_finder_searchBox_submit--loading__spinner">');

    for (var i = 0; i < 12; i++) {
      $loading.append($('<div>'));
    }

    $button.prepend($loading);
    $button.addClass('mf_finder_searchBox_submit--loading').removeClass('mf_finder_searchBox_submit');
    loading = createTimeout(function () {
      $button.find('.mf_finder_searchBox_submit--loading__spinner').remove();
      $button.addClass('mf_finder_searchBox_submit').removeClass('mf_finder_searchBox_submit--loading');
      $components.find('input,select,button').prop('disabled', false);
      loading = null;
    }, 20000);
  }; 


  window.comp_v2_0550__result_callback = function () {
    if (loading === null) {
      return;
    }

    loading.finish();
  }; 


  if ($('#mfx-serp').length == 0) {
    $('head').append("\n      <script type=\"text/javascript\">\n      !function(){\n        var G = GALFSRAM = window.GALFSRAM || {}\n        G.mfx = G.mfx || {}\n        G.mfx.router_mode = 'history'\n        G.mfx.param_names = {\n          page: \"mf-page\",\n          d: \"mf-d\",\n          doctype: \"mf-doctype\",\n          q: \"mf-q\",\n          ct: \"mf-ct\",\n          sort: \"mf-sort\",\n          pagemax: \"mf-pagemax\",\n          imgsize: \"mf-imgsize\",\n          ajaxUrl: \"mf-ajaxUrl\",\n          htmlLang: \"mf-htmlLang\",\n          mf_helper: \"mf-mf_helper\"\n        }\n      }();\n      </script>\n    ");
    $('head').append('<script src="//c.marsflag.com/mf/mfx/1.0/js/mfx-serp.js" charset="UTF-8" id="mfx-serp"></script>');
    $('head').append('<link rel="stylesheet" href="//c.marsflag.com/mf/mfx/1.0/css/mfx-serp.css" media="screen,print" />');
    $('head').append('<link rel="stylesheet" href="//c.marsflag.com/mf/mfx/1.0/css/mfx-serp-resp.css" media="screen,print" />');
  }
}); 

jQuery(function ($) {
  if ($('.comp_v2_0551__frame').length == 0) {
    return;
  }


  function createTimeout(callback, delay) {
    var id = setTimeout(callback, delay);
    return {
      clear: function clear() {
        clearTimeout(id);
      },
      finish: function finish() {
        this.clear();
        callback();
      }
    };
  }


  function getCurrentSearchWord() {
    var search = window.location.search;
    var pos = search.indexOf('?');

    if (pos >= 0) {
      var params = search.slice(pos).split('&');

      for (var i = 0; i < params.length; i++) {
        var keyValue = params[i].split('=');

        if (keyValue[0] != 'mf-q') {
          continue;
        }

        return decodeURIComponent(keyValue[1]);
      }
    }

    return '';
  }

  var loading = null;
  var searchWord = '';
  $('.comp_v2_0551__frame').each(function (index, element) {
    var observer = new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        if (mutation.addedNodes.length == 0) {
          return;
        }

        var targetExists = false;

        for (var i = 0; i < mutation.addedNodes.length; i++) {
          if ($(mutation.addedNodes[i]).find('.mf_finder_searchBox').length > 0) {
            targetExists = true;
            break;
          }
        }

        if (!targetExists) {
          return;
        }

        var $container = $(element);
        var $input = $container.find('.mf_finder_searchBox_query_input');
        var $button = $container.find('.mf_finder_searchBox_submit'); 

        searchWord = getCurrentSearchWord(); 

        $button.prop('disabled', $input.val() == '' || $input.val() == searchWord);
        $input.on('keyup', function (event) {
          $button.prop('disabled', $input.val() == '' || $input.val() == searchWord);
        });
        observer.disconnect();
      });
    }); 

    observer.observe(element, {
      childList: true
    });
  }); 

  window.comp_v2_0551__submit_callback = function () {
    void 0;
    var $components = $('.comp_v2_0551__frame,.comp_v2_0550__frame,.comp_v2_0971__frame');
    var $button = $components.find('.mf_finder_searchBox_submit');
    $components.find('input,select,button').prop('disabled', true);
    var $loading = $('<div class="mf_finder_searchBox_submit--loading__spinner">');

    for (var i = 0; i < 12; i++) {
      $loading.append($('<div>'));
    }

    $button.prepend($loading);
    $button.addClass('mf_finder_searchBox_submit--loading').removeClass('mf_finder_searchBox_submit');
    loading = createTimeout(function () {
      $button.find('.mf_finder_searchBox_submit--loading__spinner').remove();
      $button.addClass('mf_finder_searchBox_submit').removeClass('mf_finder_searchBox_submit--loading');
      $components.find('input,select,button').not('.mf_finder_searchBox_submit').prop('disabled', false);
      loading = null;
    }, 20000);
  }; 


  window.comp_v2_0551__result_callback = function () {
    void 0;

    if (loading === null) {
      return;
    }

    loading.finish();
  };

  window.comp_v2_0551__snippet_frags = function (doc) {
    void 0;

    if (loading === null) {
      return;
    }

    loading.finish();

    if (doc.attrs.type == 'application/pdf' || doc.attrs.type == 'pdf') {
      return [{
        id: 0,
        text: '',
        type: ''
      }];
    }
  }; 


  if ($('#mfx-serp').length == 0) {
    $('head').append("\n      <script type=\"text/javascript\">\n      !function(){\n        var G = GALFSRAM = window.GALFSRAM || {}\n        G.mfx = G.mfx || {}\n        G.mfx.router_mode = 'history'\n        G.mfx.param_names = {\n          page: \"mf-page\",\n          d: \"mf-d\",\n          doctype: \"mf-doctype\",\n          q: \"mf-q\",\n          ct: \"mf-ct\",\n          sort: \"mf-sort\",\n          pagemax: \"mf-pagemax\",\n          imgsize: \"mf-imgsize\",\n          ajaxUrl: \"mf-ajaxUrl\",\n          htmlLang: \"mf-htmlLang\",\n          mf_helper: \"mf-mf_helper\"\n        }\n      }();\n      </script>\n    ");
    $('head').append('<script src="//c.marsflag.com/mf/mfx/1.0/js/mfx-serp.js" charset="UTF-8" id="mfx-serp"></script>');
    $('head').append('<link rel="stylesheet" href="//c.marsflag.com/mf/mfx/1.0/css/mfx-serp.css" media="screen,print" />');
    $('head').append('<link rel="stylesheet" href="//c.marsflag.com/mf/mfx/1.0/css/mfx-serp-resp.css" media="screen,print" />');
  }
}); 

jQuery(function ($) {
  var $window = $(window); 

  $('.comp_v2_0560').each(function (index, element) {
    var $container = $(element);
    var $slider = $container.find('.comp_v2_0560__slider'); 

    var slickOptions = {
      autoplay: false,
      arrows: true,
      prevArrow: '<div class="prev">PREV</div>',
      nextArrow: '<div class="next">NEXT</div>',
      centerMode: false,
      variableWidth: false,
      slidesToShow: 3,
      infinite: false,
      draggable: true,
      dots: false,
      swipeToSlide: true,
      responsive: [{
        breakpoint: 769,
        settings: {
          centerMode: true,
          variableWidth: true,
          slidesToShow: 1,
          arrows: false,
          dots: true,
          swipeToSlide: true
        }
      }]
    }; 

    if (location.search.indexOf('slider=disabled') === -1) {
      $slider.slick(slickOptions);
    } else {
      $slider.css({
        'display': 'flex',
        'flex-wrap': 'wrap'
      });
    } 


    $slider.swipeImage({
      isShow: function isShow($target) {
        if (!window.matchMedia('(max-width:768px)').matches) {
          return false;
        }

        if ($target.outerHeight() == 0) {
          return false;
        }

        if (!$slider.hasClass('slick-slider')) {
          return false;
        }

        var slick = $slider.slick('getSlick');
        return slick.slideCount > slick.slickGetOption('slidesToShow');
      },
      calcPositionTop: function calcPositionTop($target, $swipe) {
        return $target.position().top + parseInt($target.css('margin-top'), 10) + ($target.outerHeight() - $target.find('.slick-dots').outerHeight()) / 2 - $swipe.outerHeight() / 2 + 'px';
      }
    });
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0620__image_block__image img.imageModal').imageModal();
}); 

jQuery(function ($) {
  $('.comp_v2_0640__headding').on('click', function () {
    $(this).toggleClass('open');
  });
}); 

jQuery(function ($) {
  function createTimeout(callback, delay) {
    var id = setTimeout(callback, delay);
    return {
      clear: function clear() {
        clearTimeout(id);
      },
      finish: function finish() {
        this.clear();
        callback();
      }
    };
  }


  function updateSubmitButtonState($element) {
    var word = $element.find('.comp_v2_0700__box__body__search__pnum__input').val(); 

    $element.find('.comp_v2_0700__box__body__search__submit').prop('disabled', word.length < 3);
  }

  $('.comp_v2_0700__box__body__search__pnum__input').on('keyup', function () {
    updateSubmitButtonState($(this).closest('.comp_v2_0700'));
  }); 

  $('.comp_v2_0700__table__scroll').each(function (index, element) {
    var ps = new PerfectScrollbar(element, {
      suppressScrollY: true
    });
    new ResizeObserver(function () {
      ps.update();
    }).observe(element);
  }); 

  $('.comp_v2_0700__table__scroll').swipeImage({
    calcPositionTop: function calcPositionTop($target, $swipe) {
      return $target.position().top + parseInt($target.css('margin-top'), 10) + ($target.outerHeight() + 20) / 2 - $swipe.outerHeight() / 2 + 'px';
    }
  });
  $('.comp_v2_0700').each(function (index, element) {
    var $container = $(element);
    var loading = null;
    var $jqxhr = null; 

    $container.find('.comp_v2_0700__box__body__search__submit').on('click', fncSearchBtn); 

    $container.find('.comp_v2_0700__box__body__search__pnum__input').on('keydown', function (event) {
      if (event.keyCode == 13) {
        var $searchbox = $(this).closest('.comp_v2_0700__box__body__search');
        fncSearch($searchbox);
      }
    });

    function fncSearchBtn() {
      var $searchbox = $(this).closest('.comp_v2_0700__box__body__search');
      fncSearch($searchbox);
    } 


    var autoFlg = $('[name=autoFlg]').val();

    if (autoFlg == 'true') {
      var $searchbox = $('[name=autoFlg]').closest('.comp_v2_0700__box__body__search');
      fncSearch($searchbox);
    }

    function fncSearch($searchbox) {
      var distANG = "anglia"; 

      var distARW = "arrow"; 

      var distAVN = "avnet"; 

      var distC1 = "chip1stop"; 

      var distDK = "dk"; 

      var distGLYN = "glyngmbh"; 

      var distMouser = "mouser"; 

      var distRS = "rs"; 

      var distRTR = "rutronik"; 

      var distTTI = "tti"; 

      var distWPG = "wpg"; 

      var distARWEU = "arroweu"; 

      var distARWCA = "arrowca"; 

      var distElement14 = "element14"; 

      var distFarnell = "farnell"; 

      var distNewark = "newark"; 

      var sc_bizPartnerANG = 'sc_onlineStoresClick2("Anglia:{pnum}:{lang}")';
      var sc_bizPartnerARW = 'sc_onlineStoresClick2("Arrow:{pnum}:{lang}")';
      var sc_bizPartnerAVN = 'sc_onlineStoresClick2("Avnet:{pnum}:{lang}")';
      var sc_bizPartnerC1 = 'sc_onlineStoresClick2("ChipOneStop:{pnum}:{lang}")';
      var sc_bizPartnerDK = 'sc_onlineStoresClick2("Digi-key:{pnum}:{lang}")';
      var sc_bizPartnerGLYN = 'sc_onlineStoresClick2("Glyn:{pnum}:{lang}")';
      var sc_bizPartnerMouser = 'sc_onlineStoresClick2("Mouser:{pnum}:{lang}")';
      var sc_bizPartnerRS = 'sc_onlineStoresClick2("RS:{pnum}:{lang}")';
      var sc_bizPartnerRTR = 'sc_onlineStoresClick2("Rutronik:{pnum}:{lang}")';
      var sc_bizPartnerTTI = 'sc_onlineStoresClick2("TTI:{pnum}:{lang}")';
      var sc_bizPartnerWPG = 'sc_onlineStoresClick2("WPG:{pnum}:{lang}")'; 

      var sc_bizPartnerARWEU = 'sc_onlineStoresClick2("Arrow:{pnum}:{lang}")';
      var sc_bizPartnerARWCA = 'sc_onlineStoresClick2("Arrow:{pnum}:{lang}")'; 

      var sc_bizPartnerElement14 = 'sc_onlineStoresClick2("element14:{pnum}:{lang}")';
      var sc_bizPartnerFarnell = 'sc_onlineStoresClick2("farnell:{pnum}:{lang}")';
      var sc_bizPartnerNewark = 'sc_onlineStoresClick2("newark:{pnum}:{lang}")';
      var sc_bizPartnerLang = $searchbox.data('sc-biz-partner-lang'); 

      var distArr = []; 


      var pnum = $searchbox.find('[name="pnum"]').val().trim();
      var type = $searchbox.find('[name="type"]').val(); 

      if (pnum == "") {
        return;
      } 


      if (pnum.length < 3) {
        return;
      } 


      $container.find('input,select,button').prop('disabled', true);
      var $loading = $('<div class="comp_v2_0700__box__body__search__submit--loading__spinner">');

      for (var i = 0; i < 12; i++) {
        $loading.append($('<div>'));
      }

      var $button = $container.find('.comp_v2_0700__box__body__search__submit');
      $button.prepend($loading);
      $button.addClass('comp_v2_0700__box__body__search__submit--loading').removeClass('comp_v2_0700__box__body__search__submit');
      loading = createTimeout(function () {
        $loading.remove();
        $button.addClass('comp_v2_0700__box__body__search__submit').removeClass('comp_v2_0700__box__body__search__submit--loading');
        $container.find('input,select,button').prop('disabled', false);
        loading = null;
        updateSubmitButtonState($container);

        if ($jqxhr !== null) {
          $jqxhr.abort('timeout');
        }
      }, 20000); 

      var rGroup = $searchbox.find('[name="rGroup"]').val();

      if (rGroup == '1') {
        distArr.push($searchbox.data('name-' + distDK));
        distArr.push($searchbox.data('name-' + distMouser));
        distArr.push($searchbox.data('name-' + distARW));
        distArr.push($searchbox.data('name-' + distTTI));
        distArr.push($searchbox.data('name-' + distAVN)); 

        distArr.push($searchbox.data('name-' + distARWEU));
        distArr.push($searchbox.data('name-' + distARWCA)); 

        distArr.push($searchbox.data('name-' + distNewark)); 

      } else if (rGroup == '2') {
        distArr.push($searchbox.data('name-' + distDK));
        distArr.push($searchbox.data('name-' + distMouser));
        distArr.push($searchbox.data('name-' + distANG));
        distArr.push($searchbox.data('name-' + distARW));
        distArr.push($searchbox.data('name-' + distTTI));
        distArr.push($searchbox.data('name-' + distGLYN));
        distArr.push($searchbox.data('name-' + distRTR));
        distArr.push($searchbox.data('name-' + distRS)); 

        distArr.push($searchbox.data('name-' + distARWEU));
        distArr.push($searchbox.data('name-' + distARWCA)); 

        distArr.push($searchbox.data('name-' + distFarnell)); 

      } else if (rGroup == '3') {
        distArr.push($searchbox.data('name-' + distDK));
        distArr.push($searchbox.data('name-' + distMouser));
        distArr.push($searchbox.data('name-' + distRS));
        distArr.push($searchbox.data('name-' + distC1));
        distArr.push($searchbox.data('name-' + distWPG)); 

        distArr.push($searchbox.data('name-' + distARW));
        distArr.push($searchbox.data('name-' + distARWEU));
        distArr.push($searchbox.data('name-' + distARWCA)); 

        distArr.push($searchbox.data('name-' + distElement14)); 

      }

      var $resultBlock = $container.find('.comp_v2_0700__table');
      var $displayKeyword = $container.find('.comp_v2_0700__box__body__result__keyword');
      var $displayNumber = $container.find('.comp_v2_0700__box__body__result__number');
      var $displayTable = $container.find('.comp_v2_0700__table__table');
      var $displayMessage = $container.find('.comp_v2_0700__table__message');
      var $alertMessage = $container.find('.comp_v2_0700__alert,.comp_v2_0700__alert--show');
      $jqxhr = $.ajax({
        url: '/bin/getNcSearchJson',
        type: 'POST',
        data: {
          PN1: pnum,
          SearchType: type
        },
        dataType: 'json',
        timeout: 20000,
        beforeSend: function beforeSend() {
          $displayKeyword.html(pnum); 

          $displayNumber.show();
          $displayNumber.html($displayNumber.data('text-searching')); 

          $resultBlock.addClass('comp_v2_0700__table').removeClass('comp_v2_0700__table--show'); 

          $displayTable.hide(); 

          $displayTable.find('tbody').empty();

          if ($displayTable.data('dataTable')) {
            $displayTable.data('dataTable').clear();
            $displayTable.data('dataTable').destroy();
            $displayTable.data('dataTable', null);
          } 


          $displayMessage.hide(); 

          $displayMessage.empty(); 

          $alertMessage.addClass('comp_v2_0700__alert').removeClass('comp_v2_0700__alert--show');
        }
      }).done(function (data) {
        if (data === null || parseInt(data.SearchedParts[0].Count) == 0) {
          void 0;
          $displayNumber.hide();
          $displayMessage.html($displayMessage.data('text-notfound'));
          $displayMessage.show();
          return;
        }

        var searchPartsList = data.SearchedParts[0].Parts;
        var textButtonMessage = $displayTable.data('text-button-message');
        var rows = []; 

        for (var _i3 = 0; _i3 < searchPartsList.length; _i3++) {
          var searchParts = searchPartsList[_i3];
          var getDist = searchParts.Distributor;
          var isNDist = true;

          for (var n = 0; n < distArr.length; n++) {
            if (getDist == distArr[n]) {
              isNDist = false;
              break;
            }
          }

          if (isNDist) {
            continue;
          } 


          var row = generateRow(searchParts, distArr, rGroup, textButtonMessage);

          if (row === null) {
            continue;
          }

          rows.push(row);
        } 


        if (rows.length > 0) {
          $displayNumber.html(rows.length + $displayNumber.data('text-unit')); 

          $displayTable.find('tbody').append(rows);
          $displayTable.data('dataTable', $displayTable.DataTable({
            autoWidth: false,
            info: false,
            paging: false,
            searching: false,
            retrieve: true,
            columnDefs: [{
              targets: 4,
              orderable: false
            }]
          }));
          $displayTable.show();
        } else {
          $displayNumber.hide();
          $displayMessage.html($displayMessage.data('text-nostock'));
          $displayMessage.show();
        }
      }).fail(function (xhr, status, error) {
        if (xhr.status) {
          $displayMessage.html($displayMessage.data('text-error'));
        } else if (status === 'parsererror') {
          $displayMessage.html($displayMessage.data('text-notfound'));
        } else if (status === 'timeout') {
          $displayMessage.html($displayMessage.data('text-error'));
        } else {
          $displayMessage.html($displayMessage.data('text-error'));
        }

        $displayNumber.hide();
        $displayMessage.show();
      }).always(function (xhr, status, error) {
        $jqxhr = null; 

        $resultBlock.addClass('comp_v2_0700__table--show').removeClass('comp_v2_0700__table');

        if (status.toLowerCase() == 'success') {
          $alertMessage.addClass('comp_v2_0700__alert--show').removeClass('comp_v2_0700__alert');
        }

        if (loading === null) {
          return;
        }

        loading.finish();
        updateSubmitButtonState($container);
      }); 

      function generateRow(partsInfo, distArr, rGroup, textButtonMessage) {
        var isDisplay = false; 

        var onclickProc;
        var agr; 

        var distANG = null; 

        var distARW = null; 

        var distAVN = null; 

        var distC1 = null; 

        var distDK = null; 

        var distGLYN = null; 

        var distMouser = null; 

        var distRS = null; 

        var distRTR = null; 

        var distTTI = null; 

        var distWPG = null; 

        var distARWEU = null; 

        var distARWCA = null; 

        var distElement14 = null; 

        var distFarnell = null; 

        var distNewark = null; 

        if (rGroup == '1') {
          distDK = distArr[0];
          distMouser = distArr[1];
          distARW = distArr[2];
          distTTI = distArr[3];
          distAVN = distArr[4]; 

          distARWEU = distArr[5];
          distARWCA = distArr[6]; 

          distNewark = distArr[7];
        } else if (rGroup == '2') {
          distDK = distArr[0];
          distMouser = distArr[1];
          distANG = distArr[2];
          distARW = distArr[3];
          distTTI = distArr[4];
          distGLYN = distArr[5];
          distRTR = distArr[6];
          distRS = distArr[7]; 

          distARWEU = distArr[8];
          distARWCA = distArr[9]; 

          distFarnell = distArr[10];
        } else if (rGroup == '3') {
          distDK = distArr[0];
          distMouser = distArr[1];
          distRS = distArr[2];
          distC1 = distArr[3];
          distWPG = distArr[4]; 

          distARW = distArr[5];
          distARWEU = distArr[6];
          distARWCA = distArr[7]; 

          distElement14 = distArr[8];
        } 


        var dilpPartNum = partsInfo.PartNum; 

        var dilpDistributor = partsInfo.Distributor;
        var dilpQuantity = parseInt(partsInfo.Quantity);
        var dilpInvDate = partsInfo.PartDate; 

        var dilpURL = partsInfo.CartLink.URL; 

        if (!isDisplay && distANG !== null) {
          if (dilpDistributor == distANG) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerANG, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distARW !== null) {
          if (dilpDistributor == distARW) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerARW, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distAVN !== null) {
          if (dilpDistributor == distAVN) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerAVN, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distC1 !== null) {
          if (dilpDistributor == distC1) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerC1, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distDK !== null) {
          if (dilpDistributor == distDK) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerDK, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distGLYN !== null) {
          if (dilpDistributor == distGLYN) {
            isDisplay = true;
            dilpURL = "https://www.glyn.de/"; 

            agr = getAgree(sc_bizPartnerGLYN, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distMouser !== null) {
          if (dilpDistributor == distMouser) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerMouser, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distRS !== null) {
          if (dilpDistributor == distRS) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerRS, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distRTR !== null) {
          if (dilpDistributor == distRTR) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerRTR, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distTTI !== null) {
          if (dilpDistributor == distTTI) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerTTI, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distWPG !== null) {
          if (dilpDistributor == distWPG) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerWPG, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distARWEU !== null) {
          if (dilpDistributor == distARWEU) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerARWEU, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc;
          }
        } 


        if (!isDisplay && distARWCA !== null) {
          if (dilpDistributor == distARWCA) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerARWCA, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc;
          }
        } 


        if (!isDisplay && distNewark !== null) {
          if (dilpDistributor == distNewark) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerNewark, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc;
          }
        } 


        if (!isDisplay && distFarnell !== null) {
          if (dilpDistributor == distFarnell) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerFarnell, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc;
          }
        } 


        if (!isDisplay && distElement14 !== null) {
          if (dilpDistributor == distElement14) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerElement14, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc;
          }
        } 


        if (!isDisplay) {
          return null;
        }

        var $tr = $('<tr>');
        $tr.append($('<td>').html(dilpPartNum)); 

        $tr.append($('<td>').html(dilpDistributor));
        $tr.append($('<td>').html(dilpQuantity));
        $tr.append($('<td>').html(dilpInvDate));
        $tr.append(function () {
          var $td = $('<td>'); 

          if (dilpURL !== '' && dilpURL !== 'null') {
            var $anc = $('<a>');
            $anc 
            .attr('href', dilpURL) 
            .attr('target', '_blank').attr('onclick', onclickProc).addClass('comp_v2_0700__table__table__btn--default') 
            .addClass('CV_OnlineDistributor') 
            .html(textButtonMessage);
            $td.append($anc);
          }

          return $td;
        }());
        return $tr;
      }

      function getAgree(bizP, pNum, bizPLang, aUrl, dUrl) {
        var agr = {};
        agr.onclickProc = bizP.replace("{pnum}", pNum).replace("{lang}", bizPLang); 

        return agr;
      }
    }
  });
}); 

jQuery(function ($) {
  var $window = $(window);
  $('.comp_v2_0710__slider').each(function (index, element) {
    var $slider = $(element);
    var sliderOption = {
      autoplay: false,
      arrows: false,
      centerMode: false,
      variableWidth: false,
      slidesToShow: 1,
      infinite: false,
      draggable: true,
      dots: true,
      rows: 1,
      swipeToSlide: true
    };
    var displayMode = 0; 

    var resizeEvent = function resizeEvent() {
      if (window.matchMedia('(max-width:768px)').matches) {
        if (displayMode == 2) {
          return;
        }

        displayMode = 2; 

        $slider.not('.slick-initialized').slick(sliderOption);
      } else {
        if (displayMode == 1) {
          return;
        }

        displayMode = 1; 

        if ($slider.hasClass('slick-slider')) {
          $slider.slick('unslick');
        }
      }
    };

    $window.on('resize', resizeEvent);
    resizeEvent(); 

    $slider.swipeImage({
      isShow: function isShow($target) {
        if (!window.matchMedia('(max-width:768px)').matches) {
          return false;
        }

        if ($target.outerHeight() == 0) {
          return false;
        }

        if (!$slider.hasClass('slick-slider')) {
          return false;
        }

        var slick = $slider.slick('getSlick');
        return slick.slideCount > slick.slickGetOption('slidesToShow');
      },
      calcPositionTop: function calcPositionTop($target, $swipe) {
        return $target.position().top + parseInt($target.css('margin-top'), 10) + ($target.outerHeight() - $target.find('.slick-dots').outerHeight()) / 2 - $swipe.outerHeight() / 2 + 'px';
      }
    });
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0920__content__sentence ul>li, ul.comp_v2_0920__link_list>li').each(function (index, element) {
    if (element.childNodes.length == 0) {
      return;
    }

    var target = element.firstChild;

    while (target != null && target.textContent.trim() === '') {
      target = target.nextSibling;
    }

    if (target === null || target.nodeName.toLowerCase() == 'a') {
      return;
    }

    $(element).css('display', 'flex').wrapInner('<span class="disc">');
  });
}); 

jQuery(function ($) {
  var $window = $(window);
  $('.comp_v2_0930 .comp_v2_0930__flcol, .comp_v2_0930 .comp_v2_0930__flcol--border').each(function (index, element) {
    var displayMode = 0; 

    var $slider = $(element); 

    $slider.on('changeModePC', function () {
      if ($slider.hasClass('slick-slider')) {
        $slider.slick('unslick');
      }

      if (location.search.indexOf('slider=disabled') === -1) {
        $slider.not('.slick-initialized').slick({
          autoplay: false,
          arrows: true,
          prevArrow: '<div class="prev">PREV</div>',
          nextArrow: '<div class="next">NEXT</div>',
          centerMode: false,
          variableWidth: false,
          slidesToShow: 3,
          infinite: false,
          draggable: true,
          dots: false,
          rows: 1,
          swipeToSlide: true
        });
      }
    }); 

    $slider.on('changeModeMobile', function () {
      if ($slider.hasClass('slick-slider')) {
        $slider.slick('unslick');
      }

      $slider.not('.slick-initialized').slick({
        autoplay: false,
        arrows: false,
        centerMode: false,
        variableWidth: false,
        slidesToShow: 1,
        infinite: false,
        draggable: true,
        dots: true,
        rows: 1,
        swipeToSlide: true
      });
    }); 

    var resizeEvent = function resizeEvent() {
      if (window.matchMedia('(max-width:768px)').matches) {
        if (displayMode == 2) {
          return;
        }

        displayMode = 2;
        $slider.trigger('changeModeMobile');
      } else {
        if (displayMode == 1) {
          return;
        }

        displayMode = 1;
        $slider.trigger('changeModePC');
      }
    };

    $window.on('resize', resizeEvent);
    resizeEvent(); 

    $slider.swipeImage({
      isShow: function isShow($target) {
        if (!window.matchMedia('(max-width:768px)').matches) {
          return false;
        }

        if ($target.outerHeight() == 0) {
          return false;
        }

        if (!$slider.hasClass('slick-slider')) {
          return false;
        }

        var slick = $slider.slick('getSlick');
        return slick.slideCount > slick.slickGetOption('slidesToShow');
      },
      calcPositionTop: function calcPositionTop($target, $swipe) {
        return $target.position().top + parseInt($target.css('margin-top'), 10) + ($target.outerHeight() - $target.find('.slick-dots').outerHeight()) / 2 - $swipe.outerHeight() / 2 + 'px';
      }
    });
  });
}); 

jQuery(function ($) {
  var $window = $(window);
  $('.comp_v2_0950 .comp_v2_0950__flcol').each(function (index, element) {
    var displayMode = 0;
    var $slider = $(element);
    var defaultConfig = {
      autoplay: false,
      arrows: true,
      prevArrow: '<div class="prev">PREV</div>',
      nextArrow: '<div class="next">NEXT</div>',
      centerMode: false,
      variableWidth: false,
      slidesToShow: 5,
      infinite: false,
      draggable: true,
      dots: false,
      rows: 1,
      swipeToSlide: true
    }; 

    $slider.on('init', function (event, slick) {
      $('<div>').addClass('slick-counter').append($('<span>').addClass('current').text(slick.currentSlide + 1)).append('/').append($('<span>').addClass('total').text(slick.slideCount)).appendTo(this);
    }); 

    $slider.on('reInit', function (event, slick, currentSlide) {
      $slider.find('.current').text((currentSlide ? currentSlide : 0) + 1);
      $slider.find('.total').text(slick.slideCount);
    }); 

    $slider.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
      $slider.find('.current').text(nextSlide + 1);
    }); 

    $slider.on('afterInitADA', function (event, slick) {
      $slider.find('.slick-active figure a').attr('tabindex', '-1');
    }); 

    var setSlick = function setSlick(config) {
      if ($slider.hasClass('slick-slider')) {
        $slider.slick('slickUnfilter');
        $slider.slick('slickSetOption', config);
        $slider.closest('.comp_v2_0950').find('[name="filter2"]').trigger('change');
      } else {
        if (location.search.indexOf('slider=disabled') === -1) {
          $slider.slick(config);
        }
      }
    }; 


    $slider.on('changeModeMobileTinyMini', function () {
      var config = {};
      $.extend(config, defaultConfig, {
        slidesToShow: 1
      });
      void 0;
      void 0;
      setSlick(config);
    }); 

    $slider.on('changeModeMobileMini', function () {
      var config = {};
      $.extend(config, defaultConfig, {
        slidesToShow: 2
      });
      void 0;
      void 0;
      setSlick(config);
    }); 

    $slider.on('changeModeMobile', function () {
      var config = {};
      $.extend(config, defaultConfig, {
        slidesToShow: 3
      });
      void 0;
      void 0;
      setSlick(config);
    }); 

    $slider.on('changeModeTablet', function () {
      var config = {};
      $.extend(config, defaultConfig, {
        slidesToShow: 4
      });
      void 0;
      void 0;
      setSlick(config);
    }); 

    $slider.on('changeModePC', function () {
      var config = {};
      $.extend(config, defaultConfig, {
        slidesToShow: 5
      });
      void 0;
      void 0;
      setSlick(config);
    }); 

    var resizeCallback = function resizeCallback() {
      if (window.matchMedia('(max-width:350px)').matches) {
        if (displayMode == 5) {
          return;
        }

        displayMode = 5;
        $slider.trigger('changeModeMobileTinyMini');
        return;
      }

      if (window.matchMedia('(max-width:460px)').matches) {
        if (displayMode == 4) {
          return;
        }

        displayMode = 4;
        $slider.trigger('changeModeMobileMini');
        return;
      }

      if (window.matchMedia('(max-width:768px)').matches) {
        if (displayMode == 3) {
          return;
        }

        displayMode = 3;
        $slider.trigger('changeModeMobile');
        return;
      }

      if (window.matchMedia('(max-width:1024px)').matches) {
        if (displayMode == 2) {
          return;
        }

        displayMode = 2;
        $slider.trigger('changeModeTablet');
        return;
      }

      if (displayMode == 1) {
        return;
      }

      displayMode = 1;
      $slider.trigger('changeModePC');
    }; 


    $window.on('resize', resizeCallback);
    resizeCallback(); 

    $slider.swipeImage({
      isShow: function isShow($target) {
        if (!window.matchMedia('(max-width:768px)').matches) {
          return false;
        }

        if ($target.outerHeight() == 0) {
          return false;
        }

        if (!$slider.hasClass('slick-slider')) {
          return false;
        }

        var slick = $slider.slick('getSlick');
        return slick.slideCount > slick.slickGetOption('slidesToShow');
      },
      calcPositionTop: function calcPositionTop($target, $swipe) {
        return $target.position().top + parseInt($target.css('margin-top'), 10) + ($target.outerHeight() - $target.find('.slick-counter').outerHeight()) / 2 - $swipe.outerHeight() / 2 + 'px';
      }
    });
    $slider.closest('.comp_v2_0350__cont__item').on('tabActive', function () {
      $slider.swipeImage('recalc');
    });
  });
  $('.comp_v2_0950').each(function (index, element) {
    var $container = $(element); 

    $container.find('[name="packageRadio"]:radio').on('change', function () {
      if ($(this).val() == 'mm') {
        $container.find('.comp_v2_0950__link__size__switch__inch').hide();
        $container.find('.comp_v2_0950__link__size__switch__mm').show();
      } else {
        $container.find('.comp_v2_0950__link__size__switch__mm').hide();
        $container.find('.comp_v2_0950__link__size__switch__inch').show();
      }
    });
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0951').each(function (index, element) {
    var $container = $(element); 

    $container.find('[name="packageRadio"]:radio').on('change', function () {
      if ($(this).val() == 'mm') {
        $container.find('.comp_v2_0951__link__size__switch__inch').hide();
        $container.find('.comp_v2_0951__link__size__switch__mm').show();
      } else {
        $container.find('.comp_v2_0951__link__size__switch__mm').hide();
        $container.find('.comp_v2_0951__link__size__switch__inch').show();
      }
    }); 

    $container.find('[name="packageRadio"]:radio:checked').trigger('change');
  });
}); 

jQuery(function ($) {
  if ($('.comp_v2_0970__frame').length == 0) {
    return;
  }


  function createTimeout(callback, delay) {
    var id = setTimeout(callback, delay);
    return {
      clear: function clear() {
        clearTimeout(id);
      },
      finish: function finish() {
        this.clear();
        callback();
      }
    };
  }


  function getCurrentSearchWord() {
    var search = window.location.search;
    var pos = search.indexOf('?');

    if (pos >= 0) {
      var params = search.slice(pos).split('&');

      for (var i = 0; i < params.length; i++) {
        var keyValue = params[i].split('=');

        if (keyValue[0] != 'mf-q') {
          continue;
        }

        return decodeURIComponent(keyValue[1]);
      }
    }

    return '';
  }

  var loading = null;
  var searchWord = '';
  $('.comp_v2_0970__box__body').each(function (index, element) {
    var observer = new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        if (mutation.addedNodes.length == 0) {
          return;
        }

        var targetExists = false;

        for (var i = 0; i < mutation.addedNodes.length; i++) {
          if ($(mutation.addedNodes[i]).find('.mf_finder_searchBox').length > 0) {
            targetExists = true;
            break;
          }
        }

        if (!targetExists) {
          return;
        }

        var $container = $(element);
        var $input = $container.find('.mf_finder_searchBox_query_input');
        var $button = $container.find('.mf_finder_searchBox_submit'); 

        searchWord = getCurrentSearchWord(); 

        $button.prop('disabled', $input.val() == '' || $input.val() == searchWord);
        $input.on('keyup', function (event) {
          $button.prop('disabled', $input.val() == '' || $input.val() == searchWord);
        });
        observer.disconnect();
      });
    }); 

    observer.observe(element, {
      childList: true
    });
  }); 

  window.comp_v2_0970__submit_callback = function () {
    var $components = $('.comp_v2_0970__frame,.comp_v2_0550__frame,.comp_v2_0551__frame');
    var $button = $components.find('.mf_finder_searchBox_submit');
    $components.find('input,select,button').prop('disabled', true);
    var $loading = $('<div class="mf_finder_searchBox_submit--loading__spinner">');

    for (var i = 0; i < 12; i++) {
      $loading.append($('<div>'));
    }

    $button.prepend($loading);
    $button.addClass('mf_finder_searchBox_submit--loading').removeClass('mf_finder_searchBox_submit');
    loading = createTimeout(function () {
      $button.find('.mf_finder_searchBox_submit--loading__spinner').remove();
      $button.addClass('mf_finder_searchBox_submit').removeClass('mf_finder_searchBox_submit--loading');
      $components.find('input,select,button').prop('disabled', false);
      loading = null;
    }, 20000);
  }; 


  window.comp_v2_0970__result_callback = function () {
    if (loading === null) {
      return;
    }

    loading.finish();
  }; 


  if ($('#mfx-serp').length == 0) {
    $('head').append("\n      <script type=\"text/javascript\">\n      !function(){\n        var G = GALFSRAM = window.GALFSRAM || {}\n        G.mfx = G.mfx || {}\n        G.mfx.router_mode = 'history'\n        G.mfx.param_names = {\n          page: \"mf-page\",\n          d: \"mf-d\",\n          doctype: \"mf-doctype\",\n          q: \"mf-q\",\n          ct: \"mf-ct\",\n          sort: \"mf-sort\",\n          pagemax: \"mf-pagemax\",\n          imgsize: \"mf-imgsize\",\n          ajaxUrl: \"mf-ajaxUrl\",\n          htmlLang: \"mf-htmlLang\",\n          mf_helper: \"mf-mf_helper\"\n        }\n      }();\n      </script>\n    ");
    $('head').append('<script src="//c.marsflag.com/mf/mfx/1.0/js/mfx-serp.js" charset="UTF-8" id="mfx-serp"></script>');
    $('head').append('<link rel="stylesheet" href="//c.marsflag.com/mf/mfx/1.0/css/mfx-serp.css" media="screen,print" />');
    $('head').append('<link rel="stylesheet" href="//c.marsflag.com/mf/mfx/1.0/css/mfx-serp-resp.css" media="screen,print" />');
  }
}); 

jQuery(function ($) {
  $(document).ready(function () {
    if (location.search.indexOf('slider=disabled') === -1) {
      $(".comp_v2_0980__latest-information__ticker__slider").slick({
        autoplay: false,
        arrows: true,
        prevArrow: '<div class="prev">PREV</div>',
        nextArrow: '<div class="next">NEXT</div>',
        swipeToSlide: true
      });
    }
  });
}); 

jQuery(function ($) {
  $('.comp_v2_0990__tab__item').on('click', function () {
    var $self = $(this); 

    if ($self.hasClass('comp_v2_0990__tab__item--active')) {
      return;
    }

    var $tabContainer = $self.closest('.comp_v2_0990__tab');
    var $contContainer = $self.closest('.comp_v2_0990').find('.comp_v2_0990__cont'); 

    $tabContainer.find('.comp_v2_0990__tab__item--active > span').attr('tabindex', '-1').parent().removeClass('comp_v2_0990__tab__item--active');
    $contContainer.find('.comp_v2_0990__cont__item--active').removeClass('comp_v2_0990__cont__item--active'); 

    $self.children('span').attr('tabindex', '0').parent().addClass('comp_v2_0990__tab__item--active');
    var $targetContainer = $contContainer.find('#' + $self.attr('aria-controls'));
    $targetContainer.addClass('comp_v2_0990__cont__item--active');
  });
  $('.comp_v2_0990__tab__item > span').on('keydown', function (event) {
    var $self = $(this); 

    if (event.keyCode == 37) {
      var $prev = $self.parent().prev('.comp_v2_0990__tab__item').children('span');

      if ($prev.length > 0) {
        $prev.focus().parent().trigger('click');
      }

      return;
    } 


    if (event.keyCode == 39) {
      var $next = $self.parent().next('.comp_v2_0990__tab__item').children('span');

      if ($next.length > 0) {
        $next.focus().parent().trigger('click');
      }

      return;
    }
  });
  $('.comp_v2_0990 form').on('submit', function (event) {
    void 0;
    var $container = $(this).closest('.comp_v2_0990'); 

    $container.find('input,select,button').prop('disabled', true);
    var $loading = $('<div class="comp_v2_0990__selector__btn--loading__spinner">');

    for (var i = 0; i < 12; i++) {
      $loading.append($('<div>'));
    }

    var $button = $container.find('.comp_v2_0990__selector__btn');
    $button.prepend($loading);
    $button.addClass('comp_v2_0990__selector__btn--loading').removeClass('comp_v2_0990__selector__btn');
    setTimeout(function () {
      $loading.remove();
      $button.addClass('comp_v2_0990__selector__btn').removeClass('comp_v2_0990__selector__btn--loading');
      $container.find('input,select,button').prop('disabled', false);
    }, 20000); 
  });
}); 

jQuery(function ($) {
  $('.comp_v2_1003__checkbox__all').on('change', function () {
    var $self = $(this); 

    var checked = $self.prop('checked'); 

    var $block = $self.closest('.comp_v2_1003'); 

    $block.find('.comp_v2_1003__table__checkbox').prop('checked', checked); 

    $block.find('.comp_v2_1003__checkbox__all').not($self).prop('checked', checked); 

    if (checked) {
      $block.find('.comp_v2_1003__button--btn').removeClass('comp_v2_1003__button--btn--hide');
    } else {
      $block.find('.comp_v2_1003__button--btn').addClass('comp_v2_1003__button--btn--hide');
    }
  }); 

  $('.comp_v2_1003__table__checkbox').on('change', function () {
    var $self = $(this); 

    var $block = $self.closest('.comp_v2_1003'); 

    var $checkboxes1 = $block.find('.comp_v2_1003__table__checkbox'); 

    var $checkboxes2 = $block.find('.comp_v2_1003__table__checkbox:checked'); 

    var checked = $checkboxes1.length == $checkboxes2.length; 

    $block.find('.comp_v2_1003__checkbox__all').prop('checked', checked); 

    if ($checkboxes2.length > 0) {
      $block.find('.comp_v2_1003__button--btn').removeClass('comp_v2_1003__button--btn--hide');
    } else {
      $block.find('.comp_v2_1003__button--btn').addClass('comp_v2_1003__button--btn--hide');
    }
  }); 

  $('.comp_v2_1003__checkbox__all').on('keydown', function (event) {
    var $self = $(this); 

    if (event.keyCode == 13) {
      event.preventDefault();
      $self.trigger('click');
      return;
    }
  });
}); 

jQuery(function ($) {
  var $window = $(window); 

  $('.comp_v2_1017').each(function (index, container) {
    function changeCurrent(posY, linkList) {
      var active = null;

      for (var i = 0; i < linkList.length; i++) {
        var y = linkList[i].$target.offset().top;

        if (posY < y) {
          break;
        }

        active = linkList[i];
      } 


      if (window.matchMedia("(max-width:768px)").matches) {
        var getHeaderHeight = function getHeaderHeight() {
          var tempStickiesHeight = 0;
          $('.comp_v2_0010').each(function (index, element) {
            tempStickiesHeight += Math.floor(element.getBoundingClientRect().height);
          });
          return tempStickiesHeight;
        }; 


        if ($container.css("top") != getHeaderHeight()) {
          Stickyfill.remove(container);
          container.style.top = getHeaderHeight() + 'px'; 

          Stickyfill.add(container);
        }
      } else {
        if ($container.css("top") != 0) {
          Stickyfill.remove(container);
          container.style.top = '0px'; 

          Stickyfill.add(container);
        }
      } 


      if (userAgent.indexOf('trident') == -1 && userAgent.indexOf('edge') == -1) {} 


      if (active !== null && active.$element.hasClass('comp_v2_1017__list__item--active')) {
        return;
      } 


      for (var _i4 = 0; _i4 < linkList.length; _i4++) {
        if (linkList[_i4] == active) {
          continue;
        }

        linkList[_i4].$element.removeClass('comp_v2_1017__list__item--active');
      } 


      if (active !== null) {
        active.$element.addClass('comp_v2_1017__list__item--active');
        $container.find('.comp_v2_1017__scroll').stop(false, false).animate({
          scrollLeft: active.$element.position().left
        }, 300);
      }
    }

    ; 

    Stickyfill.add(container);
    var $container = $(container);
    var userAgent = window.navigator.userAgent.toLowerCase(); 

    $container.find('.comp_v2_1017__scroll').each(function (index, element) {
      var ps = new PerfectScrollbar(element, {
        isDoubleXScrollbar: false,
        suppressScrollY: true,
        useBothWheelAxes: true
      });
      new ResizeObserver(function () {
        ps.update();
      }).observe(element);
    });
    var linkList = $container.find('a').map(function (index, element) {
      var $element = $(element);
      var result = {
        $element: $element,
        $target: null,
        top: null 

      };
      var href = $element.attr('href');
      var pos = href.indexOf('#');

      if (pos > -1) {
        var id = href.slice(pos + 1);
        var $target = $('#' + id);

        if ($target.length > 0) {
          result.$target = $target;
          result.top = $target.offset().top;
        }
      } 


      if (result.$target === null) {
        return;
      }

      return result;
    }).toArray(); 

    linkList.sort(function (a, b) {
      return a.top - b.top;
    }); 

    $container.find('a').on('dragstart', function (e) {
      e.preventDefault();
    }); 

    $window.on('scroll', function () {
      changeCurrent($container.offset().top + container.getBoundingClientRect().height, linkList);
    });
    changeCurrent($container.offset().top + container.getBoundingClientRect().height, linkList);
    var observer = new IntersectionObserver(function (entries) {
      for (var i = 0; i < entries.length; i++) {
        var entry = entries[i];
        var $title = $container.find('.comp_v2_1017__title');

        if (entry.isIntersecting) {
          $title.css('display', 'none');
          $title.html('');
        } else {
          var $targets = $('h1').filter(function (index, element) {
            return $(element).closest('header').length == 0;
          });
          $title.html($targets.html());
          $title.css('display', 'block');
        }
      }
    }); 

    observer.observe($container.prevAll('.comp_v2_0150').get(0));
    var keydownAfterScrollFlag = false; 

    $container.find('.comp_v2_1017__list__item').on('focus', function (event) {
      if (keydownAfterScrollFlag == false) {
        return;
      }

      keydownAfterScrollFlag = false;
      var $self = $(this);
      var href = $self.attr('href');
      var pos = href.indexOf('#');

      if (pos > -1) {
        var id = href.slice(pos + 1);
        scrollTo(id);
      }
    });
    $container.find('.comp_v2_1017__list__item').on('keydown', function (event) {
      var $self = $(this); 

      if (event.keyCode == 37) {
        var $item = $self.closest('li').prev().find('.comp_v2_1017__list__item');

        if ($item.length > 0) {
          keydownAfterScrollFlag = true;
          $item.focus();
        }

        return;
      } 


      if (event.keyCode == 39) {
        var _$item3 = $self.closest('li').next().find('.comp_v2_1017__list__item');

        if (_$item3.length > 0) {
          _$item3.focus();

          keydownAfterScrollFlag = true; 
        }

        return;
      } 


      if (event.keyCode == 9) {
        if (event.shiftKey) {
          void 0;
          $self.closest('ul').find('li').eq(0).find('.comp_v2_1017__list__item').focus();
          return;
        }

        event.preventDefault();

        if ($self.length > 0) {
          var href = $self.attr('href');
          var pos = href.indexOf('#');

          if (pos > -1) {
            var id = href.slice(pos + 1);
            var $target = $('#' + id);
            var tabindex = $target.attr('tabindex');

            if (typeof tabindex === 'undefined') {
              $target.attr('tabindex', '0');
            }

            $target.focus();

            if (typeof tabindex === 'undefined') {
              $target.attr('tabindex', '-1');
            }

            void 0;
          }
        }
      }
    });
  });
}); 

jQuery(function ($) {
  $('.comp_v2_1030').each(function (index, element) {
    var $container = $(element);
    var $slider = $container.find('.comp_v2_1030__slider');
    var sliderColumnCount = $slider.find('.comp_v2_1030__slider__column').length;
    var $li = $container.find('.comp_v2_1030__timer__list__li');

    if (location.search.indexOf('slider=disabled') === -1 && sliderColumnCount > 1) {
      $slider.slick({
        autoplay: false,
        appendArrows: $container.find('.comp_v2_1030__layout__contents_layout__arrows'),
        prevArrow: '<div class="prev">PREV</div>',
        nextArrow: '<div class="next">NEXT</div>',
        infinite: true,
        draggable: true,
        dots: false,
        centerMode: true,
        slidesToShow: 1,
        centerPadding: '25vw',
        variableWidth: true,
        swipeToSlide: true,
        responsive: [{
          breakpoint: 769,
          settings: {
            centerPadding: '10vw',
            variableWidth: true,
            arrows: false
          }
        }]
      });
      new ResizeObserver(function () {
        $slider.slick('setPosition');
      }).observe($slider.get(0));
    } 


    $slider.on('afterChange', function (slick, currentSlide) {
      void 0;
      void 0;
      void 0;
      $li.removeClass('comp_v2_1030__timer__list__li--active');
      $li.eq(currentSlide.currentSlide).addClass('comp_v2_1030__timer__list__li--active');
    }); 

    $li.on('click', function () {
      void 0; 

      $slider.slick('slickGoTo', $li.index(this));
    }); 

    $li.find('.comp_v2_1030__timer__list__li__bar02').on('transitionend webkitTransitionEnd oTransitionEnd mozTransitionEnd', function () {
      void 0;

      if (location.search.indexOf('slider=disabled') === -1 && sliderColumnCount > 1) {
        $slider.slick('slickNext');
      }
    }); 

    $li.eq(0).addClass("comp_v2_1030__timer__list__li--active");
  });
}); 

jQuery(function ($) {
  var $window = $(window);
  $('.comp_v2_1040').each(function (index, element) {
    var displayMode = 0; 

    var $spMenu = $(element); 

    $spMenu.on('changeModePC', function () {
      $(".comp_v2_1040").css("bottom", ""); 

      var pcFooterHeight = $(".comp_v2_1040").innerHeight();
      $(".comp_v2_0130").css("padding-bottom", pcFooterHeight);
    }); 

    $spMenu.on('changeModeMobile', function () {
      var spMenuHeight = $(".comp_v2_0010__sp_menu_frame").innerHeight();
      $(".comp_v2_1040").css("bottom", spMenuHeight); 
    }); 

    var resizeEvent = function resizeEvent() {
      if (window.matchMedia('(max-width:768px)').matches) {
        if (displayMode == 2) {
          return;
        }

        displayMode = 2;
        $spMenu.trigger('changeModeMobile');
      } else {
        if (displayMode == 1) {
          return;
        }

        displayMode = 1;
        $spMenu.trigger('changeModePC');
      }
    };

    $window.on('resize', resizeEvent);
    resizeEvent();
  });
}); 

jQuery(function ($) {
  var $window = $(window); 

  $('.comp_v2_1071').each(function (index, element) {
    var $container = $(element);
    var $slider = $container.find('.comp_v2_1071__slider');
    var columns = $slider.data('columns');

    if (columns == null) {
      columns = 3;
    } 


    var slickOptions = {
      autoplay: false,
      arrows: true,
      prevArrow: '<div class="prev">PREV</div>',
      nextArrow: '<div class="next">NEXT</div>',
      centerMode: false,
      variableWidth: false,
      slidesToShow: columns,
      infinite: false,
      draggable: true,
      dots: false,
      swipeToSlide: true,
      responsive: [{
        breakpoint: 769,
        settings: {
          centerMode: false,
          variableWidth: false,
          slidesToShow: 1,
          arrows: false,
          dots: true
        }
      }]
    }; 

    if (location.search.indexOf('slider=disabled') === -1) {
      $slider.slick(slickOptions);
    } else {
      $slider.css({
        'display': 'flex',
        'flex-wrap': 'wrap'
      });
    } 


    $slider.swipeImage({
      isShow: function isShow($target) {
        if (!window.matchMedia('(max-width:768px)').matches) {
          return false;
        }

        if ($target.outerHeight() == 0) {
          return false;
        }

        if (!$slider.hasClass('slick-slider')) {
          return false;
        }

        var slick = $slider.slick('getSlick');
        return slick.slideCount > slick.slickGetOption('slidesToShow');
      },
      calcPositionTop: function calcPositionTop($target, $swipe) {
        return $target.position().top + parseInt($target.css('margin-top'), 10) + ($target.outerHeight() - $target.find('.slick-dots').outerHeight()) / 2 - $swipe.outerHeight() / 2 + 'px';
      }
    });
  });
}); 

jQuery(function ($) {
  $('.comp_v2_1080__box__body__content_block__scroll').each(function (index, element) {
    var ps = new PerfectScrollbar(element, {
      suppressScrollY: true
    });
    new ResizeObserver(function () {
      ps.update();
    }).observe(element);
  }); 

  $('.comp_v2_1080__box__body__content_block__scroll').swipeImage();
}); 

jQuery(function ($) {
  $('.comp_v2_1081__box__body__content_block__scroll').each(function (index, element) {
    var ps = new PerfectScrollbar(element, {
      suppressScrollY: true
    });
    new ResizeObserver(function () {
      ps.update();
    }).observe(element);
  }); 

  $('.comp_v2_1081__box__body__content_block__scroll').swipeImage();
}); 

jQuery(function ($) {
  function createTimeout(callback, delay) {
    var id = setTimeout(callback, delay);
    return {
      clear: function clear() {
        clearTimeout(id);
      },
      finish: function finish() {
        this.clear();
        callback();
      }
    };
  }


  function updateSubmitButtonState($element) {
    var word = $element.find('.comp_v2_1110__box__body__search__pnum__input').val(); 

    $element.find('.comp_v2_1110__box__body__search__submit').prop('disabled', word.length < 3);
  }

  $('.comp_v2_1110__box__body__search__pnum__input').on('keyup', function () {
    updateSubmitButtonState($(this).closest('.comp_v2_1110'));
  });
  $('.comp_v2_1110 form').on('submit', function () {
    var $form = $(this);
    var url = $form.attr('action');
    var pnum = $form.find('input[name="pnum"]').val();
    var type = $form.find('select[name="type"]').val(); 

    var host = url.split('#')[0].split('?')[0].split('/')[2];
    var path = url.split('#')[0].split('?')[0].replace(host, "").replace(/^https*:[\/]{3}/, "");
    var pathInf = path.split('/');
    var fileNm = pathInf.pop(); 

    var selector = fileNm.split('.');

    if (pnum.length > 0) {
      pnum = escapeUrlChar(pnum);
    } 


    if (pnum == "") {
      return false;
    } 


    if (pnum.length < 3) {
      return false;
    } 


    $form.find('input,select,button').prop('disabled', true);
    var $loading = $('<div class="comp_v2_1110__box__body__search__submit--loading__spinner">');

    for (var i = 0; i < 12; i++) {
      $loading.append($('<div>'));
    }

    var $button = $form.find('.comp_v2_1110__box__body__search__submit');
    $button.prepend($loading);
    $button.addClass('comp_v2_1110__box__body__search__submit--loading').removeClass('comp_v2_1110__box__body__search__submit');
    var loading = createTimeout(function () {
      $loading.remove();
      $button.addClass('comp_v2_1110__box__body__search__submit').removeClass('comp_v2_1110__box__body__search__submit--loading');
      $form.find('input,select,button').prop('disabled', false);
      loading = null;
      updateSubmitButtonState($form);
    }, 20000); 

    var tmpFileNm = selector[0] + '.' + pnum;

    if (typeof type !== 'undefined') {
      tmpFileNm += '.' + type;
    }

    tmpFileNm += '.' + selector[1]; 

    url = url.replace(fileNm, tmpFileNm);
    location.href = url;
    return false;
  });
  $('.comp_v2_1110').each(function (index, element) {
    var $container = $(element);
    var loading = null;
    $container.on('start-search', function (event) {
      $container.find('input,select,button').prop('disabled', true);
      var $loading = $('<div class="comp_v2_1110__box__body__search__submit--loading__spinner">');

      for (var i = 0; i < 12; i++) {
        $loading.append($('<div>'));
      }

      var $button = $container.find('.comp_v2_1110__box__body__search__submit');
      $button.prepend($loading);
      $button.addClass('comp_v2_1110__box__body__search__submit--loading').removeClass('comp_v2_1110__box__body__search__submit');
      loading = createTimeout(function () {
        $loading.remove();
        $button.addClass('comp_v2_1110__box__body__search__submit').removeClass('comp_v2_1110__box__body__search__submit--loading');
        $container.find('input,select,button').prop('disabled', false);
        loading = null;
        updateSubmitButtonState($container);
      }, 20000);
    });
    $container.on('stop-search', function (event) {
      if (loading === null) {
        return;
      }

      loading.finish();
    });
  });
}); 

jQuery(function ($) {
  function createTimeout(callback, delay) {
    var id = setTimeout(callback, delay);
    return {
      clear: function clear() {
        clearTimeout(id);
      },
      finish: function finish() {
        this.clear();
        callback();
      }
    };
  } 


  $('.comp_v2_1111__table__scroll').each(function (index, element) {
    var ps = new PerfectScrollbar(element, {
      suppressScrollY: true
    });
    new ResizeObserver(function () {
      ps.update();
    }).observe(element);
  }); 

  $('.comp_v2_1111__table__scroll').swipeImage({
    calcPositionTop: function calcPositionTop($target, $swipe) {
      return $target.position().top + parseInt($target.css('margin-top'), 10) + ($target.outerHeight() + 20) / 2 - $swipe.outerHeight() / 2 + 'px';
    }
  });
  $('.comp_v2_1111').each(function (index, element) {
    var $container = $(element);
    var loading = null;
    var $jqxhr = null; 

    var autoFlg = $('[name=autoFlg]').val();
    void 0;

    if (autoFlg == 'true') {
      var $searchbox = $('[name=autoFlg]').closest('.comp_v2_1111__inner__searchbox__result');
      fncSearch($searchbox);
    }

    function fncSearch($searchbox) {
      var distANG = "anglia"; 

      var distARW = "arrow"; 

      var distAVN = "avnet"; 

      var distC1 = "chip1stop"; 

      var distDK = "dk"; 

      var distGLYN = "glyngmbh"; 

      var distMouser = "mouser"; 

      var distRS = "rs"; 

      var distRTR = "rutronik"; 

      var distTTI = "tti"; 

      var distWPG = "wpg"; 

      var distARWEU = "arroweu"; 

      var distARWCA = "arrowca"; 

      var distElement14 = "element14"; 

      var distFarnell = "farnell"; 

      var distNewark = "newark"; 

      var sc_bizPartnerANG = 'sc_onlineStoresClick2("Anglia:{pnum}:{lang}")';
      var sc_bizPartnerARW = 'sc_onlineStoresClick2("Arrow:{pnum}:{lang}")';
      var sc_bizPartnerAVN = 'sc_onlineStoresClick2("Avnet:{pnum}:{lang}")';
      var sc_bizPartnerC1 = 'sc_onlineStoresClick2("ChipOneStop:{pnum}:{lang}")';
      var sc_bizPartnerDK = 'sc_onlineStoresClick2("Digi-key:{pnum}:{lang}")';
      var sc_bizPartnerGLYN = 'sc_onlineStoresClick2("Glyn:{pnum}:{lang}")';
      var sc_bizPartnerMouser = 'sc_onlineStoresClick2("Mouser:{pnum}:{lang}")';
      var sc_bizPartnerRS = 'sc_onlineStoresClick2("RS:{pnum}:{lang}")';
      var sc_bizPartnerRTR = 'sc_onlineStoresClick2("Rutronik:{pnum}:{lang}")';
      var sc_bizPartnerTTI = 'sc_onlineStoresClick2("TTI:{pnum}:{lang}")';
      var sc_bizPartnerWPG = 'sc_onlineStoresClick2("WPG:{pnum}:{lang}")'; 

      var sc_bizPartnerARWEU = 'sc_onlineStoresClick2("Arrow:{pnum}:{lang}")';
      var sc_bizPartnerARWCA = 'sc_onlineStoresClick2("Arrow:{pnum}:{lang}")'; 

      var sc_bizPartnerElement14 = 'sc_onlineStoresClick2("element14:{pnum}:{lang}")';
      var sc_bizPartnerFarnell = 'sc_onlineStoresClick2("farnell:{pnum}:{lang}")';
      var sc_bizPartnerNewark = 'sc_onlineStoresClick2("newark:{pnum}:{lang}")';
      var sc_bizPartnerLang = $searchbox.data('sc-biz-partner-lang'); 

      var distArr = []; 


      var pnum = $searchbox.find('[name="pnum"]').val().trim();
      var type = $searchbox.find('[name="type"]').val();
      void 0;
      void 0; 

      if (pnum == "") {
        return;
      } 


      if (pnum.length < 3) {
        return;
      } 


      $('.comp_v2_1110').trigger('start-search');
      loading = createTimeout(function () {
        if ($jqxhr !== null) {
          $jqxhr.abort('timeout');
        }
      }, 20000); 

      var rGroup = $searchbox.find('[name="rGroup"]').val();

      if (rGroup == '1') {
        distArr.push($searchbox.data('name-' + distDK));
        distArr.push($searchbox.data('name-' + distMouser));
        distArr.push($searchbox.data('name-' + distARW));
        distArr.push($searchbox.data('name-' + distTTI));
        distArr.push($searchbox.data('name-' + distAVN)); 

        distArr.push($searchbox.data('name-' + distARWEU));
        distArr.push($searchbox.data('name-' + distARWCA)); 

        distArr.push($searchbox.data('name-' + distNewark)); 

      } else if (rGroup == '2') {
        distArr.push($searchbox.data('name-' + distDK));
        distArr.push($searchbox.data('name-' + distMouser));
        distArr.push($searchbox.data('name-' + distANG));
        distArr.push($searchbox.data('name-' + distARW));
        distArr.push($searchbox.data('name-' + distTTI));
        distArr.push($searchbox.data('name-' + distGLYN));
        distArr.push($searchbox.data('name-' + distRTR));
        distArr.push($searchbox.data('name-' + distRS)); 

        distArr.push($searchbox.data('name-' + distARWEU));
        distArr.push($searchbox.data('name-' + distARWCA)); 

        distArr.push($searchbox.data('name-' + distFarnell)); 

      } else if (rGroup == '3') {
        distArr.push($searchbox.data('name-' + distDK));
        distArr.push($searchbox.data('name-' + distMouser));
        distArr.push($searchbox.data('name-' + distRS));
        distArr.push($searchbox.data('name-' + distC1));
        distArr.push($searchbox.data('name-' + distWPG)); 

        distArr.push($searchbox.data('name-' + distARW));
        distArr.push($searchbox.data('name-' + distARWEU));
        distArr.push($searchbox.data('name-' + distARWCA)); 

        distArr.push($searchbox.data('name-' + distElement14)); 

      }

      $searchbox.find('[name="pnum"]').val('');
      var $resultBlock = $container.find('.comp_v2_1111__table');
      var $displayKeyword = $container.find('.comp_v2_1111__inner__searchbox__result__keyword');
      var $displayNumber = $container.find('.comp_v2_1111__inner__searchbox__result__number');
      var $displayTable = $container.find('.comp_v2_1111__table__table');
      var $displayMessage = $container.find('.comp_v2_1111__table__message');
      var $alertMessage = $container.find('.comp_v2_1111__alert,.comp_v2_1111__alert--show');
      $jqxhr = $.ajax({
        url: '/bin/getNcSearchJson',
        type: 'POST',
        data: {
          PN1: pnum,
          SearchType: type
        },
        dataType: 'json',
        timeout: 20000,
        beforeSend: function beforeSend() {
          $displayKeyword.html(pnum); 

          $displayNumber.show();
          $displayNumber.html($displayNumber.data('text-searching')); 

          $displayTable.hide(); 

          $displayTable.find('tbody').empty();

          if ($displayTable.data('dataTable')) {
            $displayTable.data('dataTable').clear();
            $displayTable.data('dataTable').destroy();
            $displayTable.data('dataTable', null);
          } 


          $displayMessage.hide(); 

          $displayMessage.empty(); 

          $alertMessage.addClass('comp_v2_1111__alert').removeClass('comp_v2_1111__alert--show');
        }
      }).done(function (data) {
        if (data === null || parseInt(data.SearchedParts[0].Count) == 0) {
          $displayNumber.hide();
          $displayMessage.html($displayMessage.data('text-notfound'));
          $displayMessage.show();
          return;
        }

        var searchPartsList = data.SearchedParts[0].Parts;
        var textButtonMessage = $displayTable.data('text-button-message');
        var rows = []; 

        for (var i = 0; i < searchPartsList.length; i++) {
          var searchParts = searchPartsList[i];
          var getDist = searchParts.Distributor;
          var isNDist = true;

          for (var n = 0; n < distArr.length; n++) {
            if (getDist == distArr[n]) {
              isNDist = false;
              break;
            }
          }

          if (isNDist) {
            continue;
          } 


          var row = generateRow(searchParts, distArr, rGroup, textButtonMessage);

          if (row === null) {
            continue;
          }

          rows.push(row);
        } 


        if (rows.length > 0) {
          $displayNumber.html(rows.length + $displayNumber.data('text-unit')); 

          $displayTable.find('tbody').append(rows);
          $displayTable.data('dataTable', $displayTable.DataTable({
            autoWidth: false,
            info: false,
            paging: false,
            searching: false,
            retrieve: true,
            columnDefs: [{
              targets: 4,
              orderable: false
            }]
          }));
          $displayTable.show();
        } else {
          $displayNumber.hide();
          $displayMessage.html($displayMessage.data('text-nostock'));
          $displayMessage.show();
        }
      }).fail(function (xhr, status, error) {
        if (xhr.status) {
          $displayMessage.html($displayMessage.data('text-error'));
        } else if (status === 'parsererror') {
          $displayMessage.html($displayMessage.data('text-notfound'));
        } else if (status === 'timeout') {
          $displayMessage.html($displayMessage.data('text-error'));
        } else {
          $displayMessage.html($displayMessage.data('text-error'));
        }

        $displayNumber.hide();
        $displayMessage.show();
      }).always(function (xhr, status, error) {
        $jqxhr = null;
        $('.comp_v2_1110').trigger('stop-search'); 

        $resultBlock.addClass('comp_v2_1111__table--show').removeClass('comp_v2_1111__table');

        if (status.toLowerCase() == 'success') {
          $alertMessage.addClass('comp_v2_1111__alert--show').removeClass('comp_v2_1111__alert');
        }

        if (loading === null) {
          return;
        }

        loading.finish();
      }); 

      function generateRow(partsInfo, distArr, rGroup, textButtonMessage) {
        var isDisplay = false; 

        var onclickProc;
        var agr; 

        var distANG = null; 

        var distARW = null; 

        var distAVN = null; 

        var distC1 = null; 

        var distDK = null; 

        var distGLYN = null; 

        var distMouser = null; 

        var distRS = null; 

        var distRTR = null; 

        var distTTI = null; 

        var distWPG = null; 

        var distARWEU = null; 

        var distARWCA = null; 

        var distElement14 = null; 

        var distFarnell = null; 

        var distNewark = null; 

        if (rGroup == '1') {
          distDK = distArr[0];
          distMouser = distArr[1];
          distARW = distArr[2];
          distTTI = distArr[3];
          distAVN = distArr[4]; 

          distARWEU = distArr[5];
          distARWCA = distArr[6]; 

          distNewark = distArr[7];
        } else if (rGroup == '2') {
          distDK = distArr[0];
          distMouser = distArr[1];
          distANG = distArr[2];
          distARW = distArr[3];
          distTTI = distArr[4];
          distGLYN = distArr[5];
          distRTR = distArr[6];
          distRS = distArr[7]; 

          distARWEU = distArr[8];
          distARWCA = distArr[9]; 

          distFarnell = distArr[10];
        } else if (rGroup == '3') {
          distDK = distArr[0];
          distMouser = distArr[1];
          distRS = distArr[2];
          distC1 = distArr[3];
          distWPG = distArr[4]; 

          distARW = distArr[5];
          distARWEU = distArr[6];
          distARWCA = distArr[7]; 

          distElement14 = distArr[8];
        } 


        var dilpPartNum = partsInfo.PartNum; 

        var dilpDistributor = partsInfo.Distributor;
        var dilpQuantity = parseInt(partsInfo.Quantity);
        var dilpInvDate = partsInfo.PartDate; 

        var dilpURL = partsInfo.CartLink.URL; 

        if (!isDisplay && distANG !== null) {
          if (dilpDistributor == distANG) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerANG, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distARW !== null) {
          if (dilpDistributor == distARW) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerARW, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distAVN !== null) {
          if (dilpDistributor == distAVN) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerAVN, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distC1 !== null) {
          if (dilpDistributor == distC1) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerC1, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distDK !== null) {
          if (dilpDistributor == distDK) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerDK, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distGLYN !== null) {
          if (dilpDistributor == distGLYN) {
            isDisplay = true;
            dilpURL = "https://www.glyn.de/"; 

            agr = getAgree(sc_bizPartnerGLYN, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distMouser !== null) {
          if (dilpDistributor == distMouser) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerMouser, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distRS !== null) {
          if (dilpDistributor == distRS) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerRS, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distRTR !== null) {
          if (dilpDistributor == distRTR) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerRTR, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distTTI !== null) {
          if (dilpDistributor == distTTI) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerTTI, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distWPG !== null) {
          if (dilpDistributor == distWPG) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerWPG, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc; 
          }
        } 


        if (!isDisplay && distARWEU !== null) {
          if (dilpDistributor == distARWEU) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerARWEU, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc;
          }
        } 


        if (!isDisplay && distARWCA !== null) {
          if (dilpDistributor == distARWCA) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerARWCA, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc;
          }
        } 


        if (!isDisplay && distNewark !== null) {
          if (dilpDistributor == distNewark) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerNewark, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc;
          }
        } 


        if (!isDisplay && distFarnell !== null) {
          if (dilpDistributor == distFarnell) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerFarnell, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc;
          }
        } 


        if (!isDisplay && distElement14 !== null) {
          if (dilpDistributor == distElement14) {
            isDisplay = true;
            agr = getAgree(sc_bizPartnerElement14, dilpPartNum, sc_bizPartnerLang, '', '');
            onclickProc = agr.onclickProc;
          }
        } 


        if (!isDisplay) {
          return null;
        }

        var $tr = $('<tr>');
        $tr.append($('<td>').html(dilpPartNum)); 

        $tr.append($('<td>').html(dilpDistributor));
        $tr.append($('<td>').html(dilpQuantity));
        $tr.append($('<td>').html(dilpInvDate));
        $tr.append(function () {
          var $td = $('<td>'); 

          if (dilpURL !== '' && dilpURL !== null) {
            var $anc = $('<a>');
            $anc 
            .attr('href', dilpURL) 
            .attr('target', '_blank').attr('onclick', onclickProc).addClass('comp_v2_1111__table__table__btn--default') 
            .addClass('CV_OnlineDistributor') 
            .html(textButtonMessage);
            $td.append($anc);
          }

          return $td;
        }());
        return $tr;
      }

      function getAgree(bizP, pNum, bizPLang, aUrl, dUrl) {
        var agr = {};
        agr.onclickProc = bizP.replace("{pnum}", pNum).replace("{lang}", bizPLang); 

        return agr;
      }
    }
  });
}); 

jQuery(function ($) {
  $('.comp_v2_1120__inner__searchbox__btn').on('click', function () {
    var $button = $(this);
    var $component = $button.closest('.comp_v2_1120'); 

    $component.find('input,select,button').prop('disabled', true);
    var $loading = $('<div class="comp_v2_1120__inner__searchbox__btn--loading__spinner">');

    for (var i = 0; i < 12; i++) {
      $loading.append($('<div>'));
    }

    $button.prepend($loading);
    $button.addClass('comp_v2_1120__inner__searchbox__btn--loading').removeClass('comp_v2_1120__inner__searchbox__btn');
    setTimeout(function () {
      $loading.remove();
      $button.addClass('comp_v2_1120__inner__searchbox__btn').removeClass('comp_v2_1120__inner__searchbox__btn--loading');
      $component.find('input,select,button').prop('disabled', false);
    }, 20000); 

    var url = $button.data('url');
    var $select = $component.find('.comp_v2_1120__inner__searchbox__select select');
    var category = $select.val();
    url = url.replace('.html', ''); 

    url += '.3'; 

    if (category != '') {
      url += '.';
      url += encodeURIComponent(category);
    }

    url += '.html';

    if (category != '') {
      url += '#';
      url += category;
    }

    location.href = url;
  });
}); 

jQuery(function ($) {
  $('.comp_v2_1140__select_all__checkbox').on('change', function () {
    var $self = $(this); 

    var checked = $self.prop('checked'); 

    var $container = $self.closest('.comp_v2_1140__frame'); 

    $container.find('.comp_v2_1140__checkbox').not(':disabled').prop('checked', checked); 

    if (checked) {
      $container.find('button.comp_v2_1140__button').removeClass('-hide');
    } else {
      $container.find('button.comp_v2_1140__button').addClass('-hide');
    }
  }); 

  $('.comp_v2_1140__checkbox').on('change', function () {
    var $self = $(this); 

    var $container = $self.closest('.comp_v2_1140__frame'); 

    var $checkboxes1 = $container.find('.comp_v2_1140__checkbox').not(':disabled'); 

    var $checkboxes2 = $container.find('.comp_v2_1140__checkbox:checked'); 

    var checked = $checkboxes1.length == $checkboxes2.length; 

    $container.find('.comp_v2_1140__select_all__checkbox').prop('checked', checked); 

    if ($checkboxes2.length > 0) {
      $container.find('button.comp_v2_1140__button').removeClass('-hide');
    } else {
      $container.find('button.comp_v2_1140__button').addClass('-hide');
    }
  }); 

  $('.comp_v2_1140__select_all__checkbox').on('keydown', function (event) {
    var $self = $(this); 

    if (event.keyCode == 13) {
      event.preventDefault();
      $self.trigger('click');
      return;
    }
  }); 

  $('.comp_v2_1140__checkbox_text a').on('click', function (event) {
    var $self = $(this);
    var $container = $self.closest('.comp_v2_1140__frame'); 

    var positiveText = $container.data('positive-text'); 

    var negativeText = $container.data('negative-text'); 

    var url = $self.data('accept');

    if (typeof url == 'undefined') {
      return;
    }

    var $content = $('<iframe src="' + url + '"></iframe>');
    $content.on('load', function () {
      $content.closest('.modal_dialog__box').find('.modal_dialog__positive_button').prop('disabled', false);
    });
    var options = {
      content: $content,
      positiveButton: {
        disabled: true,
        callback: function callback() {
          var a = document.createElement('a');
          a.href = $self.attr('href');
          var target = $self.attr('target');

          if (typeof target != 'undefined' && target != '') {
            a.target = target;
          }

          a.click();
        }
      }
    };

    if (positiveText) {
      options['positiveButton']['text'] = positiveText;
    }

    if (negativeText) {
      options['negativeButton'] = {
        text: negativeText
      };
    }

    var dialog = new ModalDialog(options);
    dialog.show();
    event.preventDefault();
    return false;
  }); 

  $('button.comp_v2_1140__button').on('click', function () {
    var $container = $(this).closest('.comp_v2_1140__frame'); 

    var positiveText = $container.data('positive-text'); 

    var negativeText = $container.data('negative-text'); 

    var urlList = $container.find('.comp_v2_1140__checkbox:checked').map(function (index, element) {
      return $(element).parent().find('.comp_v2_1140__checkbox_text a[data-accept]').data('accept');
    });
    urlList = $.makeArray(urlList);
    urlList = urlList.filter(function (element, index, array) {
      return array.indexOf(element) === index;
    });

    function modalDialog(urlList, index) {
      var $content = $('<iframe src="' + urlList[index] + '"></iframe>');
      $content.on('load', function () {
        $content.closest('.modal_dialog__box').find('.modal_dialog__positive_button').prop('disabled', false);
      });
      var options = {
        content: $content,
        positiveButton: {
          disabled: true,
          callback: function callback() {
            index++;

            if (index < urlList.length) {
              modalDialog(urlList, index);
              return;
            }

            $container.find('form').trigger('submit');
          }
        }
      };

      if (positiveText) {
        options['positiveButton']['text'] = positiveText;

        if (urlList.length > 1) {
          options['positiveButton']['text'] += ' (' + (index + 1) + '/' + urlList.length + ')';
        }
      }

      if (negativeText) {
        options['negativeButton'] = {
          text: negativeText
        };
      }

      var dialog = new ModalDialog(options);
      dialog.show();
    }

    modalDialog(urlList, 0);
  }); 

  $('.comp_v2_1140__table__read_more__button,.comp_v2_1140__table__close__button').on('keydown', function (event) {
    var $self = $(this); 

    if (event.keyCode == 13) {
      event.preventDefault();
      $self.trigger('click');
      return;
    }
  }); 

  $('.comp_v2_1140__table__close__button').on('click', function (event) {
    var $target = $(event.target);
    var $trClose = $target.closest('.comp_v2_1140__table__close');
    var $trToggleFirst = $trClose.prevAll('.comp_v2_1140__table__read_more').next();
    var $window = $(window);
    $window.scrollTop($window.scrollTop() - ($trClose.offset().top - $trToggleFirst.offset().top));
  });
}); 

jQuery(function ($) {
  var tabFlag = true;

  var tabTimtoutId = null;

  function mouseEnterCallback(event) {
    if (window.matchMedia('(max-width:768px)').matches) {
      return;
    }

    var $slider = $(event.currentTarget).find('.comp_v2_1160__contents__item__box__media__slider');
    $slider.slick('slickGoTo', 1, true);
    $slider.slick('slickPlay');
  }


  function mouseLeaveCallback(event) {
    var $slider = $(event.currentTarget).find('.comp_v2_1160__contents__item__box__media__slider');
    var slick = $slider.slick('getSlick');
    slick.slickPause();
    slick.options.autoplay = false;
    slick.options.paused = true;

    if (slick.activeBreakpoint == null) {
      slick.options.waitForAnimate = false;
      slick.slickGoTo(0, true);
      slick.options.waitForAnimate = true;
    }
  }


  function sliderBreakpointCallback(event, slick, breakpoint) {
    var $target = $(event.currentTarget);
    $target.off('breakpoint', sliderBreakpointCallback); 

    $target.closest('.comp_v2_1160').find('input[name="view-type"][value="tile"]').trigger('click');
    slick.slickPause();
    var index = 0;

    if (breakpoint == 768) {
      index = slick.$slider.data('mb-initial-index') || 0;
    }

    slick.slickGoTo(index);
    $target.on('breakpoint', sliderBreakpointCallback);
  }


  function scrollFilterTop($component) {
    var $window = $(window);
    var $filter = $component.find('.comp_v2_1160__filter');
    var height = $filter.outerHeight();
    var top = parseInt($filter.css('top'), 10) || 0;
    var offset = $component.find('.comp_v2_1160__h4--bold').offset();
    var posY = offset.top - top - height;

    if (posY < 0) {
      posY = 0;
    }

    if ($window.scrollTop() > posY) {
      $window.scrollTop(posY);
    }
  }

  var slickOptions = {
    arrows: true,
    fade: true,
    autoplaySpeed: 1500,
    dots: true,
    autoplay: false,
    pauseOnHover: false,
    responsive: [{
      breakpoint: 768
    }]
  };
  var $slider = $('.comp_v2_1160__contents__item__box__media__slider'); 

  $slider.on('init', function (event, slick) {
    var $container = $(event.currentTarget).closest('.comp_v2_1160__contents__item__box__media__slider');

    if (slick.activeBreakpoint == 768) {
      var index = slick.$slider.data('mb-initial-index') || 0;
      slick.slickGoTo(index);
    }

    $container.on('breakpoint', sliderBreakpointCallback);
  }); 

  $slider.slick(slickOptions); 

  $('.comp_v2_1160__contents__item__box').on('mouseenter', mouseEnterCallback).on('mouseleave', mouseLeaveCallback);
  $('.comp_v2_1160__frame').each(function (index, element) {
    var $component = $(element); 

    var muuriContents = new Muuri($component.find('.comp_v2_1160__contents').get(0), {
      layout: {
        rounding: false 

      },
      sortData: {
        title: function title(item, element) {
          var value = $(element).find('.comp_v2_1160__contents__item__box__title').text();
          return value;
        },
        design_data: function design_data(item, element) {
          return $(element).find('.comp_v2_1160__contents__item__box__design_data__content__item img[title]').length;
        },
        description: function description(item, element) {
          var value = $(element).find('.comp_v2_1160__contents__item__box__description').text();
          return value;
        },
        date: function date(item, element) {
          var value = $(element).find('.comp_v2_1160__contents__item__box__date').data('date');
          return Number(value);
        }
      }
    }); 

    muuriContents.on('filter', function (shownItems, hiddenItems) {
      $component.find('.comp_v2_1160__count__number').text(shownItems.length);
    }); 

    muuriContents.on('layoutStart', function (items) {
      tabTimtoutId = setTimeout(function () {
        tabFlag = true;
        tabTimtoutId = null;
      }, 5000);
      tabFlag = false;
    }); 

    muuriContents.on('layoutEnd', function (items) {
      setTimeout(function () {
        var container = muuriContents.getElement();

        for (var i = 0; i < items.length; i++) {
          var _element = items[i].getElement();

          container.appendChild(_element);
        }

        tabFlag = true;

        if (tabTimtoutId != null) {
          clearTimeout(tabTimtoutId);
          tabTimtoutId = null;
        }
      }, 0);
    }); 

    $component.find('.comp_v2_1160__filter__item__label').on('click', function (event) {
      void 0;
      void 0;
      var $target = $(event.currentTarget);
      var $radio = $('#' + $target.attr('for'));

      if ($radio.prop('checked')) {
        var $all = $target.closest('.comp_v2_1160').find('input[name="filter"][value="all"]');
        $all.trigger('click');
        event.preventDefault();
        event.stopPropagation();
      }
    }); 

    $component.find('input[name="filter"]').on('change', function (event) {
      void 0;
      void 0;
      var $target = $(event.currentTarget);
      var $container = $target.closest('.comp_v2_1160');
      var $title = $container.find('.comp_v2_1160__title__text');
      var title;
      var filter = $target.val();

      if (filter == 'all') {
        title = $title.data('default');
        filter = '*';
      } else {
        title = $target.next('.comp_v2_1160__filter__item__label').text().trim();
        filter = '[data-filter-' + filter + '="1"]';
      } 


      muuriContents.filter(filter, {
        onFinish: function onFinish(items) {
          items.forEach(function (item) {
            var element = item.getElement(); 

            $(element).find('.comp_v2_1160__contents__item__box__media__slider').slick('setPosition');
          });
        }
      }); 

      $title.text(title); 

      scrollFilterTop($component);
    }); 

    $component.find('.comp_v2_1160__order__type__item a').on('click', function (event) {
      void 0;
      void 0;
      event.preventDefault();
      var $target = $(event.currentTarget);
      var $container = $target.closest('.comp_v2_1160'); 

      var sortBy = [$target.data('sort-by')];

      if (sortBy == 'date') {
        sortBy.push('title');
      } 


      var options = {
        descending: $target.attr('data-state') == '1' 

      }; 

      muuriContents.sort(sortBy.join(' '), options);
      $container.find('.comp_v2_1160__order__type__item a[data-state!="0"]').attr('data-state', '0');
      $target.attr('data-state', options['descending'] ? '2' : '1');
    }); 

    $component.find('input[name="view-type"]').on('change', function (event) {
      void 0;
      void 0;
      var $target = $(event.currentTarget);
      var $container = $target.closest('.comp_v2_1160');

      if ($target.val() == 'list') {
        $container.find('.comp_v2_1160__contents__item__box__media__slider').slick('slickPause');
      } else {
        $container.find('.comp_v2_1160__contents__item__box__media__slider').slick('setPosition');
      }

      muuriContents.refreshItems().layout(true);
    });
  });
  $('.comp_v2_1160__filter').each(function (index, element) {
    Stickyfill.add(element);
  }); 

  $('.comp_v2_1160__filter__item label').on('keydown', function (event) {
    if (event.keyCode == 13 || event.keyCode == 32) {
      event.preventDefault();
      $(event.currentTarget).trigger('click');
      return;
    }
  }); 

  $('.comp_v2_1160__type__item label').on('keydown', function (event) {
    if (event.keyCode == 13 || event.keyCode == 32) {
      event.preventDefault();
      $(event.currentTarget).trigger('click');
      return;
    }
  }); 

  $('.comp_v2_1160 input[name="filter"]:checked').trigger('change'); 

  $(window).on('keydown', function (event) {
    if (!tabFlag && event.keyCode == 9) {
      event.preventDefault();
      event.stopPropagation();
      return false;
    }
  });
}); 

jQuery(function ($) {
  function generateContentsFilter1($selected) {
    var filter = $selected.val();

    if (filter == 'all') {
      return '*';
    }

    return '[data-filter1-' + filter + '="1"]';
  }


  function generateContentsFilter2($selected) {
    var filter = $selected.val();

    if (filter == 'all') {
      return '';
    }

    return '[data-filter2-' + filter + '="1"]';
  }


  function getParameterByName(name) {
    var queryString = window.location.search;

    if (!queryString) {
      return '';
    }

    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');

    if (!regex.test(queryString)) {
      return '';
    }

    var results = regex.exec(queryString);
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  }


  function scrollFilterTop($component) {
    var $window = $(window);
    var $filter = $component.find('.comp_v2_1180__filter');
    var height = $filter.outerHeight();
    var top = parseInt($filter.css('top'), 10) || 0;
    var offset = $component.find('.comp_v2_1180__contents').offset();
    var posY = offset.top - top - height;

    if (posY < 0) {
      posY = 0;
    }

    if ($window.scrollTop() > posY) {
      $window.scrollTop(posY);
    }
  } 


  $('.comp_v2_1180__filter__item__list__item__label').on('click', function (event) {
    void 0;
    void 0;
    var $target = $(event.currentTarget);
    var $container = $target.closest('.comp_v2_1180');
    var $radio = $('#' + $target.attr('for'));

    if ($radio.prop('checked')) {
      $container.find('input[name="' + $radio.attr('name') + '"][value="all"]').trigger('click');
      event.preventDefault();
      event.stopPropagation();
    }
  });
  $('.comp_v2_1180__frame').each(function (index, element) {
    var $component = $(element); 

    var muuriContents = new Muuri($component.find('.comp_v2_1180__contents__inner').get(0), {
      layout: {
        rounding: false 

      }
    }); 

    $component.find('input[name="filter1"]').on('change', function (event) {
      void 0;
      void 0;
      var $target = $(event.currentTarget);
      var $container = $target.closest('.comp_v2_1180');
      var $filter2 = $container.find('.comp_v2_1180__filter__item[data-type="2"]');
      var filter1 = $target.val();

      if (filter1 == 'all') {
        $container.find('input[name="filter2"][value="all"]').prop('checked', true); 

        $filter2.hide(300);
      } else {
        var $selected = $filter2.find(':checked');

        if ($selected.val() != 'all') {
          if (typeof $selected.closest('.comp_v2_1180__filter__item__list__item').attr('data-filter1-' + filter1) === 'undefined') {
            $container.find('input[name="filter2"][value="all"]').prop('checked', true);
          } else {
            setTimeout(function () {
              $container.find('input[name="filter2"]:checked').trigger('change');
            }, 0);
          }
        } 


        $filter2.show(300); 

        $container.find('.comp_v2_1180__filter__item[data-type="2"] .comp_v2_1180__filter__item__list__item').not(':hidden').fadeOut(150).promise().done(function () {
          $container.find('.comp_v2_1180__filter__item[data-type="2"] .comp_v2_1180__filter__item__list__item[data-filter1-' + filter1 + '="1"]').fadeIn(150);
        });
      } 


      var filter = generateContentsFilter1($target); 

      muuriContents.filter(filter); 

      scrollFilterTop($component);
    }); 

    $component.find('input[name="filter2"]').on('change', function (event) {
      void 0;
      void 0;
      var $target = $(event.currentTarget);
      var $container = $target.closest('.comp_v2_1180');
      var $filter1 = $container.find('input[name="filter1"]:checked'); 

      var filter = generateContentsFilter1($filter1) + generateContentsFilter2($target); 

      muuriContents.filter(filter); 

      scrollFilterTop($component);
    }); 

    if ($component.find('input[name="filter1"]:checked').val() == 'all' && $component.find('input[name="filter2"]:checked').val() == 'all') {
      var _category = getParameterByName('category');

      var subCategory = getParameterByName('sub_category');
      $component.find('input[name="filter1"][value="' + _category + '"]').attr('checked', true);
      $component.find('.comp_v2_1180__filter__item__list__item[data-filter1-' + _category + '="1"] input[name="filter2"][value="' + subCategory + '"]').attr('checked', true);
    }

    var $filter1 = $component.find('input[name="filter1"]:checked');
    var $filter2 = $component.find('input[name="filter2"]:checked'); 

    var category = $filter1.val();

    if (category != 'all') {
      $component.find('.comp_v2_1180__filter__item[data-type="2"] .comp_v2_1180__filter__item__list__item').hide();
      $component.find('.comp_v2_1180__filter__item[data-type="2"] .comp_v2_1180__filter__item__list__item[data-filter1-' + category + '="1"]').show();
      $component.find('.comp_v2_1180__filter__item[data-type="2"]').show();
    } 


    var filter = generateContentsFilter1($filter1) + generateContentsFilter2($filter2);
    muuriContents.filter(filter);
  });
  $('.comp_v2_1180__filter').each(function (index, element) {
    Stickyfill.add(element);
  }); 

  $('.comp_v2_1180__filter__item label').on('keydown', function (event) {
    if (event.keyCode == 13 || event.keyCode == 32) {
      event.preventDefault();
      $(event.currentTarget).trigger('click');
      return;
    }
  });
}); 

jQuery(function ($) {
  function generateContentsFilter1($selected) {
    var filter = $selected.val();

    if (filter == 'all') {
      return '*';
    }

    return '[data-filter1-' + filter + '="1"]';
  }


  function generateContentsFilter2($selected) {
    var filter = $selected.val();

    if (filter == 'all') {
      return '';
    }

    return '[data-filter2-' + filter + '="1"]';
  }


  function getParameterByName(name) {
    var queryString = window.location.search;

    if (!queryString) {
      return '';
    }

    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');

    if (!regex.test(queryString)) {
      return '';
    }

    var results = regex.exec(queryString);
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  }


  function scrollFilterTop($component) {
    var $window = $(window);
    var $filter = $component.find('.comp_v2_1200__filter');
    var height = $filter.outerHeight();
    var top = parseInt($filter.css('top'), 10) || 0;
    var offset = $component.find('.comp_v2_1200__contents').offset();
    var posY = offset.top - top - height;

    if (posY < 0) {
      posY = 0;
    }

    if ($window.scrollTop() > posY) {
      $window.scrollTop(posY);
    }
  } 


  $('.comp_v2_1200__filter__item__list__item__label').on('click', function (event) {
    void 0;
    void 0;
    var $target = $(event.currentTarget);
    var $container = $target.closest('.comp_v2_1200');
    var $radio = $('#' + $target.attr('for'));

    if ($radio.prop('checked')) {
      $container.find('input[name="' + $radio.attr('name') + '"][value="all"]').trigger('click');
      event.preventDefault();
      event.stopPropagation();
    }
  });
  $('.comp_v2_1200__frame').each(function (index, element) {
    var $component = $(element); 

    var muuriContents = new Muuri('.comp_v2_1200__contents__inner', {
      layout: {
        rounding: false 

      }
    }); 

    $component.find('input[name="filter1"]').on('change', function (event) {
      void 0;
      void 0;
      var $target = $(event.currentTarget);
      var $container = $target.closest('.comp_v2_1200');
      var $filter2 = $container.find('.comp_v2_1200__filter__item[data-type="2"]');
      var filter1 = $target.val();

      if (filter1 == 'all') {
        $container.find('input[name="filter2"][value="all"]').prop('checked', true); 

        $filter2.hide(300);
      } else {
        var $selected = $filter2.find(':checked');

        if ($selected.val() != 'all') {
          if (typeof $selected.closest('.comp_v2_1200__filter__item__list__item').attr('data-filter1-' + filter1) === 'undefined') {
            $container.find('input[name="filter2"][value="all"]').prop('checked', true);
          } else {
            setTimeout(function () {
              $container.find('input[name="filter2"]:checked').trigger('change');
            }, 0);
          }
        } 


        $filter2.show(300); 

        $container.find('.comp_v2_1200__filter__item[data-type="2"] .comp_v2_1200__filter__item__list__item').not(':hidden').fadeOut(150).promise().done(function () {
          $container.find('.comp_v2_1200__filter__item[data-type="2"] .comp_v2_1200__filter__item__list__item[data-filter1-' + filter1 + '="1"]').fadeIn(150);
        });
      } 


      var filter = generateContentsFilter1($target); 

      muuriContents.filter(filter); 

      scrollFilterTop($component);
    }); 

    $component.find('input[name="filter2"]').on('change', function (event) {
      void 0;
      void 0;
      var $target = $(event.currentTarget);
      var $container = $target.closest('.comp_v2_1200');
      var $filter1 = $container.find('input[name="filter1"]:checked'); 

      var filter = generateContentsFilter1($filter1) + generateContentsFilter2($target); 

      muuriContents.filter(filter); 

      scrollFilterTop($component);
    });
  });
  $('.comp_v2_1200__filter').each(function (index, element) {
    Stickyfill.add(element);
  });
  var category = getParameterByName('category');
  $('.comp_v2_1200__frame').each(function (index, element) {
    var $container = $(element); 

    if ($container.find('input[name="filter1"]:checked').val() == 'all' && $container.find('input[name="filter2"]:checked').val() == 'all') {
      $container.find('input[name="filter1"][value="' + category + '"]').attr('checked', true);
    }
  }); 

  $('.comp_v2_1200 input[name="filter1"]:checked').trigger('change'); 

  $('.comp_v2_1200__filter__item label').on('keydown', function (event) {
    if (event.keyCode == 13 || event.keyCode == 32) {
      event.preventDefault();
      $(event.currentTarget).trigger('click');
      return;
    }
  });
}); 

jQuery(function ($) {
  var tabFlag = true;

  var tabTimtoutId = null;

  function scrollFilterTop($component) {
    var $window = $(window);
    var $filter = $component.find('.comp_v2_1220__filter');
    var height = $filter.outerHeight();
    var top = parseInt($filter.css('top'), 10) || 0;
    var offset = $component.find('.comp_v2_1220__h4--bold').offset();
    var posY = offset.top - top - height;

    if (posY < 0) {
      posY = 0;
    }

    if ($window.scrollTop() > posY) {
      $window.scrollTop(posY);
    }
  }

  $('.comp_v2_1220__frame').each(function (index, element) {
    var $component = $(element); 

    var muuriContents = new Muuri($component.find('.comp_v2_1220__contents').get(0), {
      layout: {
        rounding: false 

      },
      sortData: {
        article: function article(item, element) {
          var value = $(element).find('.comp_v2_1220__contents__item__box__article').text();
          return value;
        },
        media: function media(item, element) {
          var value = $(element).find('.comp_v2_1220__contents__item__box__media').text();
          return value;
        },
        description: function description(item, element) {
          var value = $(element).find('.comp_v2_1220__contents__item__box__description').text();
          return value;
        },
        date: function date(item, element) {
          var value = $(element).find('.comp_v2_1220__contents__item__box__date').data('date');
          return Number(value);
        },
        related: function related(item, element) {
          var value = $(element).find('.comp_v2_1220__contents__item__box__related').text();
          return value;
        }
      }
    }); 

    muuriContents.on('filter', function (shownItems, hiddenItems) {
      $component.find('.comp_v2_1220__count__number').text(shownItems.length);
    }); 

    muuriContents.on('layoutStart', function (items) {
      tabTimtoutId = setTimeout(function () {
        tabFlag = true;
        tabTimtoutId = null;
      }, 5000);
      tabFlag = false;
    }); 

    muuriContents.on('layoutEnd', function (items) {
      setTimeout(function () {
        var container = muuriContents.getElement();

        for (var i = 0; i < items.length; i++) {
          var _element2 = items[i].getElement();

          container.appendChild(_element2);
        }

        tabFlag = true;

        if (tabTimtoutId != null) {
          clearTimeout(tabTimtoutId);
          tabTimtoutId = null;
        }
      }, 0);
    }); 

    $component.find('.comp_v2_1220__filter__item__label').on('click', function (event) {
      void 0;
      void 0;
      var $target = $(event.currentTarget);
      var $radio = $('#' + $target.attr('for'));

      if ($radio.prop('checked')) {
        var $all = $target.closest('.comp_v2_1220').find('input[name="filter"][value="all"]');
        $all.trigger('click');
        event.preventDefault();
        event.stopPropagation();
      }
    }); 

    $component.find('input[name="filter"]').on('change', function (event) {
      void 0;
      void 0;
      var $target = $(event.currentTarget);
      var $container = $target.closest('.comp_v2_1220');
      var $title = $container.find('.comp_v2_1220__title__text');
      var title;
      var filter = $target.val();

      if (filter == 'all') {
        title = $title.data('default');
        filter = '*';
      } else {
        title = $target.next('.comp_v2_1220__filter__item__label').text().trim();
        filter = '[data-filter-' + filter + '="1"]';
      } 


      muuriContents.filter(filter); 

      $title.text(title); 

      scrollFilterTop($component);
    }); 

    $component.find('.comp_v2_1220__order__type__item a').on('click', function (event) {
      void 0;
      void 0;
      event.preventDefault();
      var $target = $(event.currentTarget);
      var $container = $target.closest('.comp_v2_1220'); 

      var sortBy = [$target.data('sort-by')];

      if (sortBy == 'media' || sortBy == 'date' || sortBy == 'related') {
        sortBy.push('article');
      } 


      var options = {
        descending: $target.attr('data-state') == '1' 

      }; 

      muuriContents.sort(sortBy.join(' '), options);
      $container.find('.comp_v2_1220__order__type__item a[data-state!="0"]').attr('data-state', '0');
      $target.attr('data-state', options['descending'] ? '2' : '1');
    });
  });
  $('.comp_v2_1220__filter').each(function (index, element) {
    Stickyfill.add(element);
  }); 

  $('.comp_v2_1220__filter__item label').on('keydown', function (event) {
    if (event.keyCode == 13 || event.keyCode == 32) {
      event.preventDefault();
      $(event.currentTarget).trigger('click');
      return;
    }
  }); 

  $('.comp_v2_1220__type__item label').on('keydown', function (event) {
    if (event.keyCode == 13 || event.keyCode == 32) {
      event.preventDefault();
      $(event.currentTarget).trigger('click');
      return;
    }
  }); 

  $('.comp_v2_1220 input[name="filter"]:checked').trigger('change'); 

  $(window).on('keydown', function (event) {
    if (!tabFlag && event.keyCode == 9) {
      event.preventDefault();
      event.stopPropagation();
      return false;
    }
  });
}); 

jQuery(function ($) {
  $('.comp_v2_1240__frame').each(function (index, element) {
    var $component = $(element); 

    var muuriContents = new Muuri($component.find('.comp_v2_1240__distoributors').get(0), {
      layout: {
        rounding: false 

      }
    });
    $component.find('.comp_v2_1240__filter__select select').on('change', function (event) {
      var $select = $(this);
      var filter = $select.val();

      if (filter == 'all') {
        filter = '*';
      } else {
        filter = '[data-filter-' + filter + '="1"]';
      } 


      muuriContents.filter(filter);
    });
  });
}); 

jQuery(function ($) {
  function isEmpty(value) {
    if (typeof value === 'undefined') {
      return true;
    }

    if (value == null) {
      return true;
    }

    return value.trim().length == 0;
  }


  function validates($form) {
    var $elements = $form.find('[data-required="1"]');

    for (var i = 0; i < $elements.length; i++) {
      var _$element = $elements.eq(i);

      var tagName = _$element.prop('tagName').toLowerCase();

      if (tagName == 'input') {
        var type = _$element.attr('type').toLowerCase(); 


        if (type == 'checkbox') {
          if (!_$element.is(':checked')) {
            void 0;
            return false;
          }

          continue;
        } 
        else if (type == 'radio') {
            var $checked = $form.find('input[type="radio"][name="' + _$element.attr('name') + '"]:checked');

            if ($checked.length == 0) {
              void 0;
              return false;
            }

            continue;
          }
      }

      var value = _$element.val();

      if (isEmpty(value)) {
        void 0;
        return false;
      }
    } 


    var $element = $form.find('input[name="email"]');

    if ($element.length > 0) {
      var _value = $element.val();

      _value = _value.trim();

      if (_value != '' && !/^[^@]+@.+\..+$/.test(_value)) {
        void 0;
        return false;
      }
    }

    return true;
  }


  function complement($form) {
    var firstName = $form.find('[name="firstName"]').val().trim();
    var lastName = $form.find('[name="lastName"]').val().trim();
    $form.find('[name="name"]').val(firstName + ' ' + lastName); 

    var postCode1 = $form.find('[name="postCode1"]').val().trim();
    var postCode2 = $form.find('[name="postCode2"]').val().trim();
    $form.find('[name="00N7F00000SAMGt"]').val(postCode1 + '-' + postCode2);
  }


  function messageBox(title, message) {
    var options = {
      title: title,
      content: $('<div></div>').append(message),
      appendClassList: ['comp_v2_3020__dialog'],
      positiveButton: {
        text: 'OK'
      },
      negativeButton: {
        text: ''
      }
    };
    var dialog = new ModalDialog(options);
    dialog.show();
  } 


  $('.comp_v2_3020__button').on('click', function (event) {
    var $button = $(event.currentTarget);
    var $form = $button.closest('form');
    var $alert = $form.find('.comp_v2_3020__alert'); 

    $alert.html(''); 

    var result = validates($form);

    if (result !== true) {
      $alert.html($alert.data('error-message'));
      return false;
    } 


    var options = {
      title: '確認',
      content: $('<div>送信します。よろしいですか？</div>'),
      appendClassList: ['comp_v2_3020__dialog'],
      positiveButton: {
        text: 'OK',
        callback: function callback() {
          complement($form);
          void 0; 

          $.ajax({
            type: 'POST',
            url: '/bin/SendWebToCase',
            data: $form.serialize()
          }).done(function (data, textStatus, jqXHR) {
            var sendStatus = data['SEND_STATUS'];
            var retURL = data['retURL']; 

            if (sendStatus == 'OK') {
              window.location.href = retURL;
            } 
            else {
                messageBox('登録失敗', '登録に失敗しました');
              }
          }).fail(function (jqXHR, textStatus, errorThrown) {
            messageBox('登録失敗', '通信に失敗しました');
          });
        }
      },
      negativeButton: {
        text: 'Cancel'
      }
    };
    var dialog = new ModalDialog(options);
    dialog.show();
  }); 

  $('.comp_v2_3020__noscript').css('display', 'none'); 

  $('.comp_v2_3020__yesscript').css('display', 'block');
}); 

jQuery(function ($) {
  function isEmpty(value) {
    if (typeof value === 'undefined') {
      return true;
    }

    if (value == null) {
      return true;
    }

    return value.trim().length == 0;
  }


  function loadTemplateJson(id) {
    var jsonString = $(id).text();

    if (jsonString.trim() == '') {
      jsonString = '{}';
    }

    return JSON.parse(jsonString);
  }


  function validates($form) {
    var $elements = $form.find('[data-required="1"]');

    for (var i = 0; i < $elements.length; i++) {
      var _$element2 = $elements.eq(i);

      var tagName = _$element2.prop('tagName').toLowerCase();

      if (tagName == 'input') {
        var type = _$element2.attr('type').toLowerCase(); 


        if (type == 'checkbox') {
          if (!_$element2.is(':checked')) {
            void 0;
            return false;
          }

          continue;
        } 
        else if (type == 'radio') {
            var $checked = $form.find('input[type="radio"][name="' + _$element2.attr('name') + '"]:checked');

            if ($checked.length == 0) {
              void 0;
              return false;
            }

            continue;
          }
      }

      var value = _$element2.val();

      if (isEmpty(value)) {
        void 0;
        return false;
      }
    } 


    var $element = $form.find('input[name="email"]');

    if ($element.length > 0) {
      var _value2 = $element.val();

      _value2 = _value2.trim();

      if (_value2 != '' && !/^[^@]+@.+\..+$/.test(_value2)) {
        void 0;
        return false;
      }
    }

    return true;
  }


  function complement($form) {
    var firstName = String($form.find('[name="00N2r000000Su1Q"]').val() || '');
    var lastName = String($form.find('[name="00N2r000000Su1S"]').val() || '');

    if ($form.data('name-first-flag') == '1') {
      $form.find('input[name="name"]').val(firstName + ' ' + lastName);
    } else {
      $form.find('input[name="name"]').val(lastName + ' ' + firstName);
    } 


    var inquiringAs = String($form.find('[name="Inquiring As"]:checked').val() || '');
    $form.find('input[name="00N7F00000SAMGo"]').val(inquiringAs); 

    var bu = '';
    var productCategory = '';
    var selectedProductCategory = String($form.find('[name="00N2r000000Su1U"]').val() || '');

    if (selectedProductCategory != '') {
      var _ref = function (category) {
        if (category == '') {
          return ['', ''];
        }

        var productCategoryMap = new Map();
        var buMap = new Map();
        productCategoryMap.set('General Purpose Logic ICs', 'Logic ICs').set('Optical Semiconductor Devices', 'Isolators/Solid State Relays').set('MOSFETs', 'MOSFETs').set('Gate Driver', 'MOSFETs').set('Integrated Power Module (IPM)', 'Integrated Power Module (IPM)').set('eFuse', 'eFuse').set('Power Management Devices', 'Power Management ICs').set('IGBTs/IEGTs', 'IGBTs/IEGTs').set('SiC Power Devices', 'SiC Power Devices').set('Bipolar Transistor', 'Bipolar Transistors').set('Diodes', 'Diode').set('Power Management ICs', 'Power Management ICs').set('Operational Amplifier and Comparators', '').set('Operational Amplifier', '').set('Radio-Frequency Devices', '').set('Automotive - Discrete Semiconductor', 'Automotive Device').set('Transistor Array', 'Transistor Array').set('Microcontrollers', 'General-Purpose MCU').set('Motor Driver ICs', 'Motor Controller').set('Image Recognition Processors Visconti', '').set('Linear Image Sensors, CCD', 'CCD').set('Interface Bridge ICs for MPD', 'Interface Bridge').set('ICs for Wireless Communication Equipment', 'Wireless Communication ICs').set('Interface Bridges', 'Interface Bridge').set('Video Bridges', 'Interface Bridge').set('PCIe/Ethernet Bridge', 'Interface Bridge').set('Motor Control ASSP', 'Motor Controller').set('Motor Control Driver IC', 'Motor Controller').set('General Purpose Linear IC', 'Transistor Array').set('Automotive - Digital', 'Automotive Device').set('Automotive - Analog', 'Automotive Device').set('Automotive - Wireless Device', 'Automotive Device').set('Data Center / Enterprise HDD', 'Data Center/Enterprise HDD').set('Internal / Specialty HDD', 'Internal/Specialty HDD').set('Storage Products (HDD)', '').set('Consumer Storage', 'Consumer Storage').set('Other than Semiconductor and HDD', 'Other');
        buMap.set('General Purpose Logic ICs', 'X3').set('Optical Semiconductor Devices', 'X3').set('MOSFETs', 'X3').set('Gate Driver', 'X3').set('Integrated Power Module (IPM)', 'X3').set('eFuse', 'X3').set('Power Management Devices', 'X3').set('IGBTs/IEGTs', 'X3').set('SiC Power Devices', 'X3').set('Bipolar Transistor', 'X3').set('Diodes', 'X3').set('Power Management ICs', 'X3').set('Operational Amplifier and Comparators', 'X3').set('Operational Amplifier', 'X3').set('Radio-Frequency Devices', 'X3').set('Automotive - Discrete Semiconductor', 'X3').set('Transistor Array', 'X5').set('Microcontrollers', 'X5').set('Motor Driver ICs', 'X5').set('Image Recognition Processors Visconti', 'X5').set('Linear Image Sensors, CCD', 'X5').set('Interface Bridge ICs for MPD', 'X5').set('ICs for Wireless Communication Equipment', 'X5').set('Interface Bridges', 'X5').set('Video Bridges', 'X5').set('PCIe/Ethernet Bridge', 'X5').set('Motor Control ASSP', 'X5').set('Motor Control Driver IC', 'X5').set('General Purpose Linear IC', 'X5').set('Automotive - Digital', 'X5').set('Automotive - Analog', 'X5').set('Automotive - Wireless Device', 'X5').set('Data Center / Enterprise HDD', 'X2(BtoB)').set('Internal / Specialty HDD', 'X2(BtoB)').set('Storage Products (HDD)', 'X2(BtoC)').set('Consumer Storage', 'X2(BtoC)').set('Other than Semiconductor and HDD', 'Other_than_TDSC_handling');
        return [buMap.get(category), productCategoryMap.get(category)];
      }(selectedProductCategory);

      var _ref2 = _slicedToArray(_ref, 2);

      bu = _ref2[0];
      productCategory = _ref2[1];
    }

    $form.find('input[name="00N2r000000Su1T"]').val(bu);
    $form.find('input[name="00N7F00000SAMGp"]').val(productCategory); 

    var recievedOsc = '';
    var region = '';
    var countryName = String($form.find('[name="00N2r000000Su1P"]').val() || '');

    if (countryName != '') {
      var regionCountries = loadTemplateJson('#' + $form.closest('.comp_v2_3021__frame').attr('id') + '-region-countries');

      var _ref3 = function (regionCountries, countryName, prductCategory) {
        if (regionCountries.apc.includes(countryName)) {
          var APC = 'ASIA Pacific';

          if (countryName == 'Japan') {
            return ['TDSC', APC];
          }

          if (countryName == 'India' || countryName == 'Bhutan' || countryName == 'Nepal') {
            return ['TEA(TIPL)', APC];
          }

          if (countryName == 'Bangladesh' && prductCategory != "HDD-Internal" && prductCategory != "HDD-External") {
            return ['TEA(TIPL)', APC];
          }

          if (countryName == 'Taiwan') {
            return ['TET', APC];
          }

          if (countryName == "Korea") {
            return ['TEKR', APC];
          }

          if (countryName == 'China' || countryName == 'Macau' || countryName == 'Hong Kong') {
            return ['TDES', APC];
          }

          return ['TEA', APC];
        } 


        if (regionCountries.ncsa.includes(countryName)) {
          return ['TAEC', 'NCSA (North, Central and South America)'];
        } 


        if (regionCountries.emea.includes(countryName)) {
          return ['TEE', 'EMEA (Europe, Middle East and Africa)'];
        }

        return ['', ''];
      }(regionCountries, countryName, productCategory);

      var _ref4 = _slicedToArray(_ref3, 2);

      recievedOsc = _ref4[0];
      region = _ref4[1];
    }

    $form.find('input[name="00N2r000000Su1V"]').val(recievedOsc);
    $form.find('input[name="00N2r000000Su1O"]').val(region); 

    var inquiryType = '';
    var inquiryCategory = String($form.find('[name="00N2r000000Su1R"]').val() || '');

    if (inquiryCategory != '') {
      inquiryType = function (inquiryCategory) {
        if (inquiryCategory == 'Technical questions') {
          return 'Technical Questions';
        }

        if (inquiryCategory == 'Sales request') {
          return 'Sales request';
        }

        if (inquiryCategory == 'Environment / Reliability') {
          return 'Environment Info';
        }

        if (inquiryCategory == 'News / Company info') {
          return 'Publication';
        }

        if (inquiryCategory == 'Warranty') {
          return 'Warranty';
        }

        return 'Others';
      }(inquiryCategory);
    }

    $form.find('input[name="00N7F00000SAMGm"]').val(inquiryType); 

    var address = String($form.find('[name="address"]').val() || '');

    if (address != '') {
      $form.find('input[name="00N7F00000SAMGe"]').val(address);
    } else {
      var values = [];
      var city = String($form.find('[name="00N2r000001s2oF"]').val() || '');
      var street = String($form.find('[name="00N2r000001s2oH"]').val() || '');

      if (city != '') {
        values.push(city);
      }

      if (street != '') {
        values.push(street);
      }

      $form.find('input[name="00N7F00000SAMGe"]').val(values.join(' '));
    }
  }


  function messageBox(title, message) {
    var options = {
      title: title,
      content: $('<div></div>').append(message),
      appendClassList: ['comp_v2_3021__dialog'],
      positiveButton: {
        text: 'OK'
      },
      negativeButton: {
        text: ''
      }
    };
    var dialog = new ModalDialog(options);
    dialog.show();
  } 


  $('.comp_v2_3021__button').on('click', function (event) {
    var $button = $(event.currentTarget);
    var $form = $button.closest('form');
    var $alert = $form.find('.comp_v2_3021__alert'); 

    $form.find('.comp_v2_3021__alert').html('');
    var connName = $form.find('input[name="connName"]').val();

    if (!connName) {
      return false;
    } 


    var result = validates($form);

    if (result !== true) {
      $alert.html($alert.data('error-message'));
      return false;
    } 


    var $checkboxes = $button.closest('.comp_v2_3021__frame').find('.comp_v2_3021__agreement input[type="checkbox"][name="required"]');

    for (var i = 0; i < $checkboxes.length; i++) {
      var $checkbox = $checkboxes.eq(i);

      if (!$checkbox.is(':checked')) {
        $alert.html($alert.data('error-message'));
        return false;
      }
    } 


    var options = {
      title: 'Check',
      content: $('<div>Ready to submit? Please make sure the information is correct before submitting your enquiry.</div>'),
      appendClassList: ['comp_v2_3021__dialog'],
      positiveButton: {
        text: 'OK',
        callback: function callback() {
          complement($form);
          void 0; 

          $.ajax({
            type: 'POST',
            url: '/bin/SendWebToCase',
            data: $form.serialize()
          }).done(function (data, textStatus, jqXHR) {
            var sendStatus = data['SEND_STATUS'];
            var retURL = data['retURL']; 

            if (sendStatus == 'OK') {
              window.location.href = retURL;
            } 
            else {
                messageBox('failure', 'Failed to save inquiry information.');
              }
          }).fail(function (jqXHR, textStatus, errorThrown) {
            messageBox('failure', 'Failed to connect to the server.');
          });
        }
      },
      negativeButton: {
        text: 'Cancel'
      }
    };
    var dialog = new ModalDialog(options);
    dialog.show();
  }); 

  $('.comp_v2_3021__noscript').css('display', 'none'); 

  $('.comp_v2_3021__yesscript').css('display', 'block');
}); 

jQuery(function ($) {
  var $window = $(window); 

  $('.comp_v2_3060 ul>li').each(function (index, element) {
    if (element.childNodes.length == 0) {
      return;
    }

    var target = element.firstChild;

    while (target != null && target.textContent.trim() === '') {
      target = target.nextSibling;
    }

    if (target === null || target.nodeName.toLowerCase() == 'a') {
      return;
    }

    $(element).css('display', 'flex').wrapInner('<span class="disc">');
  }); 

  $('.comp_v2_3060 a img').parent().addClass('icon-none');
  $('.comp_v2_3060__table__2cell td img.imageModal').imageModal(); 

  $('.comp_v2_3060 .comp_v2_3060--filter').each(function (index, element) {
    var $container = $(element);
    var $filter1 = $container.find('.comp_v2_3060__select__selecter--filter1 select');
    var $table = $container.find('table'); 

    if ($filter1.length == 0) {
      return;
    } 


    $filter1.on('change', function () {
      var value = $(this).val();
      var $trList = $table.find('tbody tr');

      for (var i = 0; i < $trList.length;)
      {
        var $column = $trList.eq(i).children(':first');
        var isShow = value == "" || value == $column.text();
        var rowspan = $column.attr('rowspan');

        if (typeof rowspan === 'undefined' || rowspan === false) {
          rowspan = 1;
        }

        for (var j = 0; j < Number(rowspan); j++) {
          try {
            if (!isShow) {
              $trList.eq(i).addClass('comp_v2_3060--filter--hide');
              continue;
            } 


            $trList.eq(i).removeClass('comp_v2_3060--filter--hide');
          } finally {
            i++;
          }
        }
      }
    }); 

    $window.on('resize', function () {
      $filter1.css('width', window.matchMedia('(max-width:768px)').matches ? '100%' : $table.find('thead tr th:first').outerWidth() + 'px');
    }); 

    var list = [];
    var $trList = $table.find('tbody tr');

    for (var i = 0; i < $trList.length; i++) {
      var $column = $trList.eq(i).children(':first');
      list.push($column.text());
      var rowspan = $column.attr('rowspan');

      if (typeof rowspan === 'undefined' || rowspan === false) {
        continue;
      }

      i += Number(rowspan) - 1;
    }

    for (var _i5 = 0; _i5 < list.length; _i5++) {
      $('<option>').val(list[_i5]).text(list[_i5]).appendTo($filter1);
    }

    $filter1.css('width', window.matchMedia('(max-width:768px)').matches ? '100%' : $table.find('thead tr th:first').outerWidth() + 'px');
  }); 

  $('.comp_v2_3060__scroll,.comp_v2_3060__scroll--shadow').each(function (index, element) {
    var ps = new PerfectScrollbar(element, {
      suppressScrollY: true
    });
    new ResizeObserver(function () {
      ps.update();
    }).observe(element);
  }); 

  $('.comp_v2_3060__scroll,.comp_v2_3060__scroll--shadow').swipeImage();
});
jQuery(function ($) {
  $('.comp_v2_3100__modal_open').click(function () {
    $('body').append('<div class="comp_v2_3100__modal_bg"></div>');
    $('.comp_v2_3100__modal_bg').fadeIn(); 

    var modal = '#' + $(this).attr('data-target'); 

    function modalResize() {
      var w = $(window).width();
      var h = $(window).height();
      var x = (w - $(modal).outerWidth(true)) / 2;
      var y = (h - $(modal).outerHeight(true)) / 2;
      $(modal).css({
        'left': x + 'px',
        'top': y + 'px'
      });
    } 


    modalResize(); 

    $(modal).fadeIn(); 

    $('.comp_v2_3100__modal_bg, .comp_v2_3100__modal_close').off().click(function () {
      $('.comp_v2_3100__modal_box').fadeOut();
      $('.comp_v2_3100__modal_bg').fadeOut('slow', function () {
        $('.comp_v2_3100__modal_bg').remove();
      });
    }); 

    $(window).on('resize', function () {
      modalResize();
    });
  });
  $('.comp_v2_3100__modal_box').each(function (index, element) {
    var $container = $(element);
    var $region = $container.find('.comp_v2_3100__modal_box__select__region select');
    var $inquiry = $container.find('.comp_v2_3100__modal_inquiry');
    var $country = $container.find('.comp_v2_3100__modal_box__select__country select');

    if ($region.length == 0) {
      return;
    } 


    $region.val("");
    $country.attr('disabled', 'disabled');
    $inquiry.attr('disabled', 'disabled');
    $region.on('change', function () {
      var $original = $container.find('.comp_v2_3100__modal_box__select__default select');
      var value = $(this).val();

      if (value == "ASIA Pacific") {
        $original = $container.find('.comp_v2_3100__modal_box__select__asia select');
      } else if (value == "EMEA (Europe, Middle East and Africa)") {
        $original = $container.find('.comp_v2_3100__modal_box__select__emea select');
      } else if (value == "NCSA (North, Central and South America)") {
        $original = $container.find('.comp_v2_3100__modal_box__select__ncsa select');
      }

      $country.children().remove();
      var $options = $original.children();

      for (var i = 0; i < $options.length; i++) {
        $country.append($("<option>").val($options.eq(i).val()).text($options.eq(i).text()).attr('hidden', $options.eq(i).attr('hidden')).data('url', $options.eq(i).data('url')));
      }

      $country.val("");

      if ($options.length == 1) {
        $country.attr('disabled', 'disabled');
        $inquiry.removeAttr('disabled');
      } else {
        $country.removeAttr('disabled');
        $inquiry.attr('disabled', 'disabled');
      }
    });
    $country.on('change', function () {
      if ($(this).val() != "") {
        $inquiry.removeAttr('disabled');
      } else {
        $inquiry.attr('disabled', 'disabled');
      }
    });
    $inquiry.on('click', function () {
      var $opt = $country.children().eq($country.prop('selectedIndex'));
      var $option = "?region=" + encodeURIComponent($region.val());

      if ($country.val() != "") {
        $option = $option + "&country=" + encodeURIComponent($country.val());
      }

      if ($opt.data('url')) {
        window.location.href = $opt.data('url') + $option;
      } else {
        $opt = $region.children().eq($region.prop('selectedIndex'));

        if ($opt.data('url')) {
          window.location.href = $opt.data('url') + $option;
        }
      }
    });
  });
}); 

jQuery(function ($) {
  $('.comp_v2_3101__button').on('click', function (event) {
    var modal = '#' + $(this).attr('data-target'); 

    var options = {
      title: $(modal).data('title'),
      content: $(modal).html(),
      appendClassList: ['comp_v2_3101__dialog'],
      positiveButton: {
        text: $(modal).data('positivename'),
        callback: function callback() {
          window.location.href = $(modal).data('positive');
        }
      },
      negativeButton: {
        text: $(modal).data('negativename'),
        callback: function callback() {
          window.location.href = $(modal).data('negative');
        }
      }
    };
    var dialog = new ModalDialog(options);
    dialog.show();
  });
}); 

jQuery(function ($) {
  $('.comp_v2_richtext__scroll,.comp_v2_richtext__scroll--shadow').each(function (index, element) {
    var ps = new PerfectScrollbar(element, {
      suppressScrollY: true
    });
    new ResizeObserver(function () {
      ps.update();
    }).observe(element);
  }); 

  $('.comp_v2_richtext__scroll,.comp_v2_richtext__scroll--shadow').swipeImage();
  $('.comp_v2_richtext__table__2cell td img').imageModal();
});
